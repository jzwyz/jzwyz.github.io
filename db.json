{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","path":"medias/contact.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8d0d831a77fe92a9e1530366ed90dec6d73d3aef","modified":1636041247173},{"_id":"source/about/index.md","hash":"f2b214e9b7fdb12b5275dd438f2666ede7c61a6a","modified":1636041247251},{"_id":"source/_posts/clickhouse.md","hash":"9176d5090eb3d38a3acc1f8997148499207650a0","modified":1636041247173},{"_id":"source/_posts/coreelec.md","hash":"3f9d494983c041928d6b8a0b79331f4360c14d9d","modified":1636041247174},{"_id":"source/_posts/cron.md","hash":"9d15f095111deb728eb86151dddc0b37cb8c108b","modified":1636041247174},{"_id":"source/_posts/docker.md","hash":"fe69fcf95434464eaf6171233c324a5b3b7ddae8","modified":1636041247175},{"_id":"source/_posts/electron.md","hash":"5c68a69c977ff45cbab51ca2869d95ee7f6fb036","modified":1636041247175},{"_id":"source/_posts/flutter.md","hash":"efc6816a004062ab64bfecec6dee323ddc42f7f1","modified":1636041247176},{"_id":"source/_posts/graphql.md","hash":"d96cbf22750ba506122d62b185ee3249b64b3cfb","modified":1636041247176},{"_id":"source/_posts/hackintosh.md","hash":"271b63c817188afc43aea4d2b21a4d4365370f24","modified":1636041247177},{"_id":"source/_posts/hello-world.md","hash":"25a5dbc5d58cd8a62bbcc62e98c24728a949c441","modified":1636041247181},{"_id":"source/_posts/iis.md","hash":"3726429b258916463e38e85a65e1481da0ebf2e6","modified":1636041247181},{"_id":"source/_posts/javascript-event-queue.md","hash":"eda828103d0e8ca60327a6bbb5b03b4fe9352d04","modified":1636041247200},{"_id":"source/_posts/markdown.md","hash":"cb5ed3d5b8658a41d84ba59fc12fec7eabf07de0","modified":1636041247202},{"_id":"source/_posts/meilin-zerotier.md","hash":"3e71bae3f59d2abbdcd0dc9f36e5c04016490452","modified":1636041247202},{"_id":"source/_posts/msl.md","hash":"3963935b4293238e4a8393667290cbbfcd58eba6","modified":1636041247202},{"_id":"source/_posts/mysql-explain.md","hash":"ca967062668b4e9151244e518ff19dfd4d54bfd3","modified":1636041247229},{"_id":"source/_posts/mysql5-7.md","hash":"e9fa69cab9f33a127161a150f2e3b66053e82866","modified":1636041247232},{"_id":"source/_posts/nginx.md","hash":"2c898349b8851b91e3eb064423443d4948bcfb48","modified":1636041247232},{"_id":"source/_posts/python3.md","hash":"8042a01d24ef79b967680d5ab5168fcaf55bda63","modified":1636041247232},{"_id":"source/_posts/regular.md","hash":"7d7ade9aa03f307412c602b4b133d488caaacefa","modified":1636041247248},{"_id":"source/_posts/serverless.md","hash":"80e5f3ad59b88dc3dfa49face56b1d8068dce75d","modified":1636041247248},{"_id":"source/_posts/shell.md","hash":"79289986cd2fecb8f6aa909f318e6aa13dce3370","modified":1636041247250},{"_id":"source/_posts/streamsets.md","hash":"0f7bb57ea6813eb3c82e63b1739dd8d43da54a10","modified":1636041247250},{"_id":"source/_posts/xgp-zerotier.md","hash":"7bac27842808f107e93e2e25c97645b3a5b8e337","modified":1636041247250},{"_id":"source/_posts/我的个人博客.md","hash":"5d8b913c55ee605f780402d0e374cdb87a756fdc","modified":1636041247251},{"_id":"source/archives/index.md","hash":"17934b19486006036243aba66a706edaed54c9a5","modified":1636216676317},{"_id":"source/categories/index.md","hash":"bc7fa28f054d5fab1d44069e3718fa7bd7ba6efe","modified":1636041247251},{"_id":"source/contact/index.md","hash":"699847983e8faee65a2a0d19ee3bd62a1927eaf7","modified":1636216694907},{"_id":"source/friends/index.md","hash":"2ec9707503f1317c0c39585c5970f6afefc2c3a5","modified":1636216731474},{"_id":"source/img/favicon.ico","hash":"ab4c1bd3b8a1e91457452ff7508e989bb01590a9","modified":1636041247252},{"_id":"source/gallery/index.md","hash":"771bb125a83e560b36cd9c2fa74d28f24fd8d4ac","modified":1636041247251},{"_id":"source/tags/index.md","hash":"5a5c42c736923887f72720c87b5a6043867080da","modified":1636041247252},{"_id":"source/_posts/coreelec/0.png","hash":"e7a5bb02c701b29d8050107ded18ebe43f93bc82","modified":1636041247174},{"_id":"source/_posts/docker/01.png","hash":"d0a73f4e314d2f1fb1135f10d95a80110b029be6","modified":1636041247175},{"_id":"source/_posts/flutter/1-1.png","hash":"bf5ad0671817b4a28f01e2ac251573186bf62197","modified":1636041247176},{"_id":"source/_posts/msl/20180912154639866.png","hash":"ae7700ed8ad600e95bb3d520395b6276fdcd5eed","modified":1636041247203},{"_id":"source/_posts/msl/WX20200602-161412@2x.png","hash":"be7ee7c84596cee276b4a05f1d28b53bc0fc05d0","modified":1636041247229},{"_id":"source/img/avatar.png","hash":"435e83bbd9033cb87590d3fcc83b54d4ea5d8c83","modified":1636041247252},{"_id":"source/_posts/javascript-event-queue/2.png","hash":"9ce78b2d57ccaf3dbab8b6239a0eb744da2943a7","modified":1636041247201},{"_id":"source/_posts/msl/WX20200108-164517@2x.png","hash":"e6a4d8bd0b2e85527c5a88678337c66b9d5e4421","modified":1636041247225},{"_id":"source/_posts/msl/WX20200108-173249@2x.png","hash":"bf8c92f152c8c322475b21454b5f9d88c8cac042","modified":1636041247226},{"_id":"source/_posts/xgp-zerotier/CD65E8E75C1CBF3BF60AFBF278909ACD.jpg","hash":"c05855d5979ea1af70d3f4ff34f8e7537c90edd4","modified":1636041247251},{"_id":"source/_posts/javascript-event-queue/1.png","hash":"af9b4c4c4ff64eb2df6be89619230bc2877e372f","modified":1636041247200},{"_id":"source/_posts/javascript-event-queue/3.jpg","hash":"e194f94cb9cac942309134d7cd802907b206712d","modified":1636041247202},{"_id":"source/_posts/iis/iis_05.png","hash":"1344136ae2456bd237a30e05ace0d26281243d08","modified":1636041247192},{"_id":"source/_posts/iis/iis_07.png","hash":"02fb064dc8f54c752d075df6b08bcf1c5def180f","modified":1636041247195},{"_id":"source/_posts/iis/iis_01.png","hash":"2bcaf156fdea27b6d26c5a4f3e26ab009ffebbff","modified":1636041247183},{"_id":"source/_posts/iis/iis_04.png","hash":"9d3d18ceeaed19f20e10d14a5232b00e5dcd5377","modified":1636041247191},{"_id":"source/_posts/msl/WX20200108-154615@2x.png","hash":"c9449c51d2d2e77de7a16a94d897f9d5302bf40d","modified":1636041247208},{"_id":"source/_posts/iis/iis_02.png","hash":"e1b5c2929e692d3f7106002ae1968c077f28c205","modified":1636041247186},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1636041247260},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1636041247261},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1636041247261},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1636041247261},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1636041247262},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"298e32ad7a8b8f0ec9b6896706b08a3a68e6315a","modified":1636217984546},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1636041247262},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1636041247263},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1636041247263},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1636041247263},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1636041247275},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1636041247275},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1636041247276},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1636041247276},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1636041247276},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1636041247276},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1636041247277},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1636041247277},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1636041247277},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1636041247277},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1636041247277},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1636041247278},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1636041247279},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1636041247263},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1636041247264},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1636041247264},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1636041247264},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1636041247264},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1636041247264},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1636041247265},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1636041247265},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1636041247265},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1636041247265},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1636041247266},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1636041247266},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1636041247266},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1636041247266},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1636041247267},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1636041247267},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1636041247267},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1636041247267},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1636041247268},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1636041247268},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1636041247268},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1636041247268},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1636041247269},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1636041247269},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1636041247269},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1636041247269},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1636041247270},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1636041247270},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1636041247270},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1636041247271},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1636041247271},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1636041247271},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1636041247272},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1636041247272},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1636041247272},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1636041247272},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1636041247273},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1636041247273},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1636041247273},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1636041247273},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1636041247274},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1636041247274},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1636041247274},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1636041247274},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1636041247275},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1636041247275},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1636041247278},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1636041247278},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1636041247278},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1636041247278},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1636041247278},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1636041247279},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1636041247279},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1636041247304},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1636041247308},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1636041247308},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1636041247315},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1636041247315},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1636041247279},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1636041247279},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1636041247279},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1636041247280},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1636041247292},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1636041247280},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1636041247292},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1636041247292},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1636041247292},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1636041247292},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1636041247292},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1636041247292},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1636041247292},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1636041247293},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1636041247293},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1636041247296},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1636041247297},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1636041247297},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1636041247297},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1636041247297},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1636041247300},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1636041247301},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1636041247301},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1636041247301},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1636041247301},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1636041247302},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1636041247303},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1636041247303},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1636041247309},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1636041247310},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1636041247311},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1636041247311},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1636041247312},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1636041247313},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1636041247313},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1636041247313},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1636041247313},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1636041247314},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1636041247315},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1636041247315},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1636041247316},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1636041247316},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1636041247285},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1636041247286},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1636041247286},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1636041247286},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1636041247298},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1636041247298},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1636041247298},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1636041247299},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1636041247299},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1636041247299},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1636041247299},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1636041247299},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1636041247299},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1636041247299},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1636041247302},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1636041247302},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1636041247302},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1636041247302},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1636041247302},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1636041247302},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1636041247303},{"_id":"source/_posts/iis/iis_06.png","hash":"da3ccd9ffc56d8535f50e029cb3702fe81d1b694","modified":1636041247194},{"_id":"source/_posts/msl/WX20200108-160028@2x.png","hash":"09b1ad523202aacbe728fbff75356c1ec8416a86","modified":1636041247219},{"_id":"source/_posts/serverless/WX20201015-145716@2x.png","hash":"f1f87f57d5480f8c5b4c6454c0e8afc73de850d0","modified":1636041247250},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1636041247293},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1636041247297},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1636041247298},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1636041247303},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1636041247305},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1636041247306},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1636041247306},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1636041247309},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1636041247309},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1636041247310},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1636041247310},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1636041247310},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1636041247311},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1636041247312},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1636041247312},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1636041247312},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1636041247314},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1636041247314},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1636041247315},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1636041247281},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1636041247281},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1636041247285},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1636041247285},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1636041247285},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1636041247291},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1636041247291},{"_id":"source/_posts/hackintosh/1.png","hash":"b63a55c777833a1ce6e46fa3ae92f9aa249c583f","modified":1636041247180},{"_id":"source/_posts/iis/iis_03.png","hash":"69c5035e7f8786b54b58a15d0785811d7b816aa3","modified":1636041247190},{"_id":"source/_posts/iis/iis_08.png","hash":"ad59aab613b2a29d980cd99426c71a9ec71edaaf","modified":1636041247197},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1636041247308},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1636041247297},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1636041247300},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1636041247301},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1636041247304},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1636041247305},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1636041247308},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1636041247307},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1636041247286},{"_id":"source/_posts/msl/WX20200108-173321@2x.png","hash":"b25a78c1d7fae91956a61954d0777f93df06051b","modified":1636041247228},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1636041247287},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1636041247291},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1636041247307},{"_id":"source/_posts/msl/A84A183D1145E8245B6A7C8A84FB985F.jpg","hash":"870e13a761a76f6512eec1f15a482e48484f51f9","modified":1636041247206},{"_id":"source/_posts/msl/WX20200108-155928@2x.png","hash":"73221f67e6854cd1cffd6190bdce07287a0bf883","modified":1636041247217},{"_id":"source/_posts/msl/WX20200108-154856@2x.png","hash":"e6cc5fae3f01c045a81b8f99405bb39b13047270","modified":1636041247211},{"_id":"source/_posts/msl/WX20200108-155336@2x.png","hash":"adcb1b8dce77fe2bf0791940c2830b5c0f13fcbe","modified":1636041247215},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1636041247296},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1636041247284},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1636041247290},{"_id":"source/_posts/msl/WX20200108-163130@2x.png","hash":"633b998972a69307fe5817861b54681a663b39b6","modified":1636041247225},{"_id":"source/_posts/mysql-explain/2864885534-202c0878c1abf896.png","hash":"2d887de1e5d3b758a150e0d320b41158b6bff244","modified":1636041247231},{"_id":"source/_posts/python3/1.png","hash":"0be2eb75fa3334297feebe5cacf1d75d4b5f8c5f","modified":1636041247248},{"_id":"public/search.json","hash":"fc72ee56cd649f9c53a6d8ec214508e5ba0176d4","modified":1636218198721},{"_id":"public/404.html","hash":"5fcfd31b60014b7225e1b40d88c3420681d677a3","modified":1636218198721},{"_id":"public/about/index.html","hash":"ab3895fc37e58e5fe95933e5c5111e28b2d29058","modified":1636218198721},{"_id":"public/archives/index.html","hash":"1aeafdb6ee52e721852b13bc286a02b1e6ce5c7a","modified":1636218198721},{"_id":"public/categories/index.html","hash":"5923d461833f5ba55062cc464c8d79d1406b8a73","modified":1636218198721},{"_id":"public/contact/index.html","hash":"d8fa6e4ae14d9cd334866ba4f802b718fcca024d","modified":1636218198721},{"_id":"public/friends/index.html","hash":"f096090bba98c2c7d0c6861c1c77fd1dcbea82d0","modified":1636218198721},{"_id":"public/gallery/index.html","hash":"6fc858320118e9d9de6ad309f3016bf4e80ee5b2","modified":1636218198721},{"_id":"public/tags/index.html","hash":"8cbc6353784154b45a92224e4f274bf040ed2103","modified":1636218198721},{"_id":"public/2020/10/15/serverless/index.html","hash":"c494192d0efa4c4fc3d1e9c111a2eff29018d9d0","modified":1636218198721},{"_id":"public/2020/08/26/hackintosh/index.html","hash":"028fd5a8ef6d030b8b2d1928ecbe785b76f9e57f","modified":1636218198721},{"_id":"public/2020/08/24/javascript-event-queue/index.html","hash":"b770500348647ed88ddbe7fe5403c13aef570292","modified":1636218198721},{"_id":"public/2020/08/06/flutter/index.html","hash":"bb9f4d7f5853ec3d44f744305ffef331e0b0da4d","modified":1636218198721},{"_id":"public/2020/06/02/electron/index.html","hash":"92711b7e40495f24f34aaa5f7a80388c88021fc7","modified":1636218198721},{"_id":"public/2020/03/03/coreelec/index.html","hash":"56b9b069af08ebc6459279346dcbd6d8cf6c65de","modified":1636218198721},{"_id":"public/2020/02/03/streamsets/index.html","hash":"080f2fb180f840938a31dc532ea16f43fb7c9830","modified":1636218198721},{"_id":"public/2020/01/08/msl/index.html","hash":"1a493872b0944e4b1a94af2b9072d111a80ef22b","modified":1636218198721},{"_id":"public/2020/01/02/meilin-zerotier/index.html","hash":"c92bab5d9ff108df13990912b4ff7823425803fc","modified":1636218198721},{"_id":"public/2020/01/02/mysql-explain/index.html","hash":"328237b420723f7ac871c212570611b2bf6d40e3","modified":1636218198721},{"_id":"public/2020/01/02/xgp-zerotier/index.html","hash":"2959c1d3ae82db2f7ee7260248ec28ddcde96535","modified":1636218198721},{"_id":"public/2019/10/22/graphql/index.html","hash":"073cb83969c049a390f2b511da2dcb9d9261d076","modified":1636218198721},{"_id":"public/2019/10/11/clickhouse/index.html","hash":"726a1acceff7ad279bbd67ea1a1b7b33d96a2cec","modified":1636218198721},{"_id":"public/2019/07/17/cron/index.html","hash":"a70c48ac7f330b9864f9a86f7c492479f9699316","modified":1636218198721},{"_id":"public/2019/07/17/regular/index.html","hash":"74e11f2bcbd8c234b80b5279f2c69340cb7575a9","modified":1636218198721},{"_id":"public/2019/07/04/python3/index.html","hash":"70200faec47eadc3d278d6d19caf95131c0fa3e1","modified":1636218198721},{"_id":"public/2019/06/18/shell/index.html","hash":"5bf0b468119c8d9b551146827d3a3fddaa2827be","modified":1636218198721},{"_id":"public/2019/06/05/mysql5-7/index.html","hash":"46f5393618b6e07259ddb6cf79ebd953deb54f85","modified":1636218198721},{"_id":"public/2019/05/16/docker/index.html","hash":"e606fefa3a322264c437f28f833548d591cf6e7a","modified":1636218198721},{"_id":"public/2019/05/15/nginx/index.html","hash":"3ca58c6c40d6089098c0b3855f28819d2ef3e03f","modified":1636218198721},{"_id":"public/2019/05/15/iis/index.html","hash":"02c32dacac99845e9f9f47dc4dba47ac5edd745f","modified":1636218198721},{"_id":"public/2019/04/26/markdown/index.html","hash":"5957f33e9b2bc6d8ab45a7c6e3e75b42c72557d9","modified":1636218198721},{"_id":"public/2019/01/01/hello-world/index.html","hash":"d48990a2f542505f1e14e31adcc2e2449908bc74","modified":1636218198721},{"_id":"public/2018/11/04/我的个人博客/index.html","hash":"56460ef7362906c573edc9dde00b3bea0e40fdfa","modified":1636218198721},{"_id":"public/archive/index.html","hash":"a8917f344b63a7b9cd17491e49cd51a42deda68f","modified":1636218198721},{"_id":"public/archive/page/2/index.html","hash":"a5e5aad8d9a8ecb813b5ba39dd3a6426ba9174b9","modified":1636218198721},{"_id":"public/archive/page/3/index.html","hash":"28c6dc9a6497e074d12e14d71f3bee19b700a2a9","modified":1636218198721},{"_id":"public/archive/2018/index.html","hash":"fc32d7838f9c1d67fed9236671336020fc00df86","modified":1636218198721},{"_id":"public/archive/2018/11/index.html","hash":"d6e044ac48d31a26e9475b3cc8c82f0603e4ff04","modified":1636218198721},{"_id":"public/archive/2019/index.html","hash":"cefe1d11b2d5cf160a8e045781d2d36c88fa8a9c","modified":1636218198721},{"_id":"public/archive/2019/page/2/index.html","hash":"0b87ed46846e36ed9e76bddcf1924bbb8c8bb864","modified":1636218198721},{"_id":"public/archive/2019/01/index.html","hash":"40b1102687b2468ecb2b5f07da37317d6aec1878","modified":1636218198721},{"_id":"public/archive/2019/04/index.html","hash":"48961e87bf4d1676ebe647b8301f268d47deae9f","modified":1636218198721},{"_id":"public/archive/2019/05/index.html","hash":"97590c854cf8c812481815a77265be3ce8d7db90","modified":1636218198721},{"_id":"public/archive/2019/06/index.html","hash":"e55a37aa69977d9491a4b32a9a259b5ed1ad383d","modified":1636218198721},{"_id":"public/archive/2019/07/index.html","hash":"892ca0df8bd2d95bafaca2f075d722b1fc125e9b","modified":1636218198721},{"_id":"public/archive/2019/10/index.html","hash":"0e22825549212b090ba5897e22668940c725c315","modified":1636218198721},{"_id":"public/archive/2020/index.html","hash":"a9f1362da6967b6023ec523e3ad8b07a4a70bbd0","modified":1636218198721},{"_id":"public/archive/2020/page/2/index.html","hash":"953b557bac63102967e97cee708b541483b996ad","modified":1636218198721},{"_id":"public/archive/2020/01/index.html","hash":"7603a632f69d851b824cc0dcd9f4b39b2be1a830","modified":1636218198721},{"_id":"public/archive/2020/02/index.html","hash":"a9fa7a3662806448603cd2bac415786e5b4d4c99","modified":1636218198721},{"_id":"public/archive/2020/03/index.html","hash":"a92fa1cb6a26ef229f9d1030563fa3c5e11d5941","modified":1636218198721},{"_id":"public/archive/2020/06/index.html","hash":"867f0dc0982443a67a4c8a502d35e03a0922e7ae","modified":1636218198721},{"_id":"public/archive/2020/08/index.html","hash":"ad744381b79dda4c1f45bfee781e4d8329b04885","modified":1636218198721},{"_id":"public/archive/2020/10/index.html","hash":"8ff2f30de945f4c812e086cb12becd6a5f7e3fba","modified":1636218198721},{"_id":"public/index.html","hash":"a5dc8f5e4734803d3e67f34455d1962df91a4f7e","modified":1636218198721},{"_id":"public/page/2/index.html","hash":"72677dd52900275f54e7f0383b3b4d2b8b48639c","modified":1636218198721},{"_id":"public/page/3/index.html","hash":"199f48196379566c5745fdef56a858974da893fc","modified":1636218198721},{"_id":"public/tags/数据库/index.html","hash":"c80ef256739cfa98be7529aa338031d42d02c1bf","modified":1636218198721},{"_id":"public/tags/coreelec-N1/index.html","hash":"461c6a2d705274f2d0bf79df172e4d1d2bfe699e","modified":1636218198721},{"_id":"public/tags/cron/index.html","hash":"ffeff1f3c770aa93ddaa87e6f9191e39951bc98f","modified":1636218198721},{"_id":"public/tags/容器/index.html","hash":"718351d6ec1bd5ec6e9441d0986973587e0c70fd","modified":1636218198721},{"_id":"public/tags/electron/index.html","hash":"47e6cba1baaf302204babc6eab4a8c939c5a8d6e","modified":1636218198721},{"_id":"public/tags/Flutter/index.html","hash":"4bf392be4d7646aa0811cb40e9d7485837f9ec81","modified":1636218198721},{"_id":"public/tags/API/index.html","hash":"6ceca877c07f401aa52d22abe3db92c8b2658634","modified":1636218198721},{"_id":"public/tags/黑苹果/index.html","hash":"352cf7777278653a1eed631bdfe5aa4a77031047","modified":1636218198721},{"_id":"public/tags/Hello-World/index.html","hash":"58c6df763b69fb2ae75aae5bf6b744fd48bda0a6","modified":1636218198721},{"_id":"public/tags/服务器/index.html","hash":"79444ad7e14de783a76d996191aa0b0ab28834d8","modified":1636218198721},{"_id":"public/tags/JavaScript/index.html","hash":"2a43743fd4f4b2904962bb41af286fed0463dabc","modified":1636218198721},{"_id":"public/tags/基础/index.html","hash":"fe5d581e00cc805ac7317762dc3b91be9323f146","modified":1636218198721},{"_id":"public/tags/路由器/index.html","hash":"ad09e9650210f2e441b6c387786225e784adddc4","modified":1636218198721},{"_id":"public/tags/Windows/index.html","hash":"18150a0105051009e20321cd383fc0e28b057588","modified":1636218198721},{"_id":"public/tags/Python/index.html","hash":"4252ed520f8d4292469ac9717877e9a78c3abc3a","modified":1636218198721},{"_id":"public/tags/serverless/index.html","hash":"a68632ba9ea0a0377739e03590ab66bf16e7b987","modified":1636218198721},{"_id":"public/tags/脚本语言/index.html","hash":"394e6ced25c3b8c398a247dc30ee7a59b894341c","modified":1636218198721},{"_id":"public/tags/大数据/index.html","hash":"534396bbc3d32c82482bbe9df03f3abad7ef3997","modified":1636218198721},{"_id":"public/tags/小钢炮/index.html","hash":"7b1ec7da3450112779dec9545c9e679e52c2d134","modified":1636218198721},{"_id":"public/tags/随便写写/index.html","hash":"92c30d8274754397037837a19674cc99e17f7fbe","modified":1636218198721},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1636218198721},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1636218198721},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1636218198721},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1636218198721},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1636218198721},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1636218198721},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1636218198721},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1636218198721},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1636218198721},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1636218198721},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1636218198721},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1636218198721},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1636218198721},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1636218198721},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1636218198721},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1636218198721},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1636218198721},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1636218198721},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1636218198721},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1636218198721},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1636218198721},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1636218198721},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1636218198721},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1636218198721},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1636218198721},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1636218198721},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1636218198721},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1636218198721},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1636218198721},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1636218198721},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1636218198721},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1636218198721},{"_id":"public/img/favicon.ico","hash":"ab4c1bd3b8a1e91457452ff7508e989bb01590a9","modified":1636218198721},{"_id":"public/2020/03/03/coreelec/0.png","hash":"e7a5bb02c701b29d8050107ded18ebe43f93bc82","modified":1636218198721},{"_id":"public/2019/05/16/docker/01.png","hash":"d0a73f4e314d2f1fb1135f10d95a80110b029be6","modified":1636218198721},{"_id":"public/2020/08/06/flutter/1-1.png","hash":"bf5ad0671817b4a28f01e2ac251573186bf62197","modified":1636218198721},{"_id":"public/2020/01/08/msl/20180912154639866.png","hash":"ae7700ed8ad600e95bb3d520395b6276fdcd5eed","modified":1636218198721},{"_id":"public/2020/01/08/msl/WX20200602-161412@2x.png","hash":"be7ee7c84596cee276b4a05f1d28b53bc0fc05d0","modified":1636218198721},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1636218198721},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1636218198721},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1636218198721},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1636218198721},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1636218198721},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1636218198721},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1636218198721},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1636218198721},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1636218198721},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1636218198721},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1636218198721},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1636218198721},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1636218198721},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1636218198721},{"_id":"public/img/avatar.png","hash":"435e83bbd9033cb87590d3fcc83b54d4ea5d8c83","modified":1636218198721},{"_id":"public/2020/08/24/javascript-event-queue/2.png","hash":"9ce78b2d57ccaf3dbab8b6239a0eb744da2943a7","modified":1636218198721},{"_id":"public/2020/01/08/msl/WX20200108-164517@2x.png","hash":"e6a4d8bd0b2e85527c5a88678337c66b9d5e4421","modified":1636218198721},{"_id":"public/2020/01/08/msl/WX20200108-173249@2x.png","hash":"bf8c92f152c8c322475b21454b5f9d88c8cac042","modified":1636218198721},{"_id":"public/2020/01/02/xgp-zerotier/CD65E8E75C1CBF3BF60AFBF278909ACD.jpg","hash":"c05855d5979ea1af70d3f4ff34f8e7537c90edd4","modified":1636218198721},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1636218198721},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1636218198721},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1636218198721},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1636218198721},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1636218198721},{"_id":"public/2020/08/24/javascript-event-queue/1.png","hash":"af9b4c4c4ff64eb2df6be89619230bc2877e372f","modified":1636218198721},{"_id":"public/2020/08/24/javascript-event-queue/3.jpg","hash":"e194f94cb9cac942309134d7cd802907b206712d","modified":1636218198721},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1636218198721},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1636218198721},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1636218198721},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1636218198721},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1636218198721},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1636218198721},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1636218198721},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1636218198721},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1636218198721},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1636218198721},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1636218198721},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1636218198721},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1636218198721},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1636218198721},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1636218198721},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1636218198721},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1636218198721},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1636218198721},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1636218198721},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1636218198721},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1636218198721},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1636218198721},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1636218198721},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1636218198721},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1636218198721},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1636218198721},{"_id":"public/2019/05/15/iis/iis_07.png","hash":"02fb064dc8f54c752d075df6b08bcf1c5def180f","modified":1636218198721},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1636218198721},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1636218198721},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1636218198721},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1636218198721},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1636218198721},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1636218198721},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1636218198721},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1636218198721},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1636218198721},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1636218198721},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1636218198721},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1636218198721},{"_id":"public/2019/05/15/iis/iis_05.png","hash":"1344136ae2456bd237a30e05ace0d26281243d08","modified":1636218198721},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1636218198721},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1636218198721},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1636218198721},{"_id":"public/2019/05/15/iis/iis_01.png","hash":"2bcaf156fdea27b6d26c5a4f3e26ab009ffebbff","modified":1636218198721},{"_id":"public/2019/05/15/iis/iis_02.png","hash":"e1b5c2929e692d3f7106002ae1968c077f28c205","modified":1636218198721},{"_id":"public/2019/05/15/iis/iis_04.png","hash":"9d3d18ceeaed19f20e10d14a5232b00e5dcd5377","modified":1636218198721},{"_id":"public/2020/01/08/msl/WX20200108-154615@2x.png","hash":"c9449c51d2d2e77de7a16a94d897f9d5302bf40d","modified":1636218198721},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1636218198721},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1636218198721},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1636218198721},{"_id":"public/2019/05/15/iis/iis_06.png","hash":"da3ccd9ffc56d8535f50e029cb3702fe81d1b694","modified":1636218198721},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1636218198721},{"_id":"public/2020/08/26/hackintosh/1.png","hash":"b63a55c777833a1ce6e46fa3ae92f9aa249c583f","modified":1636218198721},{"_id":"public/2019/05/15/iis/iis_03.png","hash":"69c5035e7f8786b54b58a15d0785811d7b816aa3","modified":1636218198721},{"_id":"public/2019/05/15/iis/iis_08.png","hash":"ad59aab613b2a29d980cd99426c71a9ec71edaaf","modified":1636218198721},{"_id":"public/2020/01/08/msl/WX20200108-160028@2x.png","hash":"09b1ad523202aacbe728fbff75356c1ec8416a86","modified":1636218198721},{"_id":"public/2020/10/15/serverless/WX20201015-145716@2x.png","hash":"f1f87f57d5480f8c5b4c6454c0e8afc73de850d0","modified":1636218198721},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1636218198721},{"_id":"public/2020/01/08/msl/A84A183D1145E8245B6A7C8A84FB985F.jpg","hash":"870e13a761a76f6512eec1f15a482e48484f51f9","modified":1636218198721},{"_id":"public/2020/01/08/msl/WX20200108-173321@2x.png","hash":"b25a78c1d7fae91956a61954d0777f93df06051b","modified":1636218198721},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1636218198721},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1636218198721},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1636218198721},{"_id":"public/2020/01/08/msl/WX20200108-155928@2x.png","hash":"73221f67e6854cd1cffd6190bdce07287a0bf883","modified":1636218198721},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1636218198721},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1636218198721},{"_id":"public/2020/01/08/msl/WX20200108-154856@2x.png","hash":"e6cc5fae3f01c045a81b8f99405bb39b13047270","modified":1636218198721},{"_id":"public/2020/01/08/msl/WX20200108-155336@2x.png","hash":"adcb1b8dce77fe2bf0791940c2830b5c0f13fcbe","modified":1636218198721},{"_id":"public/2020/01/08/msl/WX20200108-163130@2x.png","hash":"633b998972a69307fe5817861b54681a663b39b6","modified":1636218198721},{"_id":"public/2020/01/02/mysql-explain/2864885534-202c0878c1abf896.png","hash":"2d887de1e5d3b758a150e0d320b41158b6bff244","modified":1636218198721},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1636218198721},{"_id":"public/2019/07/04/python3/1.png","hash":"0be2eb75fa3334297feebe5cacf1d75d4b5f8c5f","modified":1636218198721}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2021-11-04T15:54:07.173Z","updated":"2021-11-04T15:54:07.173Z","path":"404.html","title":"","comments":1,"_id":"ckvo22ihj0000ahtegvt9erwl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2018-11-03T06:30:12.000Z","layout":"about","type":"about","_content":"\n## 我\n\n一个程序员, 喜欢折腾, 但是得到的收获却很少, 如果博客哪里有写的不好, 欢迎评论批评.\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-11-03 14:30:12\nlayout: about\ntype: about\n---\n\n## 我\n\n一个程序员, 喜欢折腾, 但是得到的收获却很少, 如果博客哪里有写的不好, 欢迎评论批评.\n","updated":"2021-11-04T15:54:07.251Z","path":"about/index.html","comments":1,"_id":"ckvo22ihn0002ahtegn197no6","content":"<h2 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h2><p>一个程序员, 喜欢折腾, 但是得到的收获却很少, 如果博客哪里有写的不好, 欢迎评论批评.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h2><p>一个程序员, 喜欢折腾, 但是得到的收获却很少, 如果博客哪里有写的不好, 欢迎评论批评.</p>\n"},{"title":"archives","date":"2021-11-06T16:37:56.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2021-11-07 00:37:56\n---\n","updated":"2021-11-06T16:37:56.317Z","path":"archives/index.html","comments":1,"layout":"page","_id":"ckvo22ihp0005ahte1ak5bkab","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-11-03T06:27:42.000Z","layout":"categories","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-11-03 14:27:42\nlayout: categories\ntype: categories\n---\n","updated":"2021-11-04T15:54:07.251Z","path":"categories/index.html","comments":1,"_id":"ckvo22ihq0007ahte030hb0cy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2021-11-06T16:38:14.000Z","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2021-11-07 00:38:14\n---\n","updated":"2021-11-06T16:38:14.907Z","path":"contact/index.html","comments":1,"layout":"page","_id":"ckvo22ihr0009ahteepj1ailo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2021-11-06T16:38:51.000Z","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2021-11-07 00:38:51\n---\n","updated":"2021-11-06T16:38:51.474Z","path":"friends/index.html","comments":1,"layout":"page","_id":"ckvo22ihs000dahte69zl685z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"相册","date":"2018-11-03T06:30:54.000Z","layout":"gallery","type":"gallery","_content":"","source":"gallery/index.md","raw":"---\ntitle: 相册\ndate: 2018-11-03 14:30:54\nlayout: gallery\ntype: gallery\n---\n","updated":"2021-11-04T15:54:07.251Z","path":"gallery/index.html","comments":1,"_id":"ckvo22ihs000fahteb44q9btw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-11-03T06:29:36.000Z","layout":"tags","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-11-03 14:29:36\nlayout: tags\ntype: tags\n---\n","updated":"2021-11-04T15:54:07.252Z","path":"tags/index.html","comments":1,"_id":"ckvo22ihu000iahteao6sf1zp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"clickhouse学习笔记","date":"2019-10-11T02:06:44.000Z","_content":"\nClickHouse是一个用于联机分析(**OLAP**)的**列式**数据库管理系统(DBMS)。\n\n## Clickhouse使用\n\n[官网](https://clickhouse.yandex/)\n\n[官方文档](https://clickhouse.yandex/docs/zh/)\n\n### 入门(单机)\n\n使用docker部署\n\n```sh\ndocker pull yandex/clickhouse-server:latest\ndocker run -d -p 8123:8123 -p 9000:9000 -p 9009:9009 --name clickhouse yandex/clickhouse-server:latest\n```\n\n> 其他方式安装参考 [部署运行](https://clickhouse.yandex/docs/zh/getting_started/)\n\n1. 默认没有用户, 设置用户名密码参考 `/etc/clickhouse-server/users.xml` 做添加/修改\n2. 默认数据库 `default`\n3. 自定义配置文件可以存放在 `/etc/clickhouse-server/config.d` 和 `/etc/clickhouse-server/users.d` 分别对应 系统配置/用户配置, 自动融合到主配置文件中\n\n### 集群\n\n#### 多副本\n\n在 `/etc/clickhouse-server/config.d` 下添加配置文件 `remote_servers.xml`, 例:\n\n```xml\n<yandex>\n    <remote_servers incl=\"clickhouse_remote_servers\" > <!--集群节点配置-->\n        <test_clu> <!-- 集群名称 -->\n            <shard> <!-- 分片1 -->\n                <internal_replication>false</internal_replication> <!-- 插入数据时,向所有副本插入数据 -->\n                <replica> <!-- 副本1 -->\n                    <default_database>default</default_database>\n                    <host>${host_name}</host> <!--ip-->\n                    <port>9000</port>  <!--port-->\n                    <user>default</user> <!-- 用户名密码.可选 -->\n                    <password>123456</password>\n                </replica>\n                <replica> <!-- 副本1 -->\n                    <default_database>default</default_database>\n                    <host>${host_name}</host>\n                    <port>9000</port>\n                    <user>default</user>\n                    <password>123456</password>\n                </replica>\n             </shard>\n         </test_clu>\n    </remote_servers>\n</yandex>\n```\n\n#### 分布式+多副本+高可用 (同步插入)\n\n1. 在 `/etc/clickhouse-server/config.d` 下添加配置文件 `remote_servers.xml`\n2. 在 `/etc/clickhouse-server/config.d` 下添加配置文件 `zookeeper.xml`\n3. 所有机器都需要创建相同的 `副本表、分布式表`\n4. zookeeper 用与分布式协调\n5. 分片参数 `internal_replication` 必须设置为 true\n6. marcos.xml **每个副本都应该唯一**\n\nsql参考\n\n```sql\n--  创建副本表\ncreate table if not exists default.c_user (\n    `id` int,\n    `name` Nullable(String),\n    `sex` int,\n    `address` Nullable(String),\n    `datetime` Date DEFAULT now()\n) ENGINE =MergeTree();\n\n-- 创建分布式表\ncreate table if not exists default.user_all (\n    `id` int,\n    `name` Nullable(String),\n    `sex` int,\n    `address` Nullable(String),\n    `datetime` Date DEFAULT now()\n) engine = Distributed(test_clu, 'default', 'c_user', rand()); -- 集群名称, 数据库, 副本表, 集群数据分配策略\n```\n\n`remote_servers.xml` 参考配置\n\n```xml\n<yandex>\n    <remote_servers incl=\"clickhouse_remote_servers\" >\n        <test_clu> <!-- 集群名称 -->\n            <shard> <!-- 分片1 -->\n                <internal_replication>true</internal_replication> <!-- 插入数据时,向所有副本插入数据 -->\n                <replica> <!-- 副本1 -->\n                    <default_database>default</default_database>\n                    <host>clickhouse_s1</host>\n                    <port>9000</port>\n                    <user>default</user>\n                    <password>123456</password>\n                </replica>\n                <replica> <!-- 副本2 -->\n                    <default_database>default</default_database>\n                    <host>clickhouse_s3</host>\n                    <port>9000</port>\n                    <user>default</user>\n                    <password>123456</password>\n                </replica>\n             </shard>\n             <shard> <!-- 分片2 -->\n                <internal_replication>true</internal_replication>\n                <replica> <!-- 副本1 -->\n                    <default_database>default</default_database>\n                    <host>clickhouse_s2</host>\n                    <port>9000</port>\n                    <user>default</user>\n                    <password>123456</password>\n                </replica>\n                <replica> <!-- 副本2 -->\n                    <default_database>default</default_database>\n                    <host>clickhouse_s4</host>\n                    <port>9000</port>\n                    <user>default</user>\n                    <password>123456</password>\n                </replica>\n             </shard>\n         </test_clu>\n    </remote_servers>\n\n    <!-- 数据压缩算法 -->\n    <clickhouse_compression>\n        <case>\n            <min_part_size>10000000000</min_part_size>\n            <min_part_size_ratio>0.01</min_part_size_ratio>\n            <method>lz4</method>\n        </case>\n    </clickhouse_compression>\n</yandex>\n```\n\n`zookeeper.xml` 参考配置\n\n```xml\n<yandex>\n    <zookeeper incl=\"zookeeper-servers\">\n        <node index=\"1\">\n            <host>clickhouse_zk0</host>\n            <port>2181</port>\n        </node>\n        <!-- 多节点配置\n        <node index=\"2\">\n            <host>clickhouse_zk1</host>\n            <port>2181</port>\n        </node>\n        -->\n    </zookeeper>\n</yandex>\n```\n\n#### 分布式+多副本+高可用 (复制表)\n\n上面的基础上再在 `/etc/clickhouse-server/config.d` 下添加配置文件 `macros.xml`\n\n这个方式与上面*同步插入*的区别是 *插入数据时,只向一个副本插入,其他副本自动复制数据*, 我们需要将表引擎由`MergeTree`改为`ReplicatedMergeTree`\n\n参考sql\n\n```sql\n--  创建副本表\ncreate table if not exists default.c_user (\n    `id` int,\n    `name` Nullable(String),\n    `sex` int,\n    `address` Nullable(String),\n    `datetime` Date DEFAULT now()\n) ENGINE =ReplicatedMergeTree('/clickhouse/tables/{shard}/default/c_user', '{replica}',`datetime` ,(`datetime`,`id`),8192);\n-- {shard} 会自动从 macros.xml 中获取配置\n-- {replica} 会自动从 macros.xml 中获取配置\n-- `datetime` 是时间类型的字段\n\n-- 创建分布式表\ncreate table if not exists default.user_all (\n    `id` int,\n    `name` Nullable(String),\n    `sex` int,\n    `address` Nullable(String),\n    `datetime` Date DEFAULT now()\n) engine = Distributed(test_clu, 'default', 'c_user', rand());\n```\n\nmarcos.xml 参考配置\n\n```xml\n<yandex>\n    <macros replace=\"replace\">\n        <shard>SHARD_NAME</shard> <!--集群ID-->\n        <replica>REPLICA_NAME</replica> <!--副本ID-->\n    </macros>\n</yandex>\n```\n\n> **每个副本都应该唯一**\n\n## 总结\n\nclickhouse用于大数据查询, 占用空间少, 查询速度快\n","source":"_posts/clickhouse.md","raw":"---\ntitle: clickhouse学习笔记\ndate: 2019-10-11 10:06:44\ntags: 数据库\n---\n\nClickHouse是一个用于联机分析(**OLAP**)的**列式**数据库管理系统(DBMS)。\n\n## Clickhouse使用\n\n[官网](https://clickhouse.yandex/)\n\n[官方文档](https://clickhouse.yandex/docs/zh/)\n\n### 入门(单机)\n\n使用docker部署\n\n```sh\ndocker pull yandex/clickhouse-server:latest\ndocker run -d -p 8123:8123 -p 9000:9000 -p 9009:9009 --name clickhouse yandex/clickhouse-server:latest\n```\n\n> 其他方式安装参考 [部署运行](https://clickhouse.yandex/docs/zh/getting_started/)\n\n1. 默认没有用户, 设置用户名密码参考 `/etc/clickhouse-server/users.xml` 做添加/修改\n2. 默认数据库 `default`\n3. 自定义配置文件可以存放在 `/etc/clickhouse-server/config.d` 和 `/etc/clickhouse-server/users.d` 分别对应 系统配置/用户配置, 自动融合到主配置文件中\n\n### 集群\n\n#### 多副本\n\n在 `/etc/clickhouse-server/config.d` 下添加配置文件 `remote_servers.xml`, 例:\n\n```xml\n<yandex>\n    <remote_servers incl=\"clickhouse_remote_servers\" > <!--集群节点配置-->\n        <test_clu> <!-- 集群名称 -->\n            <shard> <!-- 分片1 -->\n                <internal_replication>false</internal_replication> <!-- 插入数据时,向所有副本插入数据 -->\n                <replica> <!-- 副本1 -->\n                    <default_database>default</default_database>\n                    <host>${host_name}</host> <!--ip-->\n                    <port>9000</port>  <!--port-->\n                    <user>default</user> <!-- 用户名密码.可选 -->\n                    <password>123456</password>\n                </replica>\n                <replica> <!-- 副本1 -->\n                    <default_database>default</default_database>\n                    <host>${host_name}</host>\n                    <port>9000</port>\n                    <user>default</user>\n                    <password>123456</password>\n                </replica>\n             </shard>\n         </test_clu>\n    </remote_servers>\n</yandex>\n```\n\n#### 分布式+多副本+高可用 (同步插入)\n\n1. 在 `/etc/clickhouse-server/config.d` 下添加配置文件 `remote_servers.xml`\n2. 在 `/etc/clickhouse-server/config.d` 下添加配置文件 `zookeeper.xml`\n3. 所有机器都需要创建相同的 `副本表、分布式表`\n4. zookeeper 用与分布式协调\n5. 分片参数 `internal_replication` 必须设置为 true\n6. marcos.xml **每个副本都应该唯一**\n\nsql参考\n\n```sql\n--  创建副本表\ncreate table if not exists default.c_user (\n    `id` int,\n    `name` Nullable(String),\n    `sex` int,\n    `address` Nullable(String),\n    `datetime` Date DEFAULT now()\n) ENGINE =MergeTree();\n\n-- 创建分布式表\ncreate table if not exists default.user_all (\n    `id` int,\n    `name` Nullable(String),\n    `sex` int,\n    `address` Nullable(String),\n    `datetime` Date DEFAULT now()\n) engine = Distributed(test_clu, 'default', 'c_user', rand()); -- 集群名称, 数据库, 副本表, 集群数据分配策略\n```\n\n`remote_servers.xml` 参考配置\n\n```xml\n<yandex>\n    <remote_servers incl=\"clickhouse_remote_servers\" >\n        <test_clu> <!-- 集群名称 -->\n            <shard> <!-- 分片1 -->\n                <internal_replication>true</internal_replication> <!-- 插入数据时,向所有副本插入数据 -->\n                <replica> <!-- 副本1 -->\n                    <default_database>default</default_database>\n                    <host>clickhouse_s1</host>\n                    <port>9000</port>\n                    <user>default</user>\n                    <password>123456</password>\n                </replica>\n                <replica> <!-- 副本2 -->\n                    <default_database>default</default_database>\n                    <host>clickhouse_s3</host>\n                    <port>9000</port>\n                    <user>default</user>\n                    <password>123456</password>\n                </replica>\n             </shard>\n             <shard> <!-- 分片2 -->\n                <internal_replication>true</internal_replication>\n                <replica> <!-- 副本1 -->\n                    <default_database>default</default_database>\n                    <host>clickhouse_s2</host>\n                    <port>9000</port>\n                    <user>default</user>\n                    <password>123456</password>\n                </replica>\n                <replica> <!-- 副本2 -->\n                    <default_database>default</default_database>\n                    <host>clickhouse_s4</host>\n                    <port>9000</port>\n                    <user>default</user>\n                    <password>123456</password>\n                </replica>\n             </shard>\n         </test_clu>\n    </remote_servers>\n\n    <!-- 数据压缩算法 -->\n    <clickhouse_compression>\n        <case>\n            <min_part_size>10000000000</min_part_size>\n            <min_part_size_ratio>0.01</min_part_size_ratio>\n            <method>lz4</method>\n        </case>\n    </clickhouse_compression>\n</yandex>\n```\n\n`zookeeper.xml` 参考配置\n\n```xml\n<yandex>\n    <zookeeper incl=\"zookeeper-servers\">\n        <node index=\"1\">\n            <host>clickhouse_zk0</host>\n            <port>2181</port>\n        </node>\n        <!-- 多节点配置\n        <node index=\"2\">\n            <host>clickhouse_zk1</host>\n            <port>2181</port>\n        </node>\n        -->\n    </zookeeper>\n</yandex>\n```\n\n#### 分布式+多副本+高可用 (复制表)\n\n上面的基础上再在 `/etc/clickhouse-server/config.d` 下添加配置文件 `macros.xml`\n\n这个方式与上面*同步插入*的区别是 *插入数据时,只向一个副本插入,其他副本自动复制数据*, 我们需要将表引擎由`MergeTree`改为`ReplicatedMergeTree`\n\n参考sql\n\n```sql\n--  创建副本表\ncreate table if not exists default.c_user (\n    `id` int,\n    `name` Nullable(String),\n    `sex` int,\n    `address` Nullable(String),\n    `datetime` Date DEFAULT now()\n) ENGINE =ReplicatedMergeTree('/clickhouse/tables/{shard}/default/c_user', '{replica}',`datetime` ,(`datetime`,`id`),8192);\n-- {shard} 会自动从 macros.xml 中获取配置\n-- {replica} 会自动从 macros.xml 中获取配置\n-- `datetime` 是时间类型的字段\n\n-- 创建分布式表\ncreate table if not exists default.user_all (\n    `id` int,\n    `name` Nullable(String),\n    `sex` int,\n    `address` Nullable(String),\n    `datetime` Date DEFAULT now()\n) engine = Distributed(test_clu, 'default', 'c_user', rand());\n```\n\nmarcos.xml 参考配置\n\n```xml\n<yandex>\n    <macros replace=\"replace\">\n        <shard>SHARD_NAME</shard> <!--集群ID-->\n        <replica>REPLICA_NAME</replica> <!--副本ID-->\n    </macros>\n</yandex>\n```\n\n> **每个副本都应该唯一**\n\n## 总结\n\nclickhouse用于大数据查询, 占用空间少, 查询速度快\n","slug":"clickhouse","published":1,"updated":"2021-11-04T15:54:07.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihl0001ahtebqi57agr","content":"<p>ClickHouse是一个用于联机分析(<strong>OLAP</strong>)的<strong>列式</strong>数据库管理系统(DBMS)。</p>\n<h2 id=\"Clickhouse使用\"><a href=\"#Clickhouse使用\" class=\"headerlink\" title=\"Clickhouse使用\"></a>Clickhouse使用</h2><p><a href=\"https://clickhouse.yandex/\">官网</a></p>\n<p><a href=\"https://clickhouse.yandex/docs/zh/\">官方文档</a></p>\n<h3 id=\"入门-单机\"><a href=\"#入门-单机\" class=\"headerlink\" title=\"入门(单机)\"></a>入门(单机)</h3><p>使用docker部署</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull yandex/clickhouse-server:latest</span><br><span class=\"line\">docker run -d -p 8123:8123 -p 9000:9000 -p 9009:9009 --name clickhouse yandex/clickhouse-server:latest</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其他方式安装参考 <a href=\"https://clickhouse.yandex/docs/zh/getting_started/\">部署运行</a></p>\n</blockquote>\n<ol>\n<li>默认没有用户, 设置用户名密码参考 <code>/etc/clickhouse-server/users.xml</code> 做添加/修改</li>\n<li>默认数据库 <code>default</code></li>\n<li>自定义配置文件可以存放在 <code>/etc/clickhouse-server/config.d</code> 和 <code>/etc/clickhouse-server/users.d</code> 分别对应 系统配置/用户配置, 自动融合到主配置文件中</li>\n</ol>\n<h3 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h3><h4 id=\"多副本\"><a href=\"#多副本\" class=\"headerlink\" title=\"多副本\"></a>多副本</h4><p>在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>remote_servers.xml</code>, 例:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remote_servers</span> <span class=\"attr\">incl</span>=<span class=\"string\">&quot;clickhouse_remote_servers&quot;</span> &gt;</span> <span class=\"comment\">&lt;!--集群节点配置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test_clu</span>&gt;</span> <span class=\"comment\">&lt;!-- 集群名称 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span> <span class=\"comment\">&lt;!-- 分片1 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span> <span class=\"comment\">&lt;!-- 插入数据时,向所有副本插入数据 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本1 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;host_name&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span> <span class=\"comment\">&lt;!--ip--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span>  <span class=\"comment\">&lt;!--port--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span> <span class=\"comment\">&lt;!-- 用户名密码.可选 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本1 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;host_name&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">test_clu</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">remote_servers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分布式-多副本-高可用-同步插入\"><a href=\"#分布式-多副本-高可用-同步插入\" class=\"headerlink\" title=\"分布式+多副本+高可用 (同步插入)\"></a>分布式+多副本+高可用 (同步插入)</h4><ol>\n<li>在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>remote_servers.xml</code></li>\n<li>在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>zookeeper.xml</code></li>\n<li>所有机器都需要创建相同的 <code>副本表、分布式表</code></li>\n<li>zookeeper 用与分布式协调</li>\n<li>分片参数 <code>internal_replication</code> 必须设置为 true</li>\n<li>marcos.xml <strong>每个副本都应该唯一</strong></li>\n</ol>\n<p>sql参考</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--  创建副本表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> default.c_user (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`sex`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`address`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`datetime`</span> <span class=\"built_in\">Date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>()</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> =MergeTree();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建分布式表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> default.user_all (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`sex`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`address`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`datetime`</span> <span class=\"built_in\">Date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>()</span><br><span class=\"line\">) <span class=\"keyword\">engine</span> = <span class=\"keyword\">Distributed</span>(test_clu, <span class=\"string\">&#x27;default&#x27;</span>, <span class=\"string\">&#x27;c_user&#x27;</span>, <span class=\"keyword\">rand</span>()); <span class=\"comment\">-- 集群名称, 数据库, 副本表, 集群数据分配策略</span></span><br></pre></td></tr></table></figure>\n\n<p><code>remote_servers.xml</code> 参考配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remote_servers</span> <span class=\"attr\">incl</span>=<span class=\"string\">&quot;clickhouse_remote_servers&quot;</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test_clu</span>&gt;</span> <span class=\"comment\">&lt;!-- 集群名称 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span> <span class=\"comment\">&lt;!-- 分片1 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span> <span class=\"comment\">&lt;!-- 插入数据时,向所有副本插入数据 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本1 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>clickhouse_s1<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本2 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>clickhouse_s3<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span> <span class=\"comment\">&lt;!-- 分片2 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本1 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>clickhouse_s2<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本2 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>clickhouse_s4<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">test_clu</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">remote_servers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据压缩算法 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">clickhouse_compression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">case</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">min_part_size</span>&gt;</span>10000000000<span class=\"tag\">&lt;/<span class=\"name\">min_part_size</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">min_part_size_ratio</span>&gt;</span>0.01<span class=\"tag\">&lt;/<span class=\"name\">min_part_size_ratio</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">method</span>&gt;</span>lz4<span class=\"tag\">&lt;/<span class=\"name\">method</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">case</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">clickhouse_compression</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>zookeeper.xml</code> 参考配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">zookeeper</span> <span class=\"attr\">incl</span>=<span class=\"string\">&quot;zookeeper-servers&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>clickhouse_zk0<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>2181<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 多节点配置</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;node index=&quot;2&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;host&gt;clickhouse_zk1&lt;/host&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;port&gt;2181&lt;/port&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/node&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">zookeeper</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分布式-多副本-高可用-复制表\"><a href=\"#分布式-多副本-高可用-复制表\" class=\"headerlink\" title=\"分布式+多副本+高可用 (复制表)\"></a>分布式+多副本+高可用 (复制表)</h4><p>上面的基础上再在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>macros.xml</code></p>\n<p>这个方式与上面<em>同步插入</em>的区别是 <em>插入数据时,只向一个副本插入,其他副本自动复制数据</em>, 我们需要将表引擎由<code>MergeTree</code>改为<code>ReplicatedMergeTree</code></p>\n<p>参考sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--  创建副本表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> default.c_user (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`sex`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`address`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`datetime`</span> <span class=\"built_in\">Date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>()</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> =ReplicatedMergeTree(<span class=\"string\">&#x27;/clickhouse/tables/&#123;shard&#125;/default/c_user&#x27;</span>, <span class=\"string\">&#x27;&#123;replica&#125;&#x27;</span>,<span class=\"string\">`datetime`</span> ,(<span class=\"string\">`datetime`</span>,<span class=\"string\">`id`</span>),<span class=\"number\">8192</span>);</span><br><span class=\"line\"><span class=\"comment\">-- &#123;shard&#125; 会自动从 macros.xml 中获取配置</span></span><br><span class=\"line\"><span class=\"comment\">-- &#123;replica&#125; 会自动从 macros.xml 中获取配置</span></span><br><span class=\"line\"><span class=\"comment\">-- `datetime` 是时间类型的字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建分布式表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> default.user_all (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`sex`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`address`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`datetime`</span> <span class=\"built_in\">Date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>()</span><br><span class=\"line\">) <span class=\"keyword\">engine</span> = <span class=\"keyword\">Distributed</span>(test_clu, <span class=\"string\">&#x27;default&#x27;</span>, <span class=\"string\">&#x27;c_user&#x27;</span>, <span class=\"keyword\">rand</span>());</span><br></pre></td></tr></table></figure>\n\n<p>marcos.xml 参考配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">macros</span> <span class=\"attr\">replace</span>=<span class=\"string\">&quot;replace&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span>SHARD_NAME<span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span> <span class=\"comment\">&lt;!--集群ID--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span>REPLICA_NAME<span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!--副本ID--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">macros</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>每个副本都应该唯一</strong></p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>clickhouse用于大数据查询, 占用空间少, 查询速度快</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ClickHouse是一个用于联机分析(<strong>OLAP</strong>)的<strong>列式</strong>数据库管理系统(DBMS)。</p>\n<h2 id=\"Clickhouse使用\"><a href=\"#Clickhouse使用\" class=\"headerlink\" title=\"Clickhouse使用\"></a>Clickhouse使用</h2><p><a href=\"https://clickhouse.yandex/\">官网</a></p>\n<p><a href=\"https://clickhouse.yandex/docs/zh/\">官方文档</a></p>\n<h3 id=\"入门-单机\"><a href=\"#入门-单机\" class=\"headerlink\" title=\"入门(单机)\"></a>入门(单机)</h3><p>使用docker部署</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull yandex/clickhouse-server:latest</span><br><span class=\"line\">docker run -d -p 8123:8123 -p 9000:9000 -p 9009:9009 --name clickhouse yandex/clickhouse-server:latest</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其他方式安装参考 <a href=\"https://clickhouse.yandex/docs/zh/getting_started/\">部署运行</a></p>\n</blockquote>\n<ol>\n<li>默认没有用户, 设置用户名密码参考 <code>/etc/clickhouse-server/users.xml</code> 做添加/修改</li>\n<li>默认数据库 <code>default</code></li>\n<li>自定义配置文件可以存放在 <code>/etc/clickhouse-server/config.d</code> 和 <code>/etc/clickhouse-server/users.d</code> 分别对应 系统配置/用户配置, 自动融合到主配置文件中</li>\n</ol>\n<h3 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h3><h4 id=\"多副本\"><a href=\"#多副本\" class=\"headerlink\" title=\"多副本\"></a>多副本</h4><p>在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>remote_servers.xml</code>, 例:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remote_servers</span> <span class=\"attr\">incl</span>=<span class=\"string\">&quot;clickhouse_remote_servers&quot;</span> &gt;</span> <span class=\"comment\">&lt;!--集群节点配置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test_clu</span>&gt;</span> <span class=\"comment\">&lt;!-- 集群名称 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span> <span class=\"comment\">&lt;!-- 分片1 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span> <span class=\"comment\">&lt;!-- 插入数据时,向所有副本插入数据 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本1 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;host_name&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span> <span class=\"comment\">&lt;!--ip--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span>  <span class=\"comment\">&lt;!--port--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span> <span class=\"comment\">&lt;!-- 用户名密码.可选 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本1 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>$&#123;host_name&#125;<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">test_clu</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">remote_servers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分布式-多副本-高可用-同步插入\"><a href=\"#分布式-多副本-高可用-同步插入\" class=\"headerlink\" title=\"分布式+多副本+高可用 (同步插入)\"></a>分布式+多副本+高可用 (同步插入)</h4><ol>\n<li>在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>remote_servers.xml</code></li>\n<li>在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>zookeeper.xml</code></li>\n<li>所有机器都需要创建相同的 <code>副本表、分布式表</code></li>\n<li>zookeeper 用与分布式协调</li>\n<li>分片参数 <code>internal_replication</code> 必须设置为 true</li>\n<li>marcos.xml <strong>每个副本都应该唯一</strong></li>\n</ol>\n<p>sql参考</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--  创建副本表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> default.c_user (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`sex`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`address`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`datetime`</span> <span class=\"built_in\">Date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>()</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> =MergeTree();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建分布式表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> default.user_all (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`sex`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`address`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`datetime`</span> <span class=\"built_in\">Date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>()</span><br><span class=\"line\">) <span class=\"keyword\">engine</span> = <span class=\"keyword\">Distributed</span>(test_clu, <span class=\"string\">&#x27;default&#x27;</span>, <span class=\"string\">&#x27;c_user&#x27;</span>, <span class=\"keyword\">rand</span>()); <span class=\"comment\">-- 集群名称, 数据库, 副本表, 集群数据分配策略</span></span><br></pre></td></tr></table></figure>\n\n<p><code>remote_servers.xml</code> 参考配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remote_servers</span> <span class=\"attr\">incl</span>=<span class=\"string\">&quot;clickhouse_remote_servers&quot;</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test_clu</span>&gt;</span> <span class=\"comment\">&lt;!-- 集群名称 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span> <span class=\"comment\">&lt;!-- 分片1 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span> <span class=\"comment\">&lt;!-- 插入数据时,向所有副本插入数据 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本1 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>clickhouse_s1<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本2 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>clickhouse_s3<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span> <span class=\"comment\">&lt;!-- 分片2 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本1 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>clickhouse_s2<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!-- 副本2 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>clickhouse_s4<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">test_clu</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">remote_servers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据压缩算法 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">clickhouse_compression</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">case</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">min_part_size</span>&gt;</span>10000000000<span class=\"tag\">&lt;/<span class=\"name\">min_part_size</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">min_part_size_ratio</span>&gt;</span>0.01<span class=\"tag\">&lt;/<span class=\"name\">min_part_size_ratio</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">method</span>&gt;</span>lz4<span class=\"tag\">&lt;/<span class=\"name\">method</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">case</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">clickhouse_compression</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>zookeeper.xml</code> 参考配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">zookeeper</span> <span class=\"attr\">incl</span>=<span class=\"string\">&quot;zookeeper-servers&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>clickhouse_zk0<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>2181<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 多节点配置</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;node index=&quot;2&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;host&gt;clickhouse_zk1&lt;/host&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;port&gt;2181&lt;/port&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/node&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">zookeeper</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分布式-多副本-高可用-复制表\"><a href=\"#分布式-多副本-高可用-复制表\" class=\"headerlink\" title=\"分布式+多副本+高可用 (复制表)\"></a>分布式+多副本+高可用 (复制表)</h4><p>上面的基础上再在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>macros.xml</code></p>\n<p>这个方式与上面<em>同步插入</em>的区别是 <em>插入数据时,只向一个副本插入,其他副本自动复制数据</em>, 我们需要将表引擎由<code>MergeTree</code>改为<code>ReplicatedMergeTree</code></p>\n<p>参考sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--  创建副本表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> default.c_user (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`sex`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`address`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`datetime`</span> <span class=\"built_in\">Date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>()</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> =ReplicatedMergeTree(<span class=\"string\">&#x27;/clickhouse/tables/&#123;shard&#125;/default/c_user&#x27;</span>, <span class=\"string\">&#x27;&#123;replica&#125;&#x27;</span>,<span class=\"string\">`datetime`</span> ,(<span class=\"string\">`datetime`</span>,<span class=\"string\">`id`</span>),<span class=\"number\">8192</span>);</span><br><span class=\"line\"><span class=\"comment\">-- &#123;shard&#125; 会自动从 macros.xml 中获取配置</span></span><br><span class=\"line\"><span class=\"comment\">-- &#123;replica&#125; 会自动从 macros.xml 中获取配置</span></span><br><span class=\"line\"><span class=\"comment\">-- `datetime` 是时间类型的字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建分布式表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> default.user_all (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`sex`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`address`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`datetime`</span> <span class=\"built_in\">Date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>()</span><br><span class=\"line\">) <span class=\"keyword\">engine</span> = <span class=\"keyword\">Distributed</span>(test_clu, <span class=\"string\">&#x27;default&#x27;</span>, <span class=\"string\">&#x27;c_user&#x27;</span>, <span class=\"keyword\">rand</span>());</span><br></pre></td></tr></table></figure>\n\n<p>marcos.xml 参考配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">macros</span> <span class=\"attr\">replace</span>=<span class=\"string\">&quot;replace&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span>SHARD_NAME<span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span> <span class=\"comment\">&lt;!--集群ID--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span>REPLICA_NAME<span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span> <span class=\"comment\">&lt;!--副本ID--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">macros</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>每个副本都应该唯一</strong></p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>clickhouse用于大数据查询, 占用空间少, 查询速度快</p>\n"},{"title":"N1安装CoreELEC并安装Docker、Zerotier","date":"2020-03-03T12:37:35.000Z","_content":"\nN1安装CoreELEC并安装Docker、Zerotier， 并设置Zerotier开机自启\n\n## 安装CoreELEC\n\n[传送门](https://www.right.com.cn/forum/thread-1135262-1-1.html)\n\n## 安装Docker\n\n直接再CoreELEC的插件库 服务插件中安装即可\n\n### 使用 Portainer 工具管理 Docker\n\n在开发环境下使用此方式合适， 生产环境**不建议**\n\n1. 开启docker api\n2. 设置docker镜像源为国内源，（提高下载镜像的速度）\n\n修改启动文件\n\n`vi /storage/.kodi/addons/service.system.docker/system.d/service.system.docker.service`\n\n```sh\n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network.target\n\n[Service]\nType=notify\nEnvironment=PATH=/bin:/sbin:/usr/bin:/usr/sbin:/storage/.kodi/addons/service.sys                                      tem.docker/bin\nExecStartPre=/storage/.kodi/addons/service.system.docker/bin/docker-config\nEnvironmentFile=-/storage/.kodi/userdata/addon_data/service.system.docker/config                                      /docker.conf\nExecStart=/storage/.kodi/addons/service.system.docker/bin/dockerd -H tcp://0.0.0                                      .0:2375 -H unix:///var/run/docker.sock --registry-mirror=https://el2yu6j2.mirror                                      .aliyuncs.com --exec-opt native.cgroupdriver=systemd --log-driver=journald --gro                                      up=root $DOCKER_DAEMON_OPTS $DOCKER_STORAGE_OPTS\nExecReload=/bin/kill -s HUP $MAINPID\nTasksMax=8192\nLimitNOFILE=1048576\nLimitNPROC=1048576\nLimitCORE=infinity\nTimeoutStartSec=0\nRestart=on-abnormal\n\n[Install]\nWantedBy=multi-user.target\nAlias=docker.service\n```\n\n**注意 ExecStart 这个参数，我遇到的坑，就是这行命令不能换行**\n\n加上 `-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --registry-mirror=https://el2yu6j2.mirror.aliyuncs.com`\n\n重新启动\n\n```sh\n$ systemctl daemon-reload\n$ systemctl restart docker\n```\n\n测试\n\n```sh\n$ netstat -anp |grep 2375\n```\n\n查看docker是否监听 2375 端口\n\n![ ](./0.png)\n\n## 安装Zerotier\n\n### 安装 ent\n\n### zerotier 开机自启动\n\nzerotier的服务启动文件 `zerotier-one.service`, 放在 `/storage/.config/system.d/` 下面\n\n```sh\n[Unit]\nDescription=zerotier-one                             # 服务名称，不重复就🆗\nAfter=syslog.target network.target\n\n[Service]\nType=forking\nPIDFile=/opt/var/lib/zerotier-one/zerotier-one.pid   # 这里按照你的软件安装目录而定\nExecStart=/opt/bin/zerotier-one -d                   # 这里按照你的软件安装目录而定\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/bin/kill -s QUIT $MAINPID\nPrivateTmp=true\nUser=root\nGroup=root\n\n[Install]\nWantedBy=multi-user.target\n```\n\n执行命名：\n\n```sh\n$ systemctl daemon-reload\n$ systemctl restart zerotier-one\n$ systemctl enable zerotier-one\n```\n\n## 其他\n","source":"_posts/coreelec.md","raw":"---\ntitle: N1安装CoreELEC并安装Docker、Zerotier\ndate: 2020-03-03 20:37:35\ntags: coreelec N1\n---\n\nN1安装CoreELEC并安装Docker、Zerotier， 并设置Zerotier开机自启\n\n## 安装CoreELEC\n\n[传送门](https://www.right.com.cn/forum/thread-1135262-1-1.html)\n\n## 安装Docker\n\n直接再CoreELEC的插件库 服务插件中安装即可\n\n### 使用 Portainer 工具管理 Docker\n\n在开发环境下使用此方式合适， 生产环境**不建议**\n\n1. 开启docker api\n2. 设置docker镜像源为国内源，（提高下载镜像的速度）\n\n修改启动文件\n\n`vi /storage/.kodi/addons/service.system.docker/system.d/service.system.docker.service`\n\n```sh\n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network.target\n\n[Service]\nType=notify\nEnvironment=PATH=/bin:/sbin:/usr/bin:/usr/sbin:/storage/.kodi/addons/service.sys                                      tem.docker/bin\nExecStartPre=/storage/.kodi/addons/service.system.docker/bin/docker-config\nEnvironmentFile=-/storage/.kodi/userdata/addon_data/service.system.docker/config                                      /docker.conf\nExecStart=/storage/.kodi/addons/service.system.docker/bin/dockerd -H tcp://0.0.0                                      .0:2375 -H unix:///var/run/docker.sock --registry-mirror=https://el2yu6j2.mirror                                      .aliyuncs.com --exec-opt native.cgroupdriver=systemd --log-driver=journald --gro                                      up=root $DOCKER_DAEMON_OPTS $DOCKER_STORAGE_OPTS\nExecReload=/bin/kill -s HUP $MAINPID\nTasksMax=8192\nLimitNOFILE=1048576\nLimitNPROC=1048576\nLimitCORE=infinity\nTimeoutStartSec=0\nRestart=on-abnormal\n\n[Install]\nWantedBy=multi-user.target\nAlias=docker.service\n```\n\n**注意 ExecStart 这个参数，我遇到的坑，就是这行命令不能换行**\n\n加上 `-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --registry-mirror=https://el2yu6j2.mirror.aliyuncs.com`\n\n重新启动\n\n```sh\n$ systemctl daemon-reload\n$ systemctl restart docker\n```\n\n测试\n\n```sh\n$ netstat -anp |grep 2375\n```\n\n查看docker是否监听 2375 端口\n\n![ ](./0.png)\n\n## 安装Zerotier\n\n### 安装 ent\n\n### zerotier 开机自启动\n\nzerotier的服务启动文件 `zerotier-one.service`, 放在 `/storage/.config/system.d/` 下面\n\n```sh\n[Unit]\nDescription=zerotier-one                             # 服务名称，不重复就🆗\nAfter=syslog.target network.target\n\n[Service]\nType=forking\nPIDFile=/opt/var/lib/zerotier-one/zerotier-one.pid   # 这里按照你的软件安装目录而定\nExecStart=/opt/bin/zerotier-one -d                   # 这里按照你的软件安装目录而定\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/bin/kill -s QUIT $MAINPID\nPrivateTmp=true\nUser=root\nGroup=root\n\n[Install]\nWantedBy=multi-user.target\n```\n\n执行命名：\n\n```sh\n$ systemctl daemon-reload\n$ systemctl restart zerotier-one\n$ systemctl enable zerotier-one\n```\n\n## 其他\n","slug":"coreelec","published":1,"updated":"2021-11-04T15:54:07.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihn0003ahtehglob9fh","content":"<p>N1安装CoreELEC并安装Docker、Zerotier， 并设置Zerotier开机自启</p>\n<h2 id=\"安装CoreELEC\"><a href=\"#安装CoreELEC\" class=\"headerlink\" title=\"安装CoreELEC\"></a>安装CoreELEC</h2><p><a href=\"https://www.right.com.cn/forum/thread-1135262-1-1.html\">传送门</a></p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p>直接再CoreELEC的插件库 服务插件中安装即可</p>\n<h3 id=\"使用-Portainer-工具管理-Docker\"><a href=\"#使用-Portainer-工具管理-Docker\" class=\"headerlink\" title=\"使用 Portainer 工具管理 Docker\"></a>使用 Portainer 工具管理 Docker</h3><p>在开发环境下使用此方式合适， 生产环境<strong>不建议</strong></p>\n<ol>\n<li>开启docker api</li>\n<li>设置docker镜像源为国内源，（提高下载镜像的速度）</li>\n</ol>\n<p>修改启动文件</p>\n<p><code>vi /storage/.kodi/addons/service.system.docker/system.d/service.system.docker.service</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Docker Application Container Engine</span><br><span class=\"line\">Documentation=https://docs.docker.com</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=notify</span><br><span class=\"line\">Environment=PATH=/bin:/sbin:/usr/bin:/usr/sbin:/storage/.kodi/addons/service.sys                                      tem.docker/bin</span><br><span class=\"line\">ExecStartPre=/storage/.kodi/addons/service.system.docker/bin/docker-config</span><br><span class=\"line\">EnvironmentFile=-/storage/.kodi/userdata/addon_data/service.system.docker/config                                      /docker.conf</span><br><span class=\"line\">ExecStart=/storage/.kodi/addons/service.system.docker/bin/dockerd -H tcp://0.0.0                                      .0:2375 -H unix:///var/run/docker.sock --registry-mirror=https://el2yu6j2.mirror                                      .aliyuncs.com --exec-opt native.cgroupdriver=systemd --log-driver=journald --gro                                      up=root <span class=\"variable\">$DOCKER_DAEMON_OPTS</span> <span class=\"variable\">$DOCKER_STORAGE_OPTS</span></span><br><span class=\"line\">ExecReload=/bin/<span class=\"built_in\">kill</span> -s HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">TasksMax=8192</span><br><span class=\"line\">LimitNOFILE=1048576</span><br><span class=\"line\">LimitNPROC=1048576</span><br><span class=\"line\">LimitCORE=infinity</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">Restart=on-abnormal</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">Alias=docker.service</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意 ExecStart 这个参数，我遇到的坑，就是这行命令不能换行</strong></p>\n<p>加上 <code>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --registry-mirror=https://el2yu6j2.mirror.aliyuncs.com</code></p>\n<p>重新启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -anp |grep 2375</span><br></pre></td></tr></table></figure>\n\n<p>查看docker是否监听 2375 端口</p>\n<p><img src=\"./0.png\" alt=\" \"></p>\n<h2 id=\"安装Zerotier\"><a href=\"#安装Zerotier\" class=\"headerlink\" title=\"安装Zerotier\"></a>安装Zerotier</h2><h3 id=\"安装-ent\"><a href=\"#安装-ent\" class=\"headerlink\" title=\"安装 ent\"></a>安装 ent</h3><h3 id=\"zerotier-开机自启动\"><a href=\"#zerotier-开机自启动\" class=\"headerlink\" title=\"zerotier 开机自启动\"></a>zerotier 开机自启动</h3><p>zerotier的服务启动文件 <code>zerotier-one.service</code>, 放在 <code>/storage/.config/system.d/</code> 下面</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=zerotier-one                             <span class=\"comment\"># 服务名称，不重复就🆗</span></span><br><span class=\"line\">After=syslog.target network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/opt/var/lib/zerotier-one/zerotier-one.pid   <span class=\"comment\"># 这里按照你的软件安装目录而定</span></span><br><span class=\"line\">ExecStart=/opt/bin/zerotier-one -d                   <span class=\"comment\"># 这里按照你的软件安装目录而定</span></span><br><span class=\"line\">ExecReload=/bin/<span class=\"built_in\">kill</span> -s HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">ExecStop=/bin/<span class=\"built_in\">kill</span> -s QUIT <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\">User=root</span><br><span class=\"line\">Group=root</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>执行命名：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl restart zerotier-one</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> zerotier-one</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2>","site":{"data":{}},"excerpt":"","more":"<p>N1安装CoreELEC并安装Docker、Zerotier， 并设置Zerotier开机自启</p>\n<h2 id=\"安装CoreELEC\"><a href=\"#安装CoreELEC\" class=\"headerlink\" title=\"安装CoreELEC\"></a>安装CoreELEC</h2><p><a href=\"https://www.right.com.cn/forum/thread-1135262-1-1.html\">传送门</a></p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p>直接再CoreELEC的插件库 服务插件中安装即可</p>\n<h3 id=\"使用-Portainer-工具管理-Docker\"><a href=\"#使用-Portainer-工具管理-Docker\" class=\"headerlink\" title=\"使用 Portainer 工具管理 Docker\"></a>使用 Portainer 工具管理 Docker</h3><p>在开发环境下使用此方式合适， 生产环境<strong>不建议</strong></p>\n<ol>\n<li>开启docker api</li>\n<li>设置docker镜像源为国内源，（提高下载镜像的速度）</li>\n</ol>\n<p>修改启动文件</p>\n<p><code>vi /storage/.kodi/addons/service.system.docker/system.d/service.system.docker.service</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Docker Application Container Engine</span><br><span class=\"line\">Documentation=https://docs.docker.com</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=notify</span><br><span class=\"line\">Environment=PATH=/bin:/sbin:/usr/bin:/usr/sbin:/storage/.kodi/addons/service.sys                                      tem.docker/bin</span><br><span class=\"line\">ExecStartPre=/storage/.kodi/addons/service.system.docker/bin/docker-config</span><br><span class=\"line\">EnvironmentFile=-/storage/.kodi/userdata/addon_data/service.system.docker/config                                      /docker.conf</span><br><span class=\"line\">ExecStart=/storage/.kodi/addons/service.system.docker/bin/dockerd -H tcp://0.0.0                                      .0:2375 -H unix:///var/run/docker.sock --registry-mirror=https://el2yu6j2.mirror                                      .aliyuncs.com --exec-opt native.cgroupdriver=systemd --log-driver=journald --gro                                      up=root <span class=\"variable\">$DOCKER_DAEMON_OPTS</span> <span class=\"variable\">$DOCKER_STORAGE_OPTS</span></span><br><span class=\"line\">ExecReload=/bin/<span class=\"built_in\">kill</span> -s HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">TasksMax=8192</span><br><span class=\"line\">LimitNOFILE=1048576</span><br><span class=\"line\">LimitNPROC=1048576</span><br><span class=\"line\">LimitCORE=infinity</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">Restart=on-abnormal</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">Alias=docker.service</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意 ExecStart 这个参数，我遇到的坑，就是这行命令不能换行</strong></p>\n<p>加上 <code>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --registry-mirror=https://el2yu6j2.mirror.aliyuncs.com</code></p>\n<p>重新启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -anp |grep 2375</span><br></pre></td></tr></table></figure>\n\n<p>查看docker是否监听 2375 端口</p>\n<p><img src=\"./0.png\" alt=\" \"></p>\n<h2 id=\"安装Zerotier\"><a href=\"#安装Zerotier\" class=\"headerlink\" title=\"安装Zerotier\"></a>安装Zerotier</h2><h3 id=\"安装-ent\"><a href=\"#安装-ent\" class=\"headerlink\" title=\"安装 ent\"></a>安装 ent</h3><h3 id=\"zerotier-开机自启动\"><a href=\"#zerotier-开机自启动\" class=\"headerlink\" title=\"zerotier 开机自启动\"></a>zerotier 开机自启动</h3><p>zerotier的服务启动文件 <code>zerotier-one.service</code>, 放在 <code>/storage/.config/system.d/</code> 下面</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=zerotier-one                             <span class=\"comment\"># 服务名称，不重复就🆗</span></span><br><span class=\"line\">After=syslog.target network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/opt/var/lib/zerotier-one/zerotier-one.pid   <span class=\"comment\"># 这里按照你的软件安装目录而定</span></span><br><span class=\"line\">ExecStart=/opt/bin/zerotier-one -d                   <span class=\"comment\"># 这里按照你的软件安装目录而定</span></span><br><span class=\"line\">ExecReload=/bin/<span class=\"built_in\">kill</span> -s HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">ExecStop=/bin/<span class=\"built_in\">kill</span> -s QUIT <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\">User=root</span><br><span class=\"line\">Group=root</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>执行命名：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl restart zerotier-one</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> zerotier-one</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2>"},{"title":"cron表达式","date":"2019-07-17T10:08:11.000Z","_content":"\ncron表达式常用于调度任务\n\n本文摘自:[cron表达式详解](https://www.cnblogs.com/javahr/p/8318728.html)\n\n## 结构\n\ncorn从左到右（用空格隔开）：秒 分 小时 日期 月份 星期 [年份]\n\n## 各字段的含义\n\n字段|允许值|允许的特殊字符\n:-------:|:---------------------:|:------------------:\n秒（Seconds）|0~59的整数|, - * /    四个字符\n分（Minutes）|0~59的整数|, - * /    四个字符\n小时（Hours）|0~23的整数|, - * /    四个字符\n日期（DayofMonth）|1~31的整数（但是你需要考虑你月的天数）|,- * ? / L W C     八个字符\n月份（Month）|1~12的整数或者 JAN-DEC|, - * /    四个字符\n星期（DayofWeek）|1~7的整数或者 SUN-SAT （1=SUN）|, - * ? / L C #     八个字符\n年(可选，留空)（Year）|1970~2099|, - * /    四个字符\n\n## 注意事项\n\n每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是:\n\n1. *：表示匹配该域的任意值。假如在Minutes域使用*, 即表示每分钟都会触发事件。\n2. ?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用*，如果使用*表示不管星期几都会触发，实际上并不是这样。\n3. -：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次\n4. /：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5/20,则意味着从5分开始每20分钟触发一次\n5. ,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。\n6. L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。\n7. W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。\n8. LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。\n9. #:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。\n\n## 常用表达式例子\n\n1. 0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务\n2. 0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业\n3. 0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作\n4. 0 0 10,14,16 * * ?   每天上午10点，下午2点，4点\n5. 0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时\n6. 0 0 12 ? * WED    表示每个星期三中午12点\n7. 0 0 12 * * ?   每天中午12点触发\n8. 0 15 10 ? * *    每天上午10:15触发\n9. 0 15 10 * * ?     每天上午10:15触发\n10. 0 15 10 * * ? *    每天上午10:15触发\n11. 0 15 10 * * ? 2005    2005年的每天上午10:15触发\n12. 0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发\n13. 0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发\n14. 0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发\n15. 0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发\n16. 0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发\n17. 0 15 10 ? * MON-FRI    周一至周五的上午10:15触发\n18. 0 15 10 15 * ?    每月15日上午10:15触发\n19. 0 15 10 L * ?    每月最后一日的上午10:15触发\n20. 0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发\n21. 0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发\n22. 0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发\n\n## 最后\n\n有些子表达式能包含一些范围或列表\n\n例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”\n\n“*”字符代表所有可能的值\n\n因此，“*”在子表达式（月）里表示每个月的含义，“*”在子表达式（天（星期））表示星期的每一天\n\n“/”字符用来指定数值的增量 \n例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟 \n在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样\n\n“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值 \n当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”\n\n“L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写 \n但是它在两个子表达式里的含义是不同的。 \n在天（月）子表达式中，“L”表示一个月的最后一天 \n在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT\n\n如果在“L”前有具体的内容，它就具有其他的含义了\n\n例如：“6L”表示这个月的倒数第６天，“FRIL”表示这个月的最一个星期五 \n注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题\n","source":"_posts/cron.md","raw":"---\ntitle: cron表达式\ndate: 2019-07-17 18:08:11\ntags: cron\n---\n\ncron表达式常用于调度任务\n\n本文摘自:[cron表达式详解](https://www.cnblogs.com/javahr/p/8318728.html)\n\n## 结构\n\ncorn从左到右（用空格隔开）：秒 分 小时 日期 月份 星期 [年份]\n\n## 各字段的含义\n\n字段|允许值|允许的特殊字符\n:-------:|:---------------------:|:------------------:\n秒（Seconds）|0~59的整数|, - * /    四个字符\n分（Minutes）|0~59的整数|, - * /    四个字符\n小时（Hours）|0~23的整数|, - * /    四个字符\n日期（DayofMonth）|1~31的整数（但是你需要考虑你月的天数）|,- * ? / L W C     八个字符\n月份（Month）|1~12的整数或者 JAN-DEC|, - * /    四个字符\n星期（DayofWeek）|1~7的整数或者 SUN-SAT （1=SUN）|, - * ? / L C #     八个字符\n年(可选，留空)（Year）|1970~2099|, - * /    四个字符\n\n## 注意事项\n\n每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是:\n\n1. *：表示匹配该域的任意值。假如在Minutes域使用*, 即表示每分钟都会触发事件。\n2. ?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用*，如果使用*表示不管星期几都会触发，实际上并不是这样。\n3. -：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次\n4. /：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5/20,则意味着从5分开始每20分钟触发一次\n5. ,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。\n6. L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。\n7. W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。\n8. LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。\n9. #:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。\n\n## 常用表达式例子\n\n1. 0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务\n2. 0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业\n3. 0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作\n4. 0 0 10,14,16 * * ?   每天上午10点，下午2点，4点\n5. 0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时\n6. 0 0 12 ? * WED    表示每个星期三中午12点\n7. 0 0 12 * * ?   每天中午12点触发\n8. 0 15 10 ? * *    每天上午10:15触发\n9. 0 15 10 * * ?     每天上午10:15触发\n10. 0 15 10 * * ? *    每天上午10:15触发\n11. 0 15 10 * * ? 2005    2005年的每天上午10:15触发\n12. 0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发\n13. 0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发\n14. 0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发\n15. 0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发\n16. 0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发\n17. 0 15 10 ? * MON-FRI    周一至周五的上午10:15触发\n18. 0 15 10 15 * ?    每月15日上午10:15触发\n19. 0 15 10 L * ?    每月最后一日的上午10:15触发\n20. 0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发\n21. 0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发\n22. 0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发\n\n## 最后\n\n有些子表达式能包含一些范围或列表\n\n例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”\n\n“*”字符代表所有可能的值\n\n因此，“*”在子表达式（月）里表示每个月的含义，“*”在子表达式（天（星期））表示星期的每一天\n\n“/”字符用来指定数值的增量 \n例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟 \n在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样\n\n“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值 \n当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”\n\n“L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写 \n但是它在两个子表达式里的含义是不同的。 \n在天（月）子表达式中，“L”表示一个月的最后一天 \n在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT\n\n如果在“L”前有具体的内容，它就具有其他的含义了\n\n例如：“6L”表示这个月的倒数第６天，“FRIL”表示这个月的最一个星期五 \n注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题\n","slug":"cron","published":1,"updated":"2021-11-04T15:54:07.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihp0006ahte5odf3y0r","content":"<p>cron表达式常用于调度任务</p>\n<p>本文摘自:<a href=\"https://www.cnblogs.com/javahr/p/8318728.html\">cron表达式详解</a></p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p>corn从左到右（用空格隔开）：秒 分 小时 日期 月份 星期 [年份]</p>\n<h2 id=\"各字段的含义\"><a href=\"#各字段的含义\" class=\"headerlink\" title=\"各字段的含义\"></a>各字段的含义</h2><table>\n<thead>\n<tr>\n<th align=\"center\">字段</th>\n<th align=\"center\">允许值</th>\n<th align=\"center\">允许的特殊字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">秒（Seconds）</td>\n<td align=\"center\">0~59的整数</td>\n<td align=\"center\">, - * /    四个字符</td>\n</tr>\n<tr>\n<td align=\"center\">分（Minutes）</td>\n<td align=\"center\">0~59的整数</td>\n<td align=\"center\">, - * /    四个字符</td>\n</tr>\n<tr>\n<td align=\"center\">小时（Hours）</td>\n<td align=\"center\">0~23的整数</td>\n<td align=\"center\">, - * /    四个字符</td>\n</tr>\n<tr>\n<td align=\"center\">日期（DayofMonth）</td>\n<td align=\"center\">1~31的整数（但是你需要考虑你月的天数）</td>\n<td align=\"center\">,- * ? / L W C     八个字符</td>\n</tr>\n<tr>\n<td align=\"center\">月份（Month）</td>\n<td align=\"center\">1~12的整数或者 JAN-DEC</td>\n<td align=\"center\">, - * /    四个字符</td>\n</tr>\n<tr>\n<td align=\"center\">星期（DayofWeek）</td>\n<td align=\"center\">1~7的整数或者 SUN-SAT （1=SUN）</td>\n<td align=\"center\">, - * ? / L C #     八个字符</td>\n</tr>\n<tr>\n<td align=\"center\">年(可选，留空)（Year）</td>\n<td align=\"center\">1970~2099</td>\n<td align=\"center\">, - * /    四个字符</td>\n</tr>\n</tbody></table>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是:</p>\n<ol>\n<li><em>：表示匹配该域的任意值。假如在Minutes域使用</em>, 即表示每分钟都会触发事件。</li>\n<li>?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用<em>，如果使用</em>表示不管星期几都会触发，实际上并不是这样。</li>\n<li>-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次</li>\n<li>/：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5/20,则意味着从5分开始每20分钟触发一次</li>\n<li>,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。</li>\n<li>L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。</li>\n<li>W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</li>\n<li>LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</li>\n<li>#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</li>\n</ol>\n<h2 id=\"常用表达式例子\"><a href=\"#常用表达式例子\" class=\"headerlink\" title=\"常用表达式例子\"></a>常用表达式例子</h2><ol>\n<li>0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务</li>\n<li>0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</li>\n<li>0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</li>\n<li>0 0 10,14,16 * * ?   每天上午10点，下午2点，4点</li>\n<li>0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时</li>\n<li>0 0 12 ? * WED    表示每个星期三中午12点</li>\n<li>0 0 12 * * ?   每天中午12点触发</li>\n<li>0 15 10 ? * *    每天上午10:15触发</li>\n<li>0 15 10 * * ?     每天上午10:15触发</li>\n<li>0 15 10 * * ? *    每天上午10:15触发</li>\n<li>0 15 10 * * ? 2005    2005年的每天上午10:15触发</li>\n<li>0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发</li>\n<li>0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发</li>\n<li>0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</li>\n<li>0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发</li>\n<li>0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发</li>\n<li>0 15 10 ? * MON-FRI    周一至周五的上午10:15触发</li>\n<li>0 15 10 15 * ?    每月15日上午10:15触发</li>\n<li>0 15 10 L * ?    每月最后一日的上午10:15触发</li>\n<li>0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发</li>\n<li>0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</li>\n<li>0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>有些子表达式能包含一些范围或列表</p>\n<p>例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”</p>\n<p>“*”字符代表所有可能的值</p>\n<p>因此，“<em>”在子表达式（月）里表示每个月的含义，“</em>”在子表达式（天（星期））表示星期的每一天</p>\n<p>“/”字符用来指定数值的增量<br>例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟<br>在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样</p>\n<p>“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值<br>当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”</p>\n<p>“L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写<br>但是它在两个子表达式里的含义是不同的。<br>在天（月）子表达式中，“L”表示一个月的最后一天<br>在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT</p>\n<p>如果在“L”前有具体的内容，它就具有其他的含义了</p>\n<p>例如：“6L”表示这个月的倒数第６天，“FRIL”表示这个月的最一个星期五<br>注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题</p>\n","site":{"data":{}},"excerpt":"","more":"<p>cron表达式常用于调度任务</p>\n<p>本文摘自:<a href=\"https://www.cnblogs.com/javahr/p/8318728.html\">cron表达式详解</a></p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p>corn从左到右（用空格隔开）：秒 分 小时 日期 月份 星期 [年份]</p>\n<h2 id=\"各字段的含义\"><a href=\"#各字段的含义\" class=\"headerlink\" title=\"各字段的含义\"></a>各字段的含义</h2><table>\n<thead>\n<tr>\n<th align=\"center\">字段</th>\n<th align=\"center\">允许值</th>\n<th align=\"center\">允许的特殊字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">秒（Seconds）</td>\n<td align=\"center\">0~59的整数</td>\n<td align=\"center\">, - * /    四个字符</td>\n</tr>\n<tr>\n<td align=\"center\">分（Minutes）</td>\n<td align=\"center\">0~59的整数</td>\n<td align=\"center\">, - * /    四个字符</td>\n</tr>\n<tr>\n<td align=\"center\">小时（Hours）</td>\n<td align=\"center\">0~23的整数</td>\n<td align=\"center\">, - * /    四个字符</td>\n</tr>\n<tr>\n<td align=\"center\">日期（DayofMonth）</td>\n<td align=\"center\">1~31的整数（但是你需要考虑你月的天数）</td>\n<td align=\"center\">,- * ? / L W C     八个字符</td>\n</tr>\n<tr>\n<td align=\"center\">月份（Month）</td>\n<td align=\"center\">1~12的整数或者 JAN-DEC</td>\n<td align=\"center\">, - * /    四个字符</td>\n</tr>\n<tr>\n<td align=\"center\">星期（DayofWeek）</td>\n<td align=\"center\">1~7的整数或者 SUN-SAT （1=SUN）</td>\n<td align=\"center\">, - * ? / L C #     八个字符</td>\n</tr>\n<tr>\n<td align=\"center\">年(可选，留空)（Year）</td>\n<td align=\"center\">1970~2099</td>\n<td align=\"center\">, - * /    四个字符</td>\n</tr>\n</tbody></table>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是:</p>\n<ol>\n<li><em>：表示匹配该域的任意值。假如在Minutes域使用</em>, 即表示每分钟都会触发事件。</li>\n<li>?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用<em>，如果使用</em>表示不管星期几都会触发，实际上并不是这样。</li>\n<li>-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次</li>\n<li>/：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5/20,则意味着从5分开始每20分钟触发一次</li>\n<li>,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。</li>\n<li>L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。</li>\n<li>W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</li>\n<li>LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</li>\n<li>#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</li>\n</ol>\n<h2 id=\"常用表达式例子\"><a href=\"#常用表达式例子\" class=\"headerlink\" title=\"常用表达式例子\"></a>常用表达式例子</h2><ol>\n<li>0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务</li>\n<li>0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</li>\n<li>0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</li>\n<li>0 0 10,14,16 * * ?   每天上午10点，下午2点，4点</li>\n<li>0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时</li>\n<li>0 0 12 ? * WED    表示每个星期三中午12点</li>\n<li>0 0 12 * * ?   每天中午12点触发</li>\n<li>0 15 10 ? * *    每天上午10:15触发</li>\n<li>0 15 10 * * ?     每天上午10:15触发</li>\n<li>0 15 10 * * ? *    每天上午10:15触发</li>\n<li>0 15 10 * * ? 2005    2005年的每天上午10:15触发</li>\n<li>0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发</li>\n<li>0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发</li>\n<li>0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</li>\n<li>0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发</li>\n<li>0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发</li>\n<li>0 15 10 ? * MON-FRI    周一至周五的上午10:15触发</li>\n<li>0 15 10 15 * ?    每月15日上午10:15触发</li>\n<li>0 15 10 L * ?    每月最后一日的上午10:15触发</li>\n<li>0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发</li>\n<li>0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</li>\n<li>0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>有些子表达式能包含一些范围或列表</p>\n<p>例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”</p>\n<p>“*”字符代表所有可能的值</p>\n<p>因此，“<em>”在子表达式（月）里表示每个月的含义，“</em>”在子表达式（天（星期））表示星期的每一天</p>\n<p>“/”字符用来指定数值的增量<br>例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟<br>在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样</p>\n<p>“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值<br>当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”</p>\n<p>“L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写<br>但是它在两个子表达式里的含义是不同的。<br>在天（月）子表达式中，“L”表示一个月的最后一天<br>在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT</p>\n<p>如果在“L”前有具体的内容，它就具有其他的含义了</p>\n<p>例如：“6L”表示这个月的倒数第６天，“FRIL”表示这个月的最一个星期五<br>注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题</p>\n"},{"title":"Docker学习笔记","date":"2019-05-16T03:29:14.000Z","_content":"\n我是一个java程序猿, 当前已经转为nodejs开发, 因为工作需要接触docker到目前为止已经有一年多的时间了, 一下是我学习和使用docker的一些总结.\n\n## 前言\n\n### 认识docker\n\nDocker是一个容器平台, 可以说他是一个虚拟机平台, 但是它又比虚拟机强大. Docker是开发人员和系统管理员使用容器开发，部署和运行应用程序的平台。\n使用Linux容器部署应用程序称为容器化。容器不是新的，但它们用于轻松部署应用程序。\n\n### docker能解决什么问题\n\n1. 生产开发环境不一致的问题\n\n### 基本概念\n\n1. 容器\n2. 镜像\n3. 仓库\n\n## 安装\n\n[参考这里](https://docs.docker.com/install/)\n\n```bash\n# 查看docker版本\ndocker --version\n\n# 查看docker信息\ndocker info\n\n# 测试docker是否安装成功\ndocker run hello-world\n\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\nca4f61b1923c: Pull complete\nDigest: sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n...\n```\n\n## 入门\n\n前提条件: 安装好Docker\n\n### 容器\n\n#### 创建Dockerfile文件\n\n在项目根目录下创建一个Dockerfile文件, 如:\n\n```Dockerfile\n# 将官方 node:9.3.0-alpine 运行时用作父镜像\nFROM node:9.3.0-alpine\n\nRUN mkdir -p /app\n# 将工作目录设置为 /app\nWORKDIR /app\n\n# 将当前目录内容复制到位于 /app 中的容器中\nCOPY . /app/temp\n\nRUN cp /app/temp/package.json /app/package.json &&\\\n    npm install --registry=https://registry.npm.taobao.org &&\\\n    cp -r /app/temp/pages /app/pages &&\\\n    cp -r /app/temp/components /app/components &&\\\n    cp -r /app/temp/next.config.js /app/next.config.js &&\\\n    rm -rf /app/temp\n\n# 在容器启动时运行\nCMD [\"npm\", \"start\"]\n```\n\n有关Dockerfile的命令可以参考这里[编写Dockerfile的最佳实践](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)\n\n#### 构建镜像\n\n命令:\n\n`docker build -t <image-name> .`;\n\n> -t image-name 是给镜像添加名称  \n> . 代表当前根目录  \n> 可选参数 -f Dockerfile-name 指定Dockerfile文件, 默认是 Dockerfile, 当我们有如: MYSQL.Dockerfile 则可以使用该参数指定 例: `docker build -t imagename . -f MySQL.Dockerfile`\n\n#### 运行容器\n\n命令:\n\n`docker run -d -p 3000:3000 --name <容器名称> <镜像hashid/镜像名称>`\n\n1. -d 参数指定容器在后台运行\n2. -p 指定容器端口映射, 主机端口:容器端口, 容器端口指容器内部服务对外暴露的端口,如果tomcat对外提供服务的端口为8080\n3. --name 参数设置容器名称\n4. 最后接对应的镜像 hashid 或者 镜像名称:tag\n\n其他常用参数:\n\n1. --network 指定容器运行的网络环境\n2. -v 配置容器数据卷, 更多信息参考 高级篇[容器数据]\n3. --rm 该命令常常与 -v 一起使用, 在删除/停止容器的时候同事清除数据卷映射关系\n4. --link 链接到其他容器, 新版本推荐使用 --network 指定容器网络环境即可\n\n容器镜像操作:\n\n```bash\ndocker ps; #查看当前运行的容器\ndocker ps -a; # 查看所有的容器\ndocker logs <镜像hashid/镜像名称> # 查看指定容器的日记\ndocker start <容器hashid/容器名称> # 启动容器\ndocker stop <容器hashid/容器名称> # 停止容器\ndocker stop -f <镜像hashid/镜像名称> # 停止容器, 同时删除容器\ndocker rm <容器hashid/容器名称>... # 删除容器, 可以同时指定多个 <容器hashid/容器名称>\ndocker rmi <镜像hashid/镜像名称> # 删除镜像, 必须注意的是, 先删除容器才能删除镜像\n```\n\n推送镜像到仓库\n\n1. 登陆docker仓库 `docker login ...`\n2. 给镜像打标签 `docker tag [本地镜像名称]:[版本号] [存储库名称]:[版本号]`\n3. 推送到镜像仓库 `docker push [账号名]/[存储库名称]:[版本号]`\n4. 尝试拉取镜像 `docker pull [账号名]/[存储库名称]:[版本号]`\n\n案例\n\n```sh\n# 登陆dockerhub\ndocker login\n\n# 构建镜像\ndocker build -t arm64v8/myblog:latest .\n\n# 将本地镜像打标签\ndocker tag arm64v8/myblog:latest jiangzwyz/myblog:latest\n\n# 推送到镜像仓库\ndocker push jiangzwyz/myblog:latest\n```\n\n### 服务Swarms\n\n待补充\n\n## 高级篇\n\n### 容器数据\n\n深入了解docker的都会知道docker的方便,但是也会明白docker的缺点,就是容器在被销毁时,其内部的数据将会全部丢失,那么这里我们就将解决这个问题\n\n最常见的案例就是数据库了, 这里我们以配置 mysql容器为例, 示范如何使用**数据卷**将容器的数据保存到主机上.\n\nDockerfile文件:\n\n```Dockerfile\n# 拉取 mysql:5.7 官方镜像\nFROM mysql:5.7\n\n# 设置时区 Shanghai\nRUN cp /usr/share/zoneinfo/PRC /etc/localtime\n\n# ENV 设置 镜像环境变量 mysql 镜像参考官方说明,可以在此配置账户密码\nENV MYSQL_ROOT_PASSWORD=you_password\nENV MYSQL_USER=you_name\nENV MYSQL_PASSWORD=you_passowrd\n\n# 这里我使用了自定义mysql的配置文件\nCOPY ./mysql/mysql.cnf /etc/mysql/conf.d/mysql.cnf\nCOPY ./mysql/mysqld.cnf /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n\n**重点**在这里\n\n```bash\ndocker build -t mysql . -f MYSQL.Dockerfile;\ndocker run -d -p 3306:3306 --rm -v /mysql/db:/var/lib/mysql --name mysql mysql;\n```\n\n从当前项目中构建mysql镜像, 然后运行容器时指定主机/mysql/db目录挂载到容器/var/lib/mysql目录(此目录是mysql数据库文件所在)\n\n数据类的容器,官方都会说明其数据文件存放的位置, 当然我们也可以挂载网盘到容器中.\n\n![ ](./01.png)\n\n### 容器网络\n\n#### 使用容器,你就不应该再去管理烦人的IP\n\n我们载部署项目的时候经常会遇到这个问题, 我们的项目需要连接mysql, 一般我们通过ip去连接*(localhost:3306、127.0.0.1:3306), 这样到还简单,如果我们的mysql IP是动态的, 怎么办? 你改的几次就会抓狂的. 所以我们需要使用到 容器网络  network\n\n#### 在Docker中建立 自定义 桥网络\n\n1. 连接到默认bridge网络的容器可以通过IP地址相互通信。Docker不支持默认网桥上的自动服务发现。如果希望容器能够按容器名称解析IP地址，则应使用用户定义的网络。您可以使用旧版docker run --link选项将两个容器链接在一起，但在大多数情况下不建议这样做。\n2. 使用自定义 bridge网络 运行在其中的容器可以发现对方\n3. 要实现 容器间通讯，采用 自定义 桥网络 （容器必须在同一主机中）\n4. network  桥网络，容器运行再 用户自定义桥网络 中，容器间可以通过 局域网访问（**不适用于分布式主机**），默认桥网络不支持这样\n\n```bash\n# 查看当前主机中网络列表\n$ docker network ls\n\n# 创建 桥网络\n$ docker network create --driver bridge [network-name]\n\n# 将容器运行在对应的 bridge网络 中，使用 --network=[network-name]\n$ docker run -d -p 80:80 -p 443:443 --network=[network-name] --name mynginx [container-images-id]\n$ docker run -d -p 80:80 -p 443:443 --rm -v ~/../workspace/myimages/images:/app/images &&\\\n  --network=[network-name] & --name=1.2.3.4 [container-images-id]\n```\n\n在同一个 network 网络中的两个容器之间通信可以直接使用 容器名称:端口 的方式去访问,\n如: mysql:3306\n\n### k8s\n\n容器编排\n\n## 其他\n\n### 设置容器时区\n\n时区问题一直都是我们需要解决的问题, 容器同样避免不了这个问题.\n\n在linux中, 我们可以将本地时间文件拷贝到/etc/localtime即可设置容器时间\n\nlinux的时区设置文件在 /usr/share/zoneinfo/Asia\n\n我们将设置系统时间为 上海 例:\n\n```bash\n# 在Dockerfile中添加:\n\n# linux版本: node:9.3.0-alpine\nRUN apk add --no-cache tzdata && \\\n    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo \"Asia/Shanghai\" > /etc/timezone && \\\n    apk del tzdata\n\n# 镜像 mysql:5.7\nRUN cp /usr/share/zoneinfo/PRC /etc/localtime\n```\n\n> 上海时区/usr/share/zoneinfo/Asia/Shanghai实际上是链接到/usr/share/zoneinfo/PRC时区, 所以在第二个中我们的做法也是可取的.\n\n## 结语\n\n官方文档是最好的学习资料\n","source":"_posts/docker.md","raw":"---\ntitle: Docker学习笔记\ndate: 2019-05-16 11:29:14\ntags: 容器\n---\n\n我是一个java程序猿, 当前已经转为nodejs开发, 因为工作需要接触docker到目前为止已经有一年多的时间了, 一下是我学习和使用docker的一些总结.\n\n## 前言\n\n### 认识docker\n\nDocker是一个容器平台, 可以说他是一个虚拟机平台, 但是它又比虚拟机强大. Docker是开发人员和系统管理员使用容器开发，部署和运行应用程序的平台。\n使用Linux容器部署应用程序称为容器化。容器不是新的，但它们用于轻松部署应用程序。\n\n### docker能解决什么问题\n\n1. 生产开发环境不一致的问题\n\n### 基本概念\n\n1. 容器\n2. 镜像\n3. 仓库\n\n## 安装\n\n[参考这里](https://docs.docker.com/install/)\n\n```bash\n# 查看docker版本\ndocker --version\n\n# 查看docker信息\ndocker info\n\n# 测试docker是否安装成功\ndocker run hello-world\n\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\nca4f61b1923c: Pull complete\nDigest: sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n...\n```\n\n## 入门\n\n前提条件: 安装好Docker\n\n### 容器\n\n#### 创建Dockerfile文件\n\n在项目根目录下创建一个Dockerfile文件, 如:\n\n```Dockerfile\n# 将官方 node:9.3.0-alpine 运行时用作父镜像\nFROM node:9.3.0-alpine\n\nRUN mkdir -p /app\n# 将工作目录设置为 /app\nWORKDIR /app\n\n# 将当前目录内容复制到位于 /app 中的容器中\nCOPY . /app/temp\n\nRUN cp /app/temp/package.json /app/package.json &&\\\n    npm install --registry=https://registry.npm.taobao.org &&\\\n    cp -r /app/temp/pages /app/pages &&\\\n    cp -r /app/temp/components /app/components &&\\\n    cp -r /app/temp/next.config.js /app/next.config.js &&\\\n    rm -rf /app/temp\n\n# 在容器启动时运行\nCMD [\"npm\", \"start\"]\n```\n\n有关Dockerfile的命令可以参考这里[编写Dockerfile的最佳实践](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)\n\n#### 构建镜像\n\n命令:\n\n`docker build -t <image-name> .`;\n\n> -t image-name 是给镜像添加名称  \n> . 代表当前根目录  \n> 可选参数 -f Dockerfile-name 指定Dockerfile文件, 默认是 Dockerfile, 当我们有如: MYSQL.Dockerfile 则可以使用该参数指定 例: `docker build -t imagename . -f MySQL.Dockerfile`\n\n#### 运行容器\n\n命令:\n\n`docker run -d -p 3000:3000 --name <容器名称> <镜像hashid/镜像名称>`\n\n1. -d 参数指定容器在后台运行\n2. -p 指定容器端口映射, 主机端口:容器端口, 容器端口指容器内部服务对外暴露的端口,如果tomcat对外提供服务的端口为8080\n3. --name 参数设置容器名称\n4. 最后接对应的镜像 hashid 或者 镜像名称:tag\n\n其他常用参数:\n\n1. --network 指定容器运行的网络环境\n2. -v 配置容器数据卷, 更多信息参考 高级篇[容器数据]\n3. --rm 该命令常常与 -v 一起使用, 在删除/停止容器的时候同事清除数据卷映射关系\n4. --link 链接到其他容器, 新版本推荐使用 --network 指定容器网络环境即可\n\n容器镜像操作:\n\n```bash\ndocker ps; #查看当前运行的容器\ndocker ps -a; # 查看所有的容器\ndocker logs <镜像hashid/镜像名称> # 查看指定容器的日记\ndocker start <容器hashid/容器名称> # 启动容器\ndocker stop <容器hashid/容器名称> # 停止容器\ndocker stop -f <镜像hashid/镜像名称> # 停止容器, 同时删除容器\ndocker rm <容器hashid/容器名称>... # 删除容器, 可以同时指定多个 <容器hashid/容器名称>\ndocker rmi <镜像hashid/镜像名称> # 删除镜像, 必须注意的是, 先删除容器才能删除镜像\n```\n\n推送镜像到仓库\n\n1. 登陆docker仓库 `docker login ...`\n2. 给镜像打标签 `docker tag [本地镜像名称]:[版本号] [存储库名称]:[版本号]`\n3. 推送到镜像仓库 `docker push [账号名]/[存储库名称]:[版本号]`\n4. 尝试拉取镜像 `docker pull [账号名]/[存储库名称]:[版本号]`\n\n案例\n\n```sh\n# 登陆dockerhub\ndocker login\n\n# 构建镜像\ndocker build -t arm64v8/myblog:latest .\n\n# 将本地镜像打标签\ndocker tag arm64v8/myblog:latest jiangzwyz/myblog:latest\n\n# 推送到镜像仓库\ndocker push jiangzwyz/myblog:latest\n```\n\n### 服务Swarms\n\n待补充\n\n## 高级篇\n\n### 容器数据\n\n深入了解docker的都会知道docker的方便,但是也会明白docker的缺点,就是容器在被销毁时,其内部的数据将会全部丢失,那么这里我们就将解决这个问题\n\n最常见的案例就是数据库了, 这里我们以配置 mysql容器为例, 示范如何使用**数据卷**将容器的数据保存到主机上.\n\nDockerfile文件:\n\n```Dockerfile\n# 拉取 mysql:5.7 官方镜像\nFROM mysql:5.7\n\n# 设置时区 Shanghai\nRUN cp /usr/share/zoneinfo/PRC /etc/localtime\n\n# ENV 设置 镜像环境变量 mysql 镜像参考官方说明,可以在此配置账户密码\nENV MYSQL_ROOT_PASSWORD=you_password\nENV MYSQL_USER=you_name\nENV MYSQL_PASSWORD=you_passowrd\n\n# 这里我使用了自定义mysql的配置文件\nCOPY ./mysql/mysql.cnf /etc/mysql/conf.d/mysql.cnf\nCOPY ./mysql/mysqld.cnf /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n\n**重点**在这里\n\n```bash\ndocker build -t mysql . -f MYSQL.Dockerfile;\ndocker run -d -p 3306:3306 --rm -v /mysql/db:/var/lib/mysql --name mysql mysql;\n```\n\n从当前项目中构建mysql镜像, 然后运行容器时指定主机/mysql/db目录挂载到容器/var/lib/mysql目录(此目录是mysql数据库文件所在)\n\n数据类的容器,官方都会说明其数据文件存放的位置, 当然我们也可以挂载网盘到容器中.\n\n![ ](./01.png)\n\n### 容器网络\n\n#### 使用容器,你就不应该再去管理烦人的IP\n\n我们载部署项目的时候经常会遇到这个问题, 我们的项目需要连接mysql, 一般我们通过ip去连接*(localhost:3306、127.0.0.1:3306), 这样到还简单,如果我们的mysql IP是动态的, 怎么办? 你改的几次就会抓狂的. 所以我们需要使用到 容器网络  network\n\n#### 在Docker中建立 自定义 桥网络\n\n1. 连接到默认bridge网络的容器可以通过IP地址相互通信。Docker不支持默认网桥上的自动服务发现。如果希望容器能够按容器名称解析IP地址，则应使用用户定义的网络。您可以使用旧版docker run --link选项将两个容器链接在一起，但在大多数情况下不建议这样做。\n2. 使用自定义 bridge网络 运行在其中的容器可以发现对方\n3. 要实现 容器间通讯，采用 自定义 桥网络 （容器必须在同一主机中）\n4. network  桥网络，容器运行再 用户自定义桥网络 中，容器间可以通过 局域网访问（**不适用于分布式主机**），默认桥网络不支持这样\n\n```bash\n# 查看当前主机中网络列表\n$ docker network ls\n\n# 创建 桥网络\n$ docker network create --driver bridge [network-name]\n\n# 将容器运行在对应的 bridge网络 中，使用 --network=[network-name]\n$ docker run -d -p 80:80 -p 443:443 --network=[network-name] --name mynginx [container-images-id]\n$ docker run -d -p 80:80 -p 443:443 --rm -v ~/../workspace/myimages/images:/app/images &&\\\n  --network=[network-name] & --name=1.2.3.4 [container-images-id]\n```\n\n在同一个 network 网络中的两个容器之间通信可以直接使用 容器名称:端口 的方式去访问,\n如: mysql:3306\n\n### k8s\n\n容器编排\n\n## 其他\n\n### 设置容器时区\n\n时区问题一直都是我们需要解决的问题, 容器同样避免不了这个问题.\n\n在linux中, 我们可以将本地时间文件拷贝到/etc/localtime即可设置容器时间\n\nlinux的时区设置文件在 /usr/share/zoneinfo/Asia\n\n我们将设置系统时间为 上海 例:\n\n```bash\n# 在Dockerfile中添加:\n\n# linux版本: node:9.3.0-alpine\nRUN apk add --no-cache tzdata && \\\n    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo \"Asia/Shanghai\" > /etc/timezone && \\\n    apk del tzdata\n\n# 镜像 mysql:5.7\nRUN cp /usr/share/zoneinfo/PRC /etc/localtime\n```\n\n> 上海时区/usr/share/zoneinfo/Asia/Shanghai实际上是链接到/usr/share/zoneinfo/PRC时区, 所以在第二个中我们的做法也是可取的.\n\n## 结语\n\n官方文档是最好的学习资料\n","slug":"docker","published":1,"updated":"2021-11-04T15:54:07.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihq0008ahte4l2k9jel","content":"<p>我是一个java程序猿, 当前已经转为nodejs开发, 因为工作需要接触docker到目前为止已经有一年多的时间了, 一下是我学习和使用docker的一些总结.</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"认识docker\"><a href=\"#认识docker\" class=\"headerlink\" title=\"认识docker\"></a>认识docker</h3><p>Docker是一个容器平台, 可以说他是一个虚拟机平台, 但是它又比虚拟机强大. Docker是开发人员和系统管理员使用容器开发，部署和运行应用程序的平台。<br>使用Linux容器部署应用程序称为容器化。容器不是新的，但它们用于轻松部署应用程序。</p>\n<h3 id=\"docker能解决什么问题\"><a href=\"#docker能解决什么问题\" class=\"headerlink\" title=\"docker能解决什么问题\"></a>docker能解决什么问题</h3><ol>\n<li>生产开发环境不一致的问题</li>\n</ol>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ol>\n<li>容器</li>\n<li>镜像</li>\n<li>仓库</li>\n</ol>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://docs.docker.com/install/\">参考这里</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">docker --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看docker信息</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试docker是否安装成功</span></span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">Unable to find image <span class=\"string\">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">ca4f61b1923c: Pull complete</span><br><span class=\"line\">Digest: sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>前提条件: 安装好Docker</p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><h4 id=\"创建Dockerfile文件\"><a href=\"#创建Dockerfile文件\" class=\"headerlink\" title=\"创建Dockerfile文件\"></a>创建Dockerfile文件</h4><p>在项目根目录下创建一个Dockerfile文件, 如:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将官方 node:9.3.0-alpine 运行时用作父镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9.3</span>.<span class=\"number\">0</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir -p /app</span></span><br><span class=\"line\"><span class=\"comment\"># 将工作目录设置为 /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录内容复制到位于 /app 中的容器中</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/temp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> cp /app/temp/package.json /app/package.json &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    npm install --registry=https://registry.npm.taobao.org &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    cp -r /app/temp/pages /app/pages &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    cp -r /app/temp/components /app/components &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    cp -r /app/temp/next.config.js /app/next.config.js &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    rm -rf /app/temp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在容器启动时运行</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">&quot;npm&quot;</span>, <span class=\"string\">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>有关Dockerfile的命令可以参考这里<a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">编写Dockerfile的最佳实践</a></p>\n<h4 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h4><p>命令:</p>\n<p><code>docker build -t &lt;image-name&gt; .</code>;</p>\n<blockquote>\n<p>-t image-name 是给镜像添加名称<br>. 代表当前根目录<br>可选参数 -f Dockerfile-name 指定Dockerfile文件, 默认是 Dockerfile, 当我们有如: MYSQL.Dockerfile 则可以使用该参数指定 例: <code>docker build -t imagename . -f MySQL.Dockerfile</code></p>\n</blockquote>\n<h4 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h4><p>命令:</p>\n<p><code>docker run -d -p 3000:3000 --name &lt;容器名称&gt; &lt;镜像hashid/镜像名称&gt;</code></p>\n<ol>\n<li>-d 参数指定容器在后台运行</li>\n<li>-p 指定容器端口映射, 主机端口:容器端口, 容器端口指容器内部服务对外暴露的端口,如果tomcat对外提供服务的端口为8080</li>\n<li>–name 参数设置容器名称</li>\n<li>最后接对应的镜像 hashid 或者 镜像名称:tag</li>\n</ol>\n<p>其他常用参数:</p>\n<ol>\n<li>–network 指定容器运行的网络环境</li>\n<li>-v 配置容器数据卷, 更多信息参考 高级篇[容器数据]</li>\n<li>–rm 该命令常常与 -v 一起使用, 在删除/停止容器的时候同事清除数据卷映射关系</li>\n<li>–link 链接到其他容器, 新版本推荐使用 –network 指定容器网络环境即可</li>\n</ol>\n<p>容器镜像操作:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps; <span class=\"comment\">#查看当前运行的容器</span></span><br><span class=\"line\">docker ps -a; <span class=\"comment\"># 查看所有的容器</span></span><br><span class=\"line\">docker logs &lt;镜像hashid/镜像名称&gt; <span class=\"comment\"># 查看指定容器的日记</span></span><br><span class=\"line\">docker start &lt;容器hashid/容器名称&gt; <span class=\"comment\"># 启动容器</span></span><br><span class=\"line\">docker stop &lt;容器hashid/容器名称&gt; <span class=\"comment\"># 停止容器</span></span><br><span class=\"line\">docker stop -f &lt;镜像hashid/镜像名称&gt; <span class=\"comment\"># 停止容器, 同时删除容器</span></span><br><span class=\"line\">docker rm &lt;容器hashid/容器名称&gt;... <span class=\"comment\"># 删除容器, 可以同时指定多个 &lt;容器hashid/容器名称&gt;</span></span><br><span class=\"line\">docker rmi &lt;镜像hashid/镜像名称&gt; <span class=\"comment\"># 删除镜像, 必须注意的是, 先删除容器才能删除镜像</span></span><br></pre></td></tr></table></figure>\n\n<p>推送镜像到仓库</p>\n<ol>\n<li>登陆docker仓库 <code>docker login ...</code></li>\n<li>给镜像打标签 <code>docker tag [本地镜像名称]:[版本号] [存储库名称]:[版本号]</code></li>\n<li>推送到镜像仓库 <code>docker push [账号名]/[存储库名称]:[版本号]</code></li>\n<li>尝试拉取镜像 <code>docker pull [账号名]/[存储库名称]:[版本号]</code></li>\n</ol>\n<p>案例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登陆dockerhub</span></span><br><span class=\"line\">docker login</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建镜像</span></span><br><span class=\"line\">docker build -t arm64v8/myblog:latest .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将本地镜像打标签</span></span><br><span class=\"line\">docker tag arm64v8/myblog:latest jiangzwyz/myblog:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到镜像仓库</span></span><br><span class=\"line\">docker push jiangzwyz/myblog:latest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务Swarms\"><a href=\"#服务Swarms\" class=\"headerlink\" title=\"服务Swarms\"></a>服务Swarms</h3><p>待补充</p>\n<h2 id=\"高级篇\"><a href=\"#高级篇\" class=\"headerlink\" title=\"高级篇\"></a>高级篇</h2><h3 id=\"容器数据\"><a href=\"#容器数据\" class=\"headerlink\" title=\"容器数据\"></a>容器数据</h3><p>深入了解docker的都会知道docker的方便,但是也会明白docker的缺点,就是容器在被销毁时,其内部的数据将会全部丢失,那么这里我们就将解决这个问题</p>\n<p>最常见的案例就是数据库了, 这里我们以配置 mysql容器为例, 示范如何使用<strong>数据卷</strong>将容器的数据保存到主机上.</p>\n<p>Dockerfile文件:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取 mysql:5.7 官方镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mysql:<span class=\"number\">5.7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置时区 Shanghai</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> cp /usr/share/zoneinfo/PRC /etc/localtime</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ENV 设置 镜像环境变量 mysql 镜像参考官方说明,可以在此配置账户密码</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> MYSQL_ROOT_PASSWORD=you_password</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> MYSQL_USER=you_name</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> MYSQL_PASSWORD=you_passowrd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里我使用了自定义mysql的配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./mysql/mysql.cnf /etc/mysql/conf.d/mysql.cnf</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./mysql/mysqld.cnf /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>重点</strong>在这里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t mysql . -f MYSQL.Dockerfile;</span><br><span class=\"line\">docker run -d -p 3306:3306 --rm -v /mysql/db:/var/lib/mysql --name mysql mysql;</span><br></pre></td></tr></table></figure>\n\n<p>从当前项目中构建mysql镜像, 然后运行容器时指定主机/mysql/db目录挂载到容器/var/lib/mysql目录(此目录是mysql数据库文件所在)</p>\n<p>数据类的容器,官方都会说明其数据文件存放的位置, 当然我们也可以挂载网盘到容器中.</p>\n<p><img src=\"./01.png\" alt=\" \"></p>\n<h3 id=\"容器网络\"><a href=\"#容器网络\" class=\"headerlink\" title=\"容器网络\"></a>容器网络</h3><h4 id=\"使用容器-你就不应该再去管理烦人的IP\"><a href=\"#使用容器-你就不应该再去管理烦人的IP\" class=\"headerlink\" title=\"使用容器,你就不应该再去管理烦人的IP\"></a>使用容器,你就不应该再去管理烦人的IP</h4><p>我们载部署项目的时候经常会遇到这个问题, 我们的项目需要连接mysql, 一般我们通过ip去连接*(localhost:3306、127.0.0.1:3306), 这样到还简单,如果我们的mysql IP是动态的, 怎么办? 你改的几次就会抓狂的. 所以我们需要使用到 容器网络  network</p>\n<h4 id=\"在Docker中建立-自定义-桥网络\"><a href=\"#在Docker中建立-自定义-桥网络\" class=\"headerlink\" title=\"在Docker中建立 自定义 桥网络\"></a>在Docker中建立 自定义 桥网络</h4><ol>\n<li>连接到默认bridge网络的容器可以通过IP地址相互通信。Docker不支持默认网桥上的自动服务发现。如果希望容器能够按容器名称解析IP地址，则应使用用户定义的网络。您可以使用旧版docker run –link选项将两个容器链接在一起，但在大多数情况下不建议这样做。</li>\n<li>使用自定义 bridge网络 运行在其中的容器可以发现对方</li>\n<li>要实现 容器间通讯，采用 自定义 桥网络 （容器必须在同一主机中）</li>\n<li>network  桥网络，容器运行再 用户自定义桥网络 中，容器间可以通过 局域网访问（<strong>不适用于分布式主机</strong>），默认桥网络不支持这样</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前主机中网络列表</span></span><br><span class=\"line\">$ docker network ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 桥网络</span></span><br><span class=\"line\">$ docker network create --driver bridge [network-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将容器运行在对应的 bridge网络 中，使用 --network=[network-name]</span></span><br><span class=\"line\">$ docker run -d -p 80:80 -p 443:443 --network=[network-name] --name mynginx [container-images-id]</span><br><span class=\"line\">$ docker run -d -p 80:80 -p 443:443 --rm -v ~/../workspace/myimages/images:/app/images &amp;&amp;\\</span><br><span class=\"line\">  --network=[network-name] &amp; --name=1.2.3.4 [container-images-id]</span><br></pre></td></tr></table></figure>\n\n<p>在同一个 network 网络中的两个容器之间通信可以直接使用 容器名称:端口 的方式去访问,<br>如: mysql:3306</p>\n<h3 id=\"k8s\"><a href=\"#k8s\" class=\"headerlink\" title=\"k8s\"></a>k8s</h3><p>容器编排</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"设置容器时区\"><a href=\"#设置容器时区\" class=\"headerlink\" title=\"设置容器时区\"></a>设置容器时区</h3><p>时区问题一直都是我们需要解决的问题, 容器同样避免不了这个问题.</p>\n<p>在linux中, 我们可以将本地时间文件拷贝到/etc/localtime即可设置容器时间</p>\n<p>linux的时区设置文件在 /usr/share/zoneinfo/Asia</p>\n<p>我们将设置系统时间为 上海 例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在Dockerfile中添加:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># linux版本: node:9.3.0-alpine</span></span><br><span class=\"line\">RUN apk add --no-cache tzdata &amp;&amp; \\</span><br><span class=\"line\">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \\</span><br><span class=\"line\">    apk del tzdata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 镜像 mysql:5.7</span></span><br><span class=\"line\">RUN cp /usr/share/zoneinfo/PRC /etc/localtime</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上海时区/usr/share/zoneinfo/Asia/Shanghai实际上是链接到/usr/share/zoneinfo/PRC时区, 所以在第二个中我们的做法也是可取的.</p>\n</blockquote>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>官方文档是最好的学习资料</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我是一个java程序猿, 当前已经转为nodejs开发, 因为工作需要接触docker到目前为止已经有一年多的时间了, 一下是我学习和使用docker的一些总结.</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"认识docker\"><a href=\"#认识docker\" class=\"headerlink\" title=\"认识docker\"></a>认识docker</h3><p>Docker是一个容器平台, 可以说他是一个虚拟机平台, 但是它又比虚拟机强大. Docker是开发人员和系统管理员使用容器开发，部署和运行应用程序的平台。<br>使用Linux容器部署应用程序称为容器化。容器不是新的，但它们用于轻松部署应用程序。</p>\n<h3 id=\"docker能解决什么问题\"><a href=\"#docker能解决什么问题\" class=\"headerlink\" title=\"docker能解决什么问题\"></a>docker能解决什么问题</h3><ol>\n<li>生产开发环境不一致的问题</li>\n</ol>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ol>\n<li>容器</li>\n<li>镜像</li>\n<li>仓库</li>\n</ol>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://docs.docker.com/install/\">参考这里</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">docker --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看docker信息</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试docker是否安装成功</span></span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\"></span><br><span class=\"line\">Unable to find image <span class=\"string\">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">ca4f61b1923c: Pull complete</span><br><span class=\"line\">Digest: sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>前提条件: 安装好Docker</p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><h4 id=\"创建Dockerfile文件\"><a href=\"#创建Dockerfile文件\" class=\"headerlink\" title=\"创建Dockerfile文件\"></a>创建Dockerfile文件</h4><p>在项目根目录下创建一个Dockerfile文件, 如:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将官方 node:9.3.0-alpine 运行时用作父镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">9.3</span>.<span class=\"number\">0</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir -p /app</span></span><br><span class=\"line\"><span class=\"comment\"># 将工作目录设置为 /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录内容复制到位于 /app 中的容器中</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . /app/temp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> cp /app/temp/package.json /app/package.json &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    npm install --registry=https://registry.npm.taobao.org &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    cp -r /app/temp/pages /app/pages &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    cp -r /app/temp/components /app/components &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    cp -r /app/temp/next.config.js /app/next.config.js &amp;&amp;\\</span></span><br><span class=\"line\"><span class=\"bash\">    rm -rf /app/temp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在容器启动时运行</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">&quot;npm&quot;</span>, <span class=\"string\">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>有关Dockerfile的命令可以参考这里<a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">编写Dockerfile的最佳实践</a></p>\n<h4 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h4><p>命令:</p>\n<p><code>docker build -t &lt;image-name&gt; .</code>;</p>\n<blockquote>\n<p>-t image-name 是给镜像添加名称<br>. 代表当前根目录<br>可选参数 -f Dockerfile-name 指定Dockerfile文件, 默认是 Dockerfile, 当我们有如: MYSQL.Dockerfile 则可以使用该参数指定 例: <code>docker build -t imagename . -f MySQL.Dockerfile</code></p>\n</blockquote>\n<h4 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h4><p>命令:</p>\n<p><code>docker run -d -p 3000:3000 --name &lt;容器名称&gt; &lt;镜像hashid/镜像名称&gt;</code></p>\n<ol>\n<li>-d 参数指定容器在后台运行</li>\n<li>-p 指定容器端口映射, 主机端口:容器端口, 容器端口指容器内部服务对外暴露的端口,如果tomcat对外提供服务的端口为8080</li>\n<li>–name 参数设置容器名称</li>\n<li>最后接对应的镜像 hashid 或者 镜像名称:tag</li>\n</ol>\n<p>其他常用参数:</p>\n<ol>\n<li>–network 指定容器运行的网络环境</li>\n<li>-v 配置容器数据卷, 更多信息参考 高级篇[容器数据]</li>\n<li>–rm 该命令常常与 -v 一起使用, 在删除/停止容器的时候同事清除数据卷映射关系</li>\n<li>–link 链接到其他容器, 新版本推荐使用 –network 指定容器网络环境即可</li>\n</ol>\n<p>容器镜像操作:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps; <span class=\"comment\">#查看当前运行的容器</span></span><br><span class=\"line\">docker ps -a; <span class=\"comment\"># 查看所有的容器</span></span><br><span class=\"line\">docker logs &lt;镜像hashid/镜像名称&gt; <span class=\"comment\"># 查看指定容器的日记</span></span><br><span class=\"line\">docker start &lt;容器hashid/容器名称&gt; <span class=\"comment\"># 启动容器</span></span><br><span class=\"line\">docker stop &lt;容器hashid/容器名称&gt; <span class=\"comment\"># 停止容器</span></span><br><span class=\"line\">docker stop -f &lt;镜像hashid/镜像名称&gt; <span class=\"comment\"># 停止容器, 同时删除容器</span></span><br><span class=\"line\">docker rm &lt;容器hashid/容器名称&gt;... <span class=\"comment\"># 删除容器, 可以同时指定多个 &lt;容器hashid/容器名称&gt;</span></span><br><span class=\"line\">docker rmi &lt;镜像hashid/镜像名称&gt; <span class=\"comment\"># 删除镜像, 必须注意的是, 先删除容器才能删除镜像</span></span><br></pre></td></tr></table></figure>\n\n<p>推送镜像到仓库</p>\n<ol>\n<li>登陆docker仓库 <code>docker login ...</code></li>\n<li>给镜像打标签 <code>docker tag [本地镜像名称]:[版本号] [存储库名称]:[版本号]</code></li>\n<li>推送到镜像仓库 <code>docker push [账号名]/[存储库名称]:[版本号]</code></li>\n<li>尝试拉取镜像 <code>docker pull [账号名]/[存储库名称]:[版本号]</code></li>\n</ol>\n<p>案例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登陆dockerhub</span></span><br><span class=\"line\">docker login</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建镜像</span></span><br><span class=\"line\">docker build -t arm64v8/myblog:latest .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将本地镜像打标签</span></span><br><span class=\"line\">docker tag arm64v8/myblog:latest jiangzwyz/myblog:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到镜像仓库</span></span><br><span class=\"line\">docker push jiangzwyz/myblog:latest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务Swarms\"><a href=\"#服务Swarms\" class=\"headerlink\" title=\"服务Swarms\"></a>服务Swarms</h3><p>待补充</p>\n<h2 id=\"高级篇\"><a href=\"#高级篇\" class=\"headerlink\" title=\"高级篇\"></a>高级篇</h2><h3 id=\"容器数据\"><a href=\"#容器数据\" class=\"headerlink\" title=\"容器数据\"></a>容器数据</h3><p>深入了解docker的都会知道docker的方便,但是也会明白docker的缺点,就是容器在被销毁时,其内部的数据将会全部丢失,那么这里我们就将解决这个问题</p>\n<p>最常见的案例就是数据库了, 这里我们以配置 mysql容器为例, 示范如何使用<strong>数据卷</strong>将容器的数据保存到主机上.</p>\n<p>Dockerfile文件:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取 mysql:5.7 官方镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mysql:<span class=\"number\">5.7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置时区 Shanghai</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> cp /usr/share/zoneinfo/PRC /etc/localtime</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ENV 设置 镜像环境变量 mysql 镜像参考官方说明,可以在此配置账户密码</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> MYSQL_ROOT_PASSWORD=you_password</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> MYSQL_USER=you_name</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> MYSQL_PASSWORD=you_passowrd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里我使用了自定义mysql的配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./mysql/mysql.cnf /etc/mysql/conf.d/mysql.cnf</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./mysql/mysqld.cnf /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>重点</strong>在这里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t mysql . -f MYSQL.Dockerfile;</span><br><span class=\"line\">docker run -d -p 3306:3306 --rm -v /mysql/db:/var/lib/mysql --name mysql mysql;</span><br></pre></td></tr></table></figure>\n\n<p>从当前项目中构建mysql镜像, 然后运行容器时指定主机/mysql/db目录挂载到容器/var/lib/mysql目录(此目录是mysql数据库文件所在)</p>\n<p>数据类的容器,官方都会说明其数据文件存放的位置, 当然我们也可以挂载网盘到容器中.</p>\n<p><img src=\"./01.png\" alt=\" \"></p>\n<h3 id=\"容器网络\"><a href=\"#容器网络\" class=\"headerlink\" title=\"容器网络\"></a>容器网络</h3><h4 id=\"使用容器-你就不应该再去管理烦人的IP\"><a href=\"#使用容器-你就不应该再去管理烦人的IP\" class=\"headerlink\" title=\"使用容器,你就不应该再去管理烦人的IP\"></a>使用容器,你就不应该再去管理烦人的IP</h4><p>我们载部署项目的时候经常会遇到这个问题, 我们的项目需要连接mysql, 一般我们通过ip去连接*(localhost:3306、127.0.0.1:3306), 这样到还简单,如果我们的mysql IP是动态的, 怎么办? 你改的几次就会抓狂的. 所以我们需要使用到 容器网络  network</p>\n<h4 id=\"在Docker中建立-自定义-桥网络\"><a href=\"#在Docker中建立-自定义-桥网络\" class=\"headerlink\" title=\"在Docker中建立 自定义 桥网络\"></a>在Docker中建立 自定义 桥网络</h4><ol>\n<li>连接到默认bridge网络的容器可以通过IP地址相互通信。Docker不支持默认网桥上的自动服务发现。如果希望容器能够按容器名称解析IP地址，则应使用用户定义的网络。您可以使用旧版docker run –link选项将两个容器链接在一起，但在大多数情况下不建议这样做。</li>\n<li>使用自定义 bridge网络 运行在其中的容器可以发现对方</li>\n<li>要实现 容器间通讯，采用 自定义 桥网络 （容器必须在同一主机中）</li>\n<li>network  桥网络，容器运行再 用户自定义桥网络 中，容器间可以通过 局域网访问（<strong>不适用于分布式主机</strong>），默认桥网络不支持这样</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前主机中网络列表</span></span><br><span class=\"line\">$ docker network ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 桥网络</span></span><br><span class=\"line\">$ docker network create --driver bridge [network-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将容器运行在对应的 bridge网络 中，使用 --network=[network-name]</span></span><br><span class=\"line\">$ docker run -d -p 80:80 -p 443:443 --network=[network-name] --name mynginx [container-images-id]</span><br><span class=\"line\">$ docker run -d -p 80:80 -p 443:443 --rm -v ~/../workspace/myimages/images:/app/images &amp;&amp;\\</span><br><span class=\"line\">  --network=[network-name] &amp; --name=1.2.3.4 [container-images-id]</span><br></pre></td></tr></table></figure>\n\n<p>在同一个 network 网络中的两个容器之间通信可以直接使用 容器名称:端口 的方式去访问,<br>如: mysql:3306</p>\n<h3 id=\"k8s\"><a href=\"#k8s\" class=\"headerlink\" title=\"k8s\"></a>k8s</h3><p>容器编排</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"设置容器时区\"><a href=\"#设置容器时区\" class=\"headerlink\" title=\"设置容器时区\"></a>设置容器时区</h3><p>时区问题一直都是我们需要解决的问题, 容器同样避免不了这个问题.</p>\n<p>在linux中, 我们可以将本地时间文件拷贝到/etc/localtime即可设置容器时间</p>\n<p>linux的时区设置文件在 /usr/share/zoneinfo/Asia</p>\n<p>我们将设置系统时间为 上海 例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在Dockerfile中添加:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># linux版本: node:9.3.0-alpine</span></span><br><span class=\"line\">RUN apk add --no-cache tzdata &amp;&amp; \\</span><br><span class=\"line\">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \\</span><br><span class=\"line\">    apk del tzdata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 镜像 mysql:5.7</span></span><br><span class=\"line\">RUN cp /usr/share/zoneinfo/PRC /etc/localtime</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上海时区/usr/share/zoneinfo/Asia/Shanghai实际上是链接到/usr/share/zoneinfo/PRC时区, 所以在第二个中我们的做法也是可取的.</p>\n</blockquote>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>官方文档是最好的学习资料</p>\n"},{"title":"electron 学习笔记","date":"2020-06-02T07:49:49.000Z","_content":"\n`Electron` 是一个用 `HTML，CSS` 和 `JavaScript` 来构建跨平台桌面应用程序的一个开源库\n\n原理为 `Electron` 通过将 `Chromium` 和 `Node.js` 合并到同一个运行时环境中，并将其打包为 **Mac**，**Windows** 和 **Linux** 系统下的应用来实现这一目的。\n\n[官网](https://www.electronjs.org/)\n\n## 环境搭建\n\n确保 `node` 和 `npm` 已经安装好了,\n\n验证:\n\n```sh\n# 可以看到node的版本信息\nnode -v\n# 可以看到npm的版本信息\nnpm -v\n```\n\n从开发的角度来看, Electron application 本质上是一个 Node. js 应用程序。 与 Node.js 模块相同，应用的入口是 package.json 文件\n\n1. 使用 `npm` 创建一个 `nodejs` 项目\n\n```sh\n# 创建一个项目文件夹\nmkdir myapp\n\n# 进去\ncd ./myapp\n\n# npm初始化项目\nnpm init\n```\n\n## 最后\n","source":"_posts/electron.md","raw":"---\ntitle: electron 学习笔记\ndate: 2020-06-02 15:49:49\ntags: electron\n---\n\n`Electron` 是一个用 `HTML，CSS` 和 `JavaScript` 来构建跨平台桌面应用程序的一个开源库\n\n原理为 `Electron` 通过将 `Chromium` 和 `Node.js` 合并到同一个运行时环境中，并将其打包为 **Mac**，**Windows** 和 **Linux** 系统下的应用来实现这一目的。\n\n[官网](https://www.electronjs.org/)\n\n## 环境搭建\n\n确保 `node` 和 `npm` 已经安装好了,\n\n验证:\n\n```sh\n# 可以看到node的版本信息\nnode -v\n# 可以看到npm的版本信息\nnpm -v\n```\n\n从开发的角度来看, Electron application 本质上是一个 Node. js 应用程序。 与 Node.js 模块相同，应用的入口是 package.json 文件\n\n1. 使用 `npm` 创建一个 `nodejs` 项目\n\n```sh\n# 创建一个项目文件夹\nmkdir myapp\n\n# 进去\ncd ./myapp\n\n# npm初始化项目\nnpm init\n```\n\n## 最后\n","slug":"electron","published":1,"updated":"2021-11-04T15:54:07.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihr000aahte2ccn7gnf","content":"<p><code>Electron</code> 是一个用 <code>HTML，CSS</code> 和 <code>JavaScript</code> 来构建跨平台桌面应用程序的一个开源库</p>\n<p>原理为 <code>Electron</code> 通过将 <code>Chromium</code> 和 <code>Node.js</code> 合并到同一个运行时环境中，并将其打包为 <strong>Mac</strong>，<strong>Windows</strong> 和 <strong>Linux</strong> 系统下的应用来实现这一目的。</p>\n<p><a href=\"https://www.electronjs.org/\">官网</a></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>确保 <code>node</code> 和 <code>npm</code> 已经安装好了,</p>\n<p>验证:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以看到node的版本信息</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\"><span class=\"comment\"># 可以看到npm的版本信息</span></span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<p>从开发的角度来看, Electron application 本质上是一个 Node. js 应用程序。 与 Node.js 模块相同，应用的入口是 package.json 文件</p>\n<ol>\n<li>使用 <code>npm</code> 创建一个 <code>nodejs</code> 项目</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个项目文件夹</span></span><br><span class=\"line\">mkdir myapp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进去</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ./myapp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npm初始化项目</span></span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2>","site":{"data":{}},"excerpt":"","more":"<p><code>Electron</code> 是一个用 <code>HTML，CSS</code> 和 <code>JavaScript</code> 来构建跨平台桌面应用程序的一个开源库</p>\n<p>原理为 <code>Electron</code> 通过将 <code>Chromium</code> 和 <code>Node.js</code> 合并到同一个运行时环境中，并将其打包为 <strong>Mac</strong>，<strong>Windows</strong> 和 <strong>Linux</strong> 系统下的应用来实现这一目的。</p>\n<p><a href=\"https://www.electronjs.org/\">官网</a></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>确保 <code>node</code> 和 <code>npm</code> 已经安装好了,</p>\n<p>验证:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以看到node的版本信息</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\"><span class=\"comment\"># 可以看到npm的版本信息</span></span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<p>从开发的角度来看, Electron application 本质上是一个 Node. js 应用程序。 与 Node.js 模块相同，应用的入口是 package.json 文件</p>\n<ol>\n<li>使用 <code>npm</code> 创建一个 <code>nodejs</code> 项目</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个项目文件夹</span></span><br><span class=\"line\">mkdir myapp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进去</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ./myapp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npm初始化项目</span></span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2>"},{"title":"了解一下Flutter","date":"2020-08-06T02:21:56.000Z","_content":"\n[Flutter实战](https://book.flutterchina.club/ )\n\nFlutter 是 <span style=\"color:red;\">Google</span>推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart语言开发 App，一套代码同时运行在 iOS 和 Android平台。 Flutter提供了丰富的组件、接口，开发者可以很快地为 Flutter添加 native扩展。同时 Flutter还使用 Native引擎渲染视图，这无疑能为用户提供良好的体验。\n\n## 特征\n\n* Flutter使用自己的高性能渲染引擎来绘制**widget**\n* 目前Flutter默认支持iOS、Android、Fuchsia（Google新的自研操作系统）三个移动平台。但Flutter亦可支持Web开发（Flutter for web）和PC开发，本书的示例和介绍主要是基于iOS和Android平台的，其它平台读者可以自行了解。\n* Flutter APP采用Dart语言开发 Dart在 JIT（即时编译）模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了\n\n## Flutter框架结构\n\n![Flutter框架图](./1-1.png \"Flutter框架图\")\n\n### Flutter Framework\n\n这是一个纯 Dart实现的 SDK，它实现了一套基础库，自底向上，我们来简单介绍一下：\n\n* 底下两层（Foundation和Animation、Painting、Gestures）在Google的一些视频中被合并为一个dart UI层，对应的是Flutter中的dart:ui包，它是Flutter引擎暴露的底层UI库，提供动画、手势及绘制能力。\n* Rendering层，这一层是一个抽象的布局层，它依赖于dart UI层，Rendering层会构建一个UI树，当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终将UI树绘制到屏幕上，这个过程类似于React中的虚拟DOM。Rendering层可以说是Flutter UI框架最核心的部分，它除了确定每个UI元素的位置、大小之外还要进行坐标变换、绘制(调用底层dart:ui)。\n* Widgets层是Flutter提供的的一套基础组件库，在基础组件库之上，Flutter还提供了 Material 和Cupertino两种视觉风格的组件库。而我们Flutter开发的大多数场景，只是和这两层打交道。\n\n### Flutter Engine\n\n这是一个纯 C++实现的 SDK，其中包括了 Skia引擎、Dart运行时、文字排版引擎等。在代码调用 dart:ui库时，调用最终会走到Engine层，然后实现真正的绘制逻辑。\n","source":"_posts/flutter.md","raw":"---\ntitle: 了解一下Flutter\ndate: 2020-08-06 10:21:56\ntags: Flutter\n---\n\n[Flutter实战](https://book.flutterchina.club/ )\n\nFlutter 是 <span style=\"color:red;\">Google</span>推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart语言开发 App，一套代码同时运行在 iOS 和 Android平台。 Flutter提供了丰富的组件、接口，开发者可以很快地为 Flutter添加 native扩展。同时 Flutter还使用 Native引擎渲染视图，这无疑能为用户提供良好的体验。\n\n## 特征\n\n* Flutter使用自己的高性能渲染引擎来绘制**widget**\n* 目前Flutter默认支持iOS、Android、Fuchsia（Google新的自研操作系统）三个移动平台。但Flutter亦可支持Web开发（Flutter for web）和PC开发，本书的示例和介绍主要是基于iOS和Android平台的，其它平台读者可以自行了解。\n* Flutter APP采用Dart语言开发 Dart在 JIT（即时编译）模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了\n\n## Flutter框架结构\n\n![Flutter框架图](./1-1.png \"Flutter框架图\")\n\n### Flutter Framework\n\n这是一个纯 Dart实现的 SDK，它实现了一套基础库，自底向上，我们来简单介绍一下：\n\n* 底下两层（Foundation和Animation、Painting、Gestures）在Google的一些视频中被合并为一个dart UI层，对应的是Flutter中的dart:ui包，它是Flutter引擎暴露的底层UI库，提供动画、手势及绘制能力。\n* Rendering层，这一层是一个抽象的布局层，它依赖于dart UI层，Rendering层会构建一个UI树，当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终将UI树绘制到屏幕上，这个过程类似于React中的虚拟DOM。Rendering层可以说是Flutter UI框架最核心的部分，它除了确定每个UI元素的位置、大小之外还要进行坐标变换、绘制(调用底层dart:ui)。\n* Widgets层是Flutter提供的的一套基础组件库，在基础组件库之上，Flutter还提供了 Material 和Cupertino两种视觉风格的组件库。而我们Flutter开发的大多数场景，只是和这两层打交道。\n\n### Flutter Engine\n\n这是一个纯 C++实现的 SDK，其中包括了 Skia引擎、Dart运行时、文字排版引擎等。在代码调用 dart:ui库时，调用最终会走到Engine层，然后实现真正的绘制逻辑。\n","slug":"flutter","published":1,"updated":"2021-11-04T15:54:07.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihs000eahte2cz5gcot","content":"<p><a href=\"https://book.flutterchina.club/\">Flutter实战</a></p>\n<p>Flutter 是 <span style=\"color:red;\">Google</span>推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart语言开发 App，一套代码同时运行在 iOS 和 Android平台。 Flutter提供了丰富的组件、接口，开发者可以很快地为 Flutter添加 native扩展。同时 Flutter还使用 Native引擎渲染视图，这无疑能为用户提供良好的体验。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><ul>\n<li>Flutter使用自己的高性能渲染引擎来绘制<strong>widget</strong></li>\n<li>目前Flutter默认支持iOS、Android、Fuchsia（Google新的自研操作系统）三个移动平台。但Flutter亦可支持Web开发（Flutter for web）和PC开发，本书的示例和介绍主要是基于iOS和Android平台的，其它平台读者可以自行了解。</li>\n<li>Flutter APP采用Dart语言开发 Dart在 JIT（即时编译）模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了</li>\n</ul>\n<h2 id=\"Flutter框架结构\"><a href=\"#Flutter框架结构\" class=\"headerlink\" title=\"Flutter框架结构\"></a>Flutter框架结构</h2><p><img src=\"./1-1.png\" alt=\"Flutter框架图\" title=\"Flutter框架图\"></p>\n<h3 id=\"Flutter-Framework\"><a href=\"#Flutter-Framework\" class=\"headerlink\" title=\"Flutter Framework\"></a>Flutter Framework</h3><p>这是一个纯 Dart实现的 SDK，它实现了一套基础库，自底向上，我们来简单介绍一下：</p>\n<ul>\n<li>底下两层（Foundation和Animation、Painting、Gestures）在Google的一些视频中被合并为一个dart UI层，对应的是Flutter中的dart:ui包，它是Flutter引擎暴露的底层UI库，提供动画、手势及绘制能力。</li>\n<li>Rendering层，这一层是一个抽象的布局层，它依赖于dart UI层，Rendering层会构建一个UI树，当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终将UI树绘制到屏幕上，这个过程类似于React中的虚拟DOM。Rendering层可以说是Flutter UI框架最核心的部分，它除了确定每个UI元素的位置、大小之外还要进行坐标变换、绘制(调用底层dart:ui)。</li>\n<li>Widgets层是Flutter提供的的一套基础组件库，在基础组件库之上，Flutter还提供了 Material 和Cupertino两种视觉风格的组件库。而我们Flutter开发的大多数场景，只是和这两层打交道。</li>\n</ul>\n<h3 id=\"Flutter-Engine\"><a href=\"#Flutter-Engine\" class=\"headerlink\" title=\"Flutter Engine\"></a>Flutter Engine</h3><p>这是一个纯 C++实现的 SDK，其中包括了 Skia引擎、Dart运行时、文字排版引擎等。在代码调用 dart:ui库时，调用最终会走到Engine层，然后实现真正的绘制逻辑。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://book.flutterchina.club/\">Flutter实战</a></p>\n<p>Flutter 是 <span style=\"color:red;\">Google</span>推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart语言开发 App，一套代码同时运行在 iOS 和 Android平台。 Flutter提供了丰富的组件、接口，开发者可以很快地为 Flutter添加 native扩展。同时 Flutter还使用 Native引擎渲染视图，这无疑能为用户提供良好的体验。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><ul>\n<li>Flutter使用自己的高性能渲染引擎来绘制<strong>widget</strong></li>\n<li>目前Flutter默认支持iOS、Android、Fuchsia（Google新的自研操作系统）三个移动平台。但Flutter亦可支持Web开发（Flutter for web）和PC开发，本书的示例和介绍主要是基于iOS和Android平台的，其它平台读者可以自行了解。</li>\n<li>Flutter APP采用Dart语言开发 Dart在 JIT（即时编译）模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了</li>\n</ul>\n<h2 id=\"Flutter框架结构\"><a href=\"#Flutter框架结构\" class=\"headerlink\" title=\"Flutter框架结构\"></a>Flutter框架结构</h2><p><img src=\"./1-1.png\" alt=\"Flutter框架图\" title=\"Flutter框架图\"></p>\n<h3 id=\"Flutter-Framework\"><a href=\"#Flutter-Framework\" class=\"headerlink\" title=\"Flutter Framework\"></a>Flutter Framework</h3><p>这是一个纯 Dart实现的 SDK，它实现了一套基础库，自底向上，我们来简单介绍一下：</p>\n<ul>\n<li>底下两层（Foundation和Animation、Painting、Gestures）在Google的一些视频中被合并为一个dart UI层，对应的是Flutter中的dart:ui包，它是Flutter引擎暴露的底层UI库，提供动画、手势及绘制能力。</li>\n<li>Rendering层，这一层是一个抽象的布局层，它依赖于dart UI层，Rendering层会构建一个UI树，当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终将UI树绘制到屏幕上，这个过程类似于React中的虚拟DOM。Rendering层可以说是Flutter UI框架最核心的部分，它除了确定每个UI元素的位置、大小之外还要进行坐标变换、绘制(调用底层dart:ui)。</li>\n<li>Widgets层是Flutter提供的的一套基础组件库，在基础组件库之上，Flutter还提供了 Material 和Cupertino两种视觉风格的组件库。而我们Flutter开发的大多数场景，只是和这两层打交道。</li>\n</ul>\n<h3 id=\"Flutter-Engine\"><a href=\"#Flutter-Engine\" class=\"headerlink\" title=\"Flutter Engine\"></a>Flutter Engine</h3><p>这是一个纯 C++实现的 SDK，其中包括了 Skia引擎、Dart运行时、文字排版引擎等。在代码调用 dart:ui库时，调用最终会走到Engine层，然后实现真正的绘制逻辑。</p>\n"},{"title":"GraphQL 学习","date":"2019-10-22T08:52:00.000Z","_content":"\nGraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。\n\n[官网文档](https://www.apollographql.com/docs/apollo-server)\n\n## 入门\n\n这里使用 nodejs 来创建demo, 使用到的npm包如下:\n\n1. fastify\n2. apollo-server-fastify\n\n### 定义GraphQL 模型\n\n```typescript\nimport { gql } from 'apollo-server-core';\n\nconst typeDefs = gql`\n    # 自定义 类型\n    scalar Date\n\n    # 自定义一个模型\n    type Book {\n        title: String\n        author: String\n        sex: String\n    }\n    ...\n\n    # 定义输入模型\n    input BookForm {\n        title: String!\n        author: String!\n        sex: String!\n    }\n\n    # Query 定义查询的方法\n    type Query {\n        # 查询所以 books 的方法\n        getBooks: [Book]\n    }\n\n    # Mutation 定义更新的方法\n    type Mutation {\n        addBook(book: BookForm): Boolean\n    }\n`\n```\n\n1. 自定义类型用 `scalar` 标注\n2. 自定义模型用 `type` 标注\n3. 输入模型用 `input` 标注 (与模型的唯一区别是 关键字不同)\n\n> Query 和 Mutation 是GraphQL内的两个特殊模型, 我们在这里定义 *查询* 和 *更新* 及返回类型, typeDefs中只能各存在一个.\n\n### 定义GraphQL的 resolver\n\n```typescript\n    const resolvers = {\n        Query: {\n            // Query中实现typeDefs中定义的查询\n            getBooks: (obj: any, args: any, context: any, info: any) => {\n                return [];\n            }\n        },\n        Mutation: {\n            // Mutation中实现typeDefs中定义的更新\n            addBook: (obj: any, args: any, context: any, info: any) => {\n                console.log('----> params', args['book'])\n                return true;\n            }\n        },\n        // 实现typeDefs中自定义的模型\n        Book: {\n            // 针对 单个属性定义\n            sex: (book:any, args: any, context: any, info: any) => {\n                return book.sex === 1 ? '男' : '女';\n            }\n        }\n        // ... 多个自定义模型\n    }\n```\n\n> 注意: resolver 中 Query和Mutation 只能有一个\n\n### 开始使用\n\n```typescript\nimport { ApolloServer } from 'apollo-server-fastify';\nimport * as fastify from 'fastify';\n\nconst gqlserver =  new ApolloServer({\n    typeDefs,\n    resolvers\n})\n\nfast.register(gqlserver.createHandler());\n\nfast.listen(3000, '0.0.0.0', async (err, address) => {\n    if (err) {\n        fast.log.error(err, address);\n    } else {\n        console.info(`service start success > ${address}`);\n    }\n})\n```\n\n## 参考链接\n\n[](http://www.zhaiqianfeng.com/2017/06/learn-graphql-first-demo.html)\n\n[](http://www.zhaiqianfeng.com/2017/06/learn-graphql-type-system.html)\n\n[](http://www.zhaiqianfeng.com/2017/06/learn-graphql-action-by-javascript.html)\n","source":"_posts/graphql.md","raw":"---\ntitle: GraphQL 学习\ndate: 2019-10-22 16:52:00\ntags: API\n---\n\nGraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。\n\n[官网文档](https://www.apollographql.com/docs/apollo-server)\n\n## 入门\n\n这里使用 nodejs 来创建demo, 使用到的npm包如下:\n\n1. fastify\n2. apollo-server-fastify\n\n### 定义GraphQL 模型\n\n```typescript\nimport { gql } from 'apollo-server-core';\n\nconst typeDefs = gql`\n    # 自定义 类型\n    scalar Date\n\n    # 自定义一个模型\n    type Book {\n        title: String\n        author: String\n        sex: String\n    }\n    ...\n\n    # 定义输入模型\n    input BookForm {\n        title: String!\n        author: String!\n        sex: String!\n    }\n\n    # Query 定义查询的方法\n    type Query {\n        # 查询所以 books 的方法\n        getBooks: [Book]\n    }\n\n    # Mutation 定义更新的方法\n    type Mutation {\n        addBook(book: BookForm): Boolean\n    }\n`\n```\n\n1. 自定义类型用 `scalar` 标注\n2. 自定义模型用 `type` 标注\n3. 输入模型用 `input` 标注 (与模型的唯一区别是 关键字不同)\n\n> Query 和 Mutation 是GraphQL内的两个特殊模型, 我们在这里定义 *查询* 和 *更新* 及返回类型, typeDefs中只能各存在一个.\n\n### 定义GraphQL的 resolver\n\n```typescript\n    const resolvers = {\n        Query: {\n            // Query中实现typeDefs中定义的查询\n            getBooks: (obj: any, args: any, context: any, info: any) => {\n                return [];\n            }\n        },\n        Mutation: {\n            // Mutation中实现typeDefs中定义的更新\n            addBook: (obj: any, args: any, context: any, info: any) => {\n                console.log('----> params', args['book'])\n                return true;\n            }\n        },\n        // 实现typeDefs中自定义的模型\n        Book: {\n            // 针对 单个属性定义\n            sex: (book:any, args: any, context: any, info: any) => {\n                return book.sex === 1 ? '男' : '女';\n            }\n        }\n        // ... 多个自定义模型\n    }\n```\n\n> 注意: resolver 中 Query和Mutation 只能有一个\n\n### 开始使用\n\n```typescript\nimport { ApolloServer } from 'apollo-server-fastify';\nimport * as fastify from 'fastify';\n\nconst gqlserver =  new ApolloServer({\n    typeDefs,\n    resolvers\n})\n\nfast.register(gqlserver.createHandler());\n\nfast.listen(3000, '0.0.0.0', async (err, address) => {\n    if (err) {\n        fast.log.error(err, address);\n    } else {\n        console.info(`service start success > ${address}`);\n    }\n})\n```\n\n## 参考链接\n\n[](http://www.zhaiqianfeng.com/2017/06/learn-graphql-first-demo.html)\n\n[](http://www.zhaiqianfeng.com/2017/06/learn-graphql-type-system.html)\n\n[](http://www.zhaiqianfeng.com/2017/06/learn-graphql-action-by-javascript.html)\n","slug":"graphql","published":1,"updated":"2021-11-04T15:54:07.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22iht000gahtefco4e6ey","content":"<p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p>\n<p><a href=\"https://www.apollographql.com/docs/apollo-server\">官网文档</a></p>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>这里使用 nodejs 来创建demo, 使用到的npm包如下:</p>\n<ol>\n<li>fastify</li>\n<li>apollo-server-fastify</li>\n</ol>\n<h3 id=\"定义GraphQL-模型\"><a href=\"#定义GraphQL-模型\" class=\"headerlink\" title=\"定义GraphQL 模型\"></a>定义GraphQL 模型</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; gql &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;apollo-server-core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeDefs = gql<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    # 自定义 类型</span></span><br><span class=\"line\"><span class=\"string\">    scalar Date</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # 自定义一个模型</span></span><br><span class=\"line\"><span class=\"string\">    type Book &#123;</span></span><br><span class=\"line\"><span class=\"string\">        title: String</span></span><br><span class=\"line\"><span class=\"string\">        author: String</span></span><br><span class=\"line\"><span class=\"string\">        sex: String</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # 定义输入模型</span></span><br><span class=\"line\"><span class=\"string\">    input BookForm &#123;</span></span><br><span class=\"line\"><span class=\"string\">        title: String!</span></span><br><span class=\"line\"><span class=\"string\">        author: String!</span></span><br><span class=\"line\"><span class=\"string\">        sex: String!</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # Query 定义查询的方法</span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">        # 查询所以 books 的方法</span></span><br><span class=\"line\"><span class=\"string\">        getBooks: [Book]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # Mutation 定义更新的方法</span></span><br><span class=\"line\"><span class=\"string\">    type Mutation &#123;</span></span><br><span class=\"line\"><span class=\"string\">        addBook(book: BookForm): Boolean</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>自定义类型用 <code>scalar</code> 标注</li>\n<li>自定义模型用 <code>type</code> 标注</li>\n<li>输入模型用 <code>input</code> 标注 (与模型的唯一区别是 关键字不同)</li>\n</ol>\n<blockquote>\n<p>Query 和 Mutation 是GraphQL内的两个特殊模型, 我们在这里定义 <em>查询</em> 和 <em>更新</em> 及返回类型, typeDefs中只能各存在一个.</p>\n</blockquote>\n<h3 id=\"定义GraphQL的-resolver\"><a href=\"#定义GraphQL的-resolver\" class=\"headerlink\" title=\"定义GraphQL的 resolver\"></a>定义GraphQL的 resolver</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resolvers = &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Query中实现typeDefs中定义的查询</span></span><br><span class=\"line\">        getBooks: <span class=\"function\">(<span class=\"params\">obj: <span class=\"built_in\">any</span>, args: <span class=\"built_in\">any</span>, context: <span class=\"built_in\">any</span>, info: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Mutation中实现typeDefs中定义的更新</span></span><br><span class=\"line\">        addBook: <span class=\"function\">(<span class=\"params\">obj: <span class=\"built_in\">any</span>, args: <span class=\"built_in\">any</span>, context: <span class=\"built_in\">any</span>, info: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;----&gt; params&#x27;</span>, args[<span class=\"string\">&#x27;book&#x27;</span>])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 实现typeDefs中自定义的模型</span></span><br><span class=\"line\">    Book: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 针对 单个属性定义</span></span><br><span class=\"line\">        sex: <span class=\"function\">(<span class=\"params\">book:<span class=\"built_in\">any</span>, args: <span class=\"built_in\">any</span>, context: <span class=\"built_in\">any</span>, info: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> book.sex === <span class=\"number\">1</span> ? <span class=\"string\">&#x27;男&#x27;</span> : <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... 多个自定义模型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意: resolver 中 Query和Mutation 只能有一个</p>\n</blockquote>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApolloServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;apollo-server-fastify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fastify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fastify&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> gqlserver =  <span class=\"keyword\">new</span> ApolloServer(&#123;</span><br><span class=\"line\">    typeDefs,</span><br><span class=\"line\">    resolvers</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fast.register(gqlserver.createHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">fast.listen(<span class=\"number\">3000</span>, <span class=\"string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"keyword\">async</span> (err, address) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        fast.log.error(err, address);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">`service start success &gt; <span class=\"subst\">$&#123;address&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://www.zhaiqianfeng.com/2017/06/learn-graphql-first-demo.html\"></a></p>\n<p><a href=\"http://www.zhaiqianfeng.com/2017/06/learn-graphql-type-system.html\"></a></p>\n<p><a href=\"http://www.zhaiqianfeng.com/2017/06/learn-graphql-action-by-javascript.html\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p>\n<p><a href=\"https://www.apollographql.com/docs/apollo-server\">官网文档</a></p>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>这里使用 nodejs 来创建demo, 使用到的npm包如下:</p>\n<ol>\n<li>fastify</li>\n<li>apollo-server-fastify</li>\n</ol>\n<h3 id=\"定义GraphQL-模型\"><a href=\"#定义GraphQL-模型\" class=\"headerlink\" title=\"定义GraphQL 模型\"></a>定义GraphQL 模型</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; gql &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;apollo-server-core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeDefs = gql<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    # 自定义 类型</span></span><br><span class=\"line\"><span class=\"string\">    scalar Date</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # 自定义一个模型</span></span><br><span class=\"line\"><span class=\"string\">    type Book &#123;</span></span><br><span class=\"line\"><span class=\"string\">        title: String</span></span><br><span class=\"line\"><span class=\"string\">        author: String</span></span><br><span class=\"line\"><span class=\"string\">        sex: String</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # 定义输入模型</span></span><br><span class=\"line\"><span class=\"string\">    input BookForm &#123;</span></span><br><span class=\"line\"><span class=\"string\">        title: String!</span></span><br><span class=\"line\"><span class=\"string\">        author: String!</span></span><br><span class=\"line\"><span class=\"string\">        sex: String!</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # Query 定义查询的方法</span></span><br><span class=\"line\"><span class=\"string\">    type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">        # 查询所以 books 的方法</span></span><br><span class=\"line\"><span class=\"string\">        getBooks: [Book]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # Mutation 定义更新的方法</span></span><br><span class=\"line\"><span class=\"string\">    type Mutation &#123;</span></span><br><span class=\"line\"><span class=\"string\">        addBook(book: BookForm): Boolean</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>自定义类型用 <code>scalar</code> 标注</li>\n<li>自定义模型用 <code>type</code> 标注</li>\n<li>输入模型用 <code>input</code> 标注 (与模型的唯一区别是 关键字不同)</li>\n</ol>\n<blockquote>\n<p>Query 和 Mutation 是GraphQL内的两个特殊模型, 我们在这里定义 <em>查询</em> 和 <em>更新</em> 及返回类型, typeDefs中只能各存在一个.</p>\n</blockquote>\n<h3 id=\"定义GraphQL的-resolver\"><a href=\"#定义GraphQL的-resolver\" class=\"headerlink\" title=\"定义GraphQL的 resolver\"></a>定义GraphQL的 resolver</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resolvers = &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Query中实现typeDefs中定义的查询</span></span><br><span class=\"line\">        getBooks: <span class=\"function\">(<span class=\"params\">obj: <span class=\"built_in\">any</span>, args: <span class=\"built_in\">any</span>, context: <span class=\"built_in\">any</span>, info: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Mutation: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Mutation中实现typeDefs中定义的更新</span></span><br><span class=\"line\">        addBook: <span class=\"function\">(<span class=\"params\">obj: <span class=\"built_in\">any</span>, args: <span class=\"built_in\">any</span>, context: <span class=\"built_in\">any</span>, info: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;----&gt; params&#x27;</span>, args[<span class=\"string\">&#x27;book&#x27;</span>])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 实现typeDefs中自定义的模型</span></span><br><span class=\"line\">    Book: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 针对 单个属性定义</span></span><br><span class=\"line\">        sex: <span class=\"function\">(<span class=\"params\">book:<span class=\"built_in\">any</span>, args: <span class=\"built_in\">any</span>, context: <span class=\"built_in\">any</span>, info: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> book.sex === <span class=\"number\">1</span> ? <span class=\"string\">&#x27;男&#x27;</span> : <span class=\"string\">&#x27;女&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... 多个自定义模型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意: resolver 中 Query和Mutation 只能有一个</p>\n</blockquote>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApolloServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;apollo-server-fastify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fastify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fastify&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> gqlserver =  <span class=\"keyword\">new</span> ApolloServer(&#123;</span><br><span class=\"line\">    typeDefs,</span><br><span class=\"line\">    resolvers</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fast.register(gqlserver.createHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">fast.listen(<span class=\"number\">3000</span>, <span class=\"string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"keyword\">async</span> (err, address) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        fast.log.error(err, address);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">`service start success &gt; <span class=\"subst\">$&#123;address&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://www.zhaiqianfeng.com/2017/06/learn-graphql-first-demo.html\"></a></p>\n<p><a href=\"http://www.zhaiqianfeng.com/2017/06/learn-graphql-type-system.html\"></a></p>\n<p><a href=\"http://www.zhaiqianfeng.com/2017/06/learn-graphql-action-by-javascript.html\"></a></p>\n"},{"title":"黑苹果折腾记","date":"2020-08-26T03:10:11.000Z","_content":"\n## 准备工作\n\n我们在开始前需要知道这几个网站, 因为所有资源都来自其中\n\n[黑果小兵的部落阁](https://blog.daliansky.net/)\n\n[远景论坛](http://bbs.pcbeta.com/)\n\n[使用OpenCore引导黑苹果](https://blog.xjn819.com/?p=543)\n\n## 我的电脑配置\n\n类目|型号\n:------|:---------------------------------------------------------------------\n处理器|Intel i7-10700\n主板|Gigabyte B460M AORUS PRO M-ATX\n显卡|蓝宝石 RX5600XT 6G\n内存|十铨（Team）DDR4 3200 16GB（8GB×2）火神系列\n硬盘|金士顿(Kingston) 1TB SSD固态硬盘 M.2接口(NVMe协议) A2000系列\n无线|博通BCM943602CS\n散热|玄冰400双刃\n电源|Tt 600W Toughpower GX1 RGB (80PLUS金牌/日系主电容/静音风扇)\n机箱|Tt 启航者S3+黑色\n显示器|优派4K 23.6英寸IPS VX2478-4K\n\n## 制作MacOS系统安装盘(U盘)\n\n系统镜像采用[微信首发】macOS Catalina 10.15.6 19G2021 正式版 Clover 5120/OC/PE三分区支持Intel及AMD双平台原版镜像](https://blog.daliansky.net/WeChat-First-macOS-Catalina-10.15.6-19G73-official-version-Clover-5119-OC-WEPE-supports-both-INTEL-and-AMD-original-images.html)\n\n### 下载镜像\n\n请前往[黑果小兵的部落阁](https://blog.daliansky.net/)或者关注`黑果小兵的部落阁`微信公众号下载镜像\n\n> 可选: 校验MD5值 `4a32cf1d5c37809dfb87f33eda5d50ed`\n\n### 制作镜像\n\n下载[etcher](https://etcher.io) -> 打开镜像 -> 选择U盘 -> 点击Flash即可.\n\n> Windows10需要管理员权限\n> 制作镜像需要一点时间, 请耐心等待\n\n## 安装前的准备\n\n### BOIS基本设置\n\n实际上使用技嘉主板,只需要开启`VT-X`、禁用`VT-D`即可\n\n禁用如下：\n\n英文|中文\n:--------|:------------\nFast Boot|快速启动\nCFG Lock (MSR 0xE2 write protection)|CFG 锁 (MSR 0xE2 写入保护)\nVT-d|VT-d\nCSM|兼容性支持模块\n\n启用如下：\n\n英文|中文\n:--------|:------------\nVT-x|VT-x\nAbove 4G decoding|大于 4G 地址空间解码\nHyper Threading|处理器超线程\nExecute Disable Bit|执行禁止位\nEHCI/XHCI Hand-off|接手 EHCI/XHCI 控制\nOS type: other types|操作系统类型: 其他\n\n### 拷贝适合自己的文件\n\n引导U盘制作好了之后, 我们还需要根据自己电脑的硬件替换`EFI`下的`ACPI`、`Drivers`、`Kexts`\n\n1. ACPI系统补丁文件\n2. Drivers引导系统的驱动文件\n3. Kexts安装系统的\n\n打开EFI—Kexts，我们把常用的一些kexts先放进去，一般情况下你需要放如下Kexts:\n\n名称|作用\n:---------|:--------------\n*Lilu.kext|Acidanthera驱动全家桶的底层依赖/下载地址\n*Applealc.kext|声卡驱动/下载地址\n*VirtualSMC.kext|传感器驱动依赖 /下载地址\n*SMCProcessor.kext|CPU核传感器/同上\n*SMCSuperIO.kext|IO传感器/同上\n*WhateverGreen.kext|核显&显卡驱动/下载地址\n*IntelMausi.kext|Intel类千兆网卡驱动/下载地址\n*Usbinjectall.kext|USB驱动 （你也可以定制自己的USB补丁）/下载地址\n*NVMeFix.kext|为NVME硬盘增加ASPT属性来保证节电，虽然对台式机没啥用，但是官方推荐所有NVME用户都使用此补丁/下载地址\n\n### 编辑配置`config.plist`\n\n需要根据自己的配置编辑修改`config.plist`\n\n## EFI引导项配置\n\n这里需要用到`BOOTICE`工具\n\n## 我遇到的问题\n\n- 选择完之后跑日志, 循环刷日志, 屏幕中出现 🚫 符号\n\n这个问题后面发现是U盘插在3.0接口的问题, 所以**务必**使用2.0USB接口安装系统\n\n- 选择完之后, 跑完日志, 重启就黑屏了\n\n这个问题是由于`config.plist`中关于显卡配置的问题导致的. 可以参考以下链接\n\n[见图配置](https://github.com/xiaoyaowx/Hackintosh-Z490-ASRock-Steel-Legend-Intel-10700)\n\n![ ](./1.png)\n\n同时添加`SSDT-RX5600XT.aml`到`/EFI/ACPI/`下, 并在`config.plist`中配置好\n\n- 在进入MacOS安装界面后, 选择`磁盘工具`格式化需要安装MacOS的盘符时, 提示无法完成该操作\n\n这个问题是由于系统`ESP`分区过小的问题导致的, 我们进入win pe系统中,通过`d`添加`ESP`分区分配1G空间, 再重新进入安装工具格式化磁盘即可解决问题\n\n## 目前系统出现的问题\n\n- 无法睡眠,\n","source":"_posts/hackintosh.md","raw":"---\ntitle: 黑苹果折腾记\ndate: 2020-08-26 11:10:11\ntags: 黑苹果\n---\n\n## 准备工作\n\n我们在开始前需要知道这几个网站, 因为所有资源都来自其中\n\n[黑果小兵的部落阁](https://blog.daliansky.net/)\n\n[远景论坛](http://bbs.pcbeta.com/)\n\n[使用OpenCore引导黑苹果](https://blog.xjn819.com/?p=543)\n\n## 我的电脑配置\n\n类目|型号\n:------|:---------------------------------------------------------------------\n处理器|Intel i7-10700\n主板|Gigabyte B460M AORUS PRO M-ATX\n显卡|蓝宝石 RX5600XT 6G\n内存|十铨（Team）DDR4 3200 16GB（8GB×2）火神系列\n硬盘|金士顿(Kingston) 1TB SSD固态硬盘 M.2接口(NVMe协议) A2000系列\n无线|博通BCM943602CS\n散热|玄冰400双刃\n电源|Tt 600W Toughpower GX1 RGB (80PLUS金牌/日系主电容/静音风扇)\n机箱|Tt 启航者S3+黑色\n显示器|优派4K 23.6英寸IPS VX2478-4K\n\n## 制作MacOS系统安装盘(U盘)\n\n系统镜像采用[微信首发】macOS Catalina 10.15.6 19G2021 正式版 Clover 5120/OC/PE三分区支持Intel及AMD双平台原版镜像](https://blog.daliansky.net/WeChat-First-macOS-Catalina-10.15.6-19G73-official-version-Clover-5119-OC-WEPE-supports-both-INTEL-and-AMD-original-images.html)\n\n### 下载镜像\n\n请前往[黑果小兵的部落阁](https://blog.daliansky.net/)或者关注`黑果小兵的部落阁`微信公众号下载镜像\n\n> 可选: 校验MD5值 `4a32cf1d5c37809dfb87f33eda5d50ed`\n\n### 制作镜像\n\n下载[etcher](https://etcher.io) -> 打开镜像 -> 选择U盘 -> 点击Flash即可.\n\n> Windows10需要管理员权限\n> 制作镜像需要一点时间, 请耐心等待\n\n## 安装前的准备\n\n### BOIS基本设置\n\n实际上使用技嘉主板,只需要开启`VT-X`、禁用`VT-D`即可\n\n禁用如下：\n\n英文|中文\n:--------|:------------\nFast Boot|快速启动\nCFG Lock (MSR 0xE2 write protection)|CFG 锁 (MSR 0xE2 写入保护)\nVT-d|VT-d\nCSM|兼容性支持模块\n\n启用如下：\n\n英文|中文\n:--------|:------------\nVT-x|VT-x\nAbove 4G decoding|大于 4G 地址空间解码\nHyper Threading|处理器超线程\nExecute Disable Bit|执行禁止位\nEHCI/XHCI Hand-off|接手 EHCI/XHCI 控制\nOS type: other types|操作系统类型: 其他\n\n### 拷贝适合自己的文件\n\n引导U盘制作好了之后, 我们还需要根据自己电脑的硬件替换`EFI`下的`ACPI`、`Drivers`、`Kexts`\n\n1. ACPI系统补丁文件\n2. Drivers引导系统的驱动文件\n3. Kexts安装系统的\n\n打开EFI—Kexts，我们把常用的一些kexts先放进去，一般情况下你需要放如下Kexts:\n\n名称|作用\n:---------|:--------------\n*Lilu.kext|Acidanthera驱动全家桶的底层依赖/下载地址\n*Applealc.kext|声卡驱动/下载地址\n*VirtualSMC.kext|传感器驱动依赖 /下载地址\n*SMCProcessor.kext|CPU核传感器/同上\n*SMCSuperIO.kext|IO传感器/同上\n*WhateverGreen.kext|核显&显卡驱动/下载地址\n*IntelMausi.kext|Intel类千兆网卡驱动/下载地址\n*Usbinjectall.kext|USB驱动 （你也可以定制自己的USB补丁）/下载地址\n*NVMeFix.kext|为NVME硬盘增加ASPT属性来保证节电，虽然对台式机没啥用，但是官方推荐所有NVME用户都使用此补丁/下载地址\n\n### 编辑配置`config.plist`\n\n需要根据自己的配置编辑修改`config.plist`\n\n## EFI引导项配置\n\n这里需要用到`BOOTICE`工具\n\n## 我遇到的问题\n\n- 选择完之后跑日志, 循环刷日志, 屏幕中出现 🚫 符号\n\n这个问题后面发现是U盘插在3.0接口的问题, 所以**务必**使用2.0USB接口安装系统\n\n- 选择完之后, 跑完日志, 重启就黑屏了\n\n这个问题是由于`config.plist`中关于显卡配置的问题导致的. 可以参考以下链接\n\n[见图配置](https://github.com/xiaoyaowx/Hackintosh-Z490-ASRock-Steel-Legend-Intel-10700)\n\n![ ](./1.png)\n\n同时添加`SSDT-RX5600XT.aml`到`/EFI/ACPI/`下, 并在`config.plist`中配置好\n\n- 在进入MacOS安装界面后, 选择`磁盘工具`格式化需要安装MacOS的盘符时, 提示无法完成该操作\n\n这个问题是由于系统`ESP`分区过小的问题导致的, 我们进入win pe系统中,通过`d`添加`ESP`分区分配1G空间, 再重新进入安装工具格式化磁盘即可解决问题\n\n## 目前系统出现的问题\n\n- 无法睡眠,\n","slug":"hackintosh","published":1,"updated":"2021-11-04T15:54:07.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihu000jahte5pene9pw","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>我们在开始前需要知道这几个网站, 因为所有资源都来自其中</p>\n<p><a href=\"https://blog.daliansky.net/\">黑果小兵的部落阁</a></p>\n<p><a href=\"http://bbs.pcbeta.com/\">远景论坛</a></p>\n<p><a href=\"https://blog.xjn819.com/?p=543\">使用OpenCore引导黑苹果</a></p>\n<h2 id=\"我的电脑配置\"><a href=\"#我的电脑配置\" class=\"headerlink\" title=\"我的电脑配置\"></a>我的电脑配置</h2><table>\n<thead>\n<tr>\n<th align=\"left\">类目</th>\n<th align=\"left\">型号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">处理器</td>\n<td align=\"left\">Intel i7-10700</td>\n</tr>\n<tr>\n<td align=\"left\">主板</td>\n<td align=\"left\">Gigabyte B460M AORUS PRO M-ATX</td>\n</tr>\n<tr>\n<td align=\"left\">显卡</td>\n<td align=\"left\">蓝宝石 RX5600XT 6G</td>\n</tr>\n<tr>\n<td align=\"left\">内存</td>\n<td align=\"left\">十铨（Team）DDR4 3200 16GB（8GB×2）火神系列</td>\n</tr>\n<tr>\n<td align=\"left\">硬盘</td>\n<td align=\"left\">金士顿(Kingston) 1TB SSD固态硬盘 M.2接口(NVMe协议) A2000系列</td>\n</tr>\n<tr>\n<td align=\"left\">无线</td>\n<td align=\"left\">博通BCM943602CS</td>\n</tr>\n<tr>\n<td align=\"left\">散热</td>\n<td align=\"left\">玄冰400双刃</td>\n</tr>\n<tr>\n<td align=\"left\">电源</td>\n<td align=\"left\">Tt 600W Toughpower GX1 RGB (80PLUS金牌/日系主电容/静音风扇)</td>\n</tr>\n<tr>\n<td align=\"left\">机箱</td>\n<td align=\"left\">Tt 启航者S3+黑色</td>\n</tr>\n<tr>\n<td align=\"left\">显示器</td>\n<td align=\"left\">优派4K 23.6英寸IPS VX2478-4K</td>\n</tr>\n</tbody></table>\n<h2 id=\"制作MacOS系统安装盘-U盘\"><a href=\"#制作MacOS系统安装盘-U盘\" class=\"headerlink\" title=\"制作MacOS系统安装盘(U盘)\"></a>制作MacOS系统安装盘(U盘)</h2><p>系统镜像采用<a href=\"https://blog.daliansky.net/WeChat-First-macOS-Catalina-10.15.6-19G73-official-version-Clover-5119-OC-WEPE-supports-both-INTEL-and-AMD-original-images.html\">微信首发】macOS Catalina 10.15.6 19G2021 正式版 Clover 5120/OC/PE三分区支持Intel及AMD双平台原版镜像</a></p>\n<h3 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h3><p>请前往<a href=\"https://blog.daliansky.net/\">黑果小兵的部落阁</a>或者关注<code>黑果小兵的部落阁</code>微信公众号下载镜像</p>\n<blockquote>\n<p>可选: 校验MD5值 <code>4a32cf1d5c37809dfb87f33eda5d50ed</code></p>\n</blockquote>\n<h3 id=\"制作镜像\"><a href=\"#制作镜像\" class=\"headerlink\" title=\"制作镜像\"></a>制作镜像</h3><p>下载<a href=\"https://etcher.io/\">etcher</a> -&gt; 打开镜像 -&gt; 选择U盘 -&gt; 点击Flash即可.</p>\n<blockquote>\n<p>Windows10需要管理员权限<br>制作镜像需要一点时间, 请耐心等待</p>\n</blockquote>\n<h2 id=\"安装前的准备\"><a href=\"#安装前的准备\" class=\"headerlink\" title=\"安装前的准备\"></a>安装前的准备</h2><h3 id=\"BOIS基本设置\"><a href=\"#BOIS基本设置\" class=\"headerlink\" title=\"BOIS基本设置\"></a>BOIS基本设置</h3><p>实际上使用技嘉主板,只需要开启<code>VT-X</code>、禁用<code>VT-D</code>即可</p>\n<p>禁用如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">英文</th>\n<th align=\"left\">中文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Fast Boot</td>\n<td align=\"left\">快速启动</td>\n</tr>\n<tr>\n<td align=\"left\">CFG Lock (MSR 0xE2 write protection)</td>\n<td align=\"left\">CFG 锁 (MSR 0xE2 写入保护)</td>\n</tr>\n<tr>\n<td align=\"left\">VT-d</td>\n<td align=\"left\">VT-d</td>\n</tr>\n<tr>\n<td align=\"left\">CSM</td>\n<td align=\"left\">兼容性支持模块</td>\n</tr>\n</tbody></table>\n<p>启用如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">英文</th>\n<th align=\"left\">中文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">VT-x</td>\n<td align=\"left\">VT-x</td>\n</tr>\n<tr>\n<td align=\"left\">Above 4G decoding</td>\n<td align=\"left\">大于 4G 地址空间解码</td>\n</tr>\n<tr>\n<td align=\"left\">Hyper Threading</td>\n<td align=\"left\">处理器超线程</td>\n</tr>\n<tr>\n<td align=\"left\">Execute Disable Bit</td>\n<td align=\"left\">执行禁止位</td>\n</tr>\n<tr>\n<td align=\"left\">EHCI/XHCI Hand-off</td>\n<td align=\"left\">接手 EHCI/XHCI 控制</td>\n</tr>\n<tr>\n<td align=\"left\">OS type: other types</td>\n<td align=\"left\">操作系统类型: 其他</td>\n</tr>\n</tbody></table>\n<h3 id=\"拷贝适合自己的文件\"><a href=\"#拷贝适合自己的文件\" class=\"headerlink\" title=\"拷贝适合自己的文件\"></a>拷贝适合自己的文件</h3><p>引导U盘制作好了之后, 我们还需要根据自己电脑的硬件替换<code>EFI</code>下的<code>ACPI</code>、<code>Drivers</code>、<code>Kexts</code></p>\n<ol>\n<li>ACPI系统补丁文件</li>\n<li>Drivers引导系统的驱动文件</li>\n<li>Kexts安装系统的</li>\n</ol>\n<p>打开EFI—Kexts，我们把常用的一些kexts先放进去，一般情况下你需要放如下Kexts:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">*Lilu.kext</td>\n<td align=\"left\">Acidanthera驱动全家桶的底层依赖/下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*Applealc.kext</td>\n<td align=\"left\">声卡驱动/下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*VirtualSMC.kext</td>\n<td align=\"left\">传感器驱动依赖 /下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*SMCProcessor.kext</td>\n<td align=\"left\">CPU核传感器/同上</td>\n</tr>\n<tr>\n<td align=\"left\">*SMCSuperIO.kext</td>\n<td align=\"left\">IO传感器/同上</td>\n</tr>\n<tr>\n<td align=\"left\">*WhateverGreen.kext</td>\n<td align=\"left\">核显&amp;显卡驱动/下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*IntelMausi.kext</td>\n<td align=\"left\">Intel类千兆网卡驱动/下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*Usbinjectall.kext</td>\n<td align=\"left\">USB驱动 （你也可以定制自己的USB补丁）/下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*NVMeFix.kext</td>\n<td align=\"left\">为NVME硬盘增加ASPT属性来保证节电，虽然对台式机没啥用，但是官方推荐所有NVME用户都使用此补丁/下载地址</td>\n</tr>\n</tbody></table>\n<h3 id=\"编辑配置config-plist\"><a href=\"#编辑配置config-plist\" class=\"headerlink\" title=\"编辑配置config.plist\"></a>编辑配置<code>config.plist</code></h3><p>需要根据自己的配置编辑修改<code>config.plist</code></p>\n<h2 id=\"EFI引导项配置\"><a href=\"#EFI引导项配置\" class=\"headerlink\" title=\"EFI引导项配置\"></a>EFI引导项配置</h2><p>这里需要用到<code>BOOTICE</code>工具</p>\n<h2 id=\"我遇到的问题\"><a href=\"#我遇到的问题\" class=\"headerlink\" title=\"我遇到的问题\"></a>我遇到的问题</h2><ul>\n<li>选择完之后跑日志, 循环刷日志, 屏幕中出现 🚫 符号</li>\n</ul>\n<p>这个问题后面发现是U盘插在3.0接口的问题, 所以<strong>务必</strong>使用2.0USB接口安装系统</p>\n<ul>\n<li>选择完之后, 跑完日志, 重启就黑屏了</li>\n</ul>\n<p>这个问题是由于<code>config.plist</code>中关于显卡配置的问题导致的. 可以参考以下链接</p>\n<p><a href=\"https://github.com/xiaoyaowx/Hackintosh-Z490-ASRock-Steel-Legend-Intel-10700\">见图配置</a></p>\n<p><img src=\"./1.png\" alt=\" \"></p>\n<p>同时添加<code>SSDT-RX5600XT.aml</code>到<code>/EFI/ACPI/</code>下, 并在<code>config.plist</code>中配置好</p>\n<ul>\n<li>在进入MacOS安装界面后, 选择<code>磁盘工具</code>格式化需要安装MacOS的盘符时, 提示无法完成该操作</li>\n</ul>\n<p>这个问题是由于系统<code>ESP</code>分区过小的问题导致的, 我们进入win pe系统中,通过<code>d</code>添加<code>ESP</code>分区分配1G空间, 再重新进入安装工具格式化磁盘即可解决问题</p>\n<h2 id=\"目前系统出现的问题\"><a href=\"#目前系统出现的问题\" class=\"headerlink\" title=\"目前系统出现的问题\"></a>目前系统出现的问题</h2><ul>\n<li>无法睡眠,</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>我们在开始前需要知道这几个网站, 因为所有资源都来自其中</p>\n<p><a href=\"https://blog.daliansky.net/\">黑果小兵的部落阁</a></p>\n<p><a href=\"http://bbs.pcbeta.com/\">远景论坛</a></p>\n<p><a href=\"https://blog.xjn819.com/?p=543\">使用OpenCore引导黑苹果</a></p>\n<h2 id=\"我的电脑配置\"><a href=\"#我的电脑配置\" class=\"headerlink\" title=\"我的电脑配置\"></a>我的电脑配置</h2><table>\n<thead>\n<tr>\n<th align=\"left\">类目</th>\n<th align=\"left\">型号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">处理器</td>\n<td align=\"left\">Intel i7-10700</td>\n</tr>\n<tr>\n<td align=\"left\">主板</td>\n<td align=\"left\">Gigabyte B460M AORUS PRO M-ATX</td>\n</tr>\n<tr>\n<td align=\"left\">显卡</td>\n<td align=\"left\">蓝宝石 RX5600XT 6G</td>\n</tr>\n<tr>\n<td align=\"left\">内存</td>\n<td align=\"left\">十铨（Team）DDR4 3200 16GB（8GB×2）火神系列</td>\n</tr>\n<tr>\n<td align=\"left\">硬盘</td>\n<td align=\"left\">金士顿(Kingston) 1TB SSD固态硬盘 M.2接口(NVMe协议) A2000系列</td>\n</tr>\n<tr>\n<td align=\"left\">无线</td>\n<td align=\"left\">博通BCM943602CS</td>\n</tr>\n<tr>\n<td align=\"left\">散热</td>\n<td align=\"left\">玄冰400双刃</td>\n</tr>\n<tr>\n<td align=\"left\">电源</td>\n<td align=\"left\">Tt 600W Toughpower GX1 RGB (80PLUS金牌/日系主电容/静音风扇)</td>\n</tr>\n<tr>\n<td align=\"left\">机箱</td>\n<td align=\"left\">Tt 启航者S3+黑色</td>\n</tr>\n<tr>\n<td align=\"left\">显示器</td>\n<td align=\"left\">优派4K 23.6英寸IPS VX2478-4K</td>\n</tr>\n</tbody></table>\n<h2 id=\"制作MacOS系统安装盘-U盘\"><a href=\"#制作MacOS系统安装盘-U盘\" class=\"headerlink\" title=\"制作MacOS系统安装盘(U盘)\"></a>制作MacOS系统安装盘(U盘)</h2><p>系统镜像采用<a href=\"https://blog.daliansky.net/WeChat-First-macOS-Catalina-10.15.6-19G73-official-version-Clover-5119-OC-WEPE-supports-both-INTEL-and-AMD-original-images.html\">微信首发】macOS Catalina 10.15.6 19G2021 正式版 Clover 5120/OC/PE三分区支持Intel及AMD双平台原版镜像</a></p>\n<h3 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h3><p>请前往<a href=\"https://blog.daliansky.net/\">黑果小兵的部落阁</a>或者关注<code>黑果小兵的部落阁</code>微信公众号下载镜像</p>\n<blockquote>\n<p>可选: 校验MD5值 <code>4a32cf1d5c37809dfb87f33eda5d50ed</code></p>\n</blockquote>\n<h3 id=\"制作镜像\"><a href=\"#制作镜像\" class=\"headerlink\" title=\"制作镜像\"></a>制作镜像</h3><p>下载<a href=\"https://etcher.io/\">etcher</a> -&gt; 打开镜像 -&gt; 选择U盘 -&gt; 点击Flash即可.</p>\n<blockquote>\n<p>Windows10需要管理员权限<br>制作镜像需要一点时间, 请耐心等待</p>\n</blockquote>\n<h2 id=\"安装前的准备\"><a href=\"#安装前的准备\" class=\"headerlink\" title=\"安装前的准备\"></a>安装前的准备</h2><h3 id=\"BOIS基本设置\"><a href=\"#BOIS基本设置\" class=\"headerlink\" title=\"BOIS基本设置\"></a>BOIS基本设置</h3><p>实际上使用技嘉主板,只需要开启<code>VT-X</code>、禁用<code>VT-D</code>即可</p>\n<p>禁用如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">英文</th>\n<th align=\"left\">中文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Fast Boot</td>\n<td align=\"left\">快速启动</td>\n</tr>\n<tr>\n<td align=\"left\">CFG Lock (MSR 0xE2 write protection)</td>\n<td align=\"left\">CFG 锁 (MSR 0xE2 写入保护)</td>\n</tr>\n<tr>\n<td align=\"left\">VT-d</td>\n<td align=\"left\">VT-d</td>\n</tr>\n<tr>\n<td align=\"left\">CSM</td>\n<td align=\"left\">兼容性支持模块</td>\n</tr>\n</tbody></table>\n<p>启用如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">英文</th>\n<th align=\"left\">中文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">VT-x</td>\n<td align=\"left\">VT-x</td>\n</tr>\n<tr>\n<td align=\"left\">Above 4G decoding</td>\n<td align=\"left\">大于 4G 地址空间解码</td>\n</tr>\n<tr>\n<td align=\"left\">Hyper Threading</td>\n<td align=\"left\">处理器超线程</td>\n</tr>\n<tr>\n<td align=\"left\">Execute Disable Bit</td>\n<td align=\"left\">执行禁止位</td>\n</tr>\n<tr>\n<td align=\"left\">EHCI/XHCI Hand-off</td>\n<td align=\"left\">接手 EHCI/XHCI 控制</td>\n</tr>\n<tr>\n<td align=\"left\">OS type: other types</td>\n<td align=\"left\">操作系统类型: 其他</td>\n</tr>\n</tbody></table>\n<h3 id=\"拷贝适合自己的文件\"><a href=\"#拷贝适合自己的文件\" class=\"headerlink\" title=\"拷贝适合自己的文件\"></a>拷贝适合自己的文件</h3><p>引导U盘制作好了之后, 我们还需要根据自己电脑的硬件替换<code>EFI</code>下的<code>ACPI</code>、<code>Drivers</code>、<code>Kexts</code></p>\n<ol>\n<li>ACPI系统补丁文件</li>\n<li>Drivers引导系统的驱动文件</li>\n<li>Kexts安装系统的</li>\n</ol>\n<p>打开EFI—Kexts，我们把常用的一些kexts先放进去，一般情况下你需要放如下Kexts:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">*Lilu.kext</td>\n<td align=\"left\">Acidanthera驱动全家桶的底层依赖/下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*Applealc.kext</td>\n<td align=\"left\">声卡驱动/下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*VirtualSMC.kext</td>\n<td align=\"left\">传感器驱动依赖 /下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*SMCProcessor.kext</td>\n<td align=\"left\">CPU核传感器/同上</td>\n</tr>\n<tr>\n<td align=\"left\">*SMCSuperIO.kext</td>\n<td align=\"left\">IO传感器/同上</td>\n</tr>\n<tr>\n<td align=\"left\">*WhateverGreen.kext</td>\n<td align=\"left\">核显&amp;显卡驱动/下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*IntelMausi.kext</td>\n<td align=\"left\">Intel类千兆网卡驱动/下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*Usbinjectall.kext</td>\n<td align=\"left\">USB驱动 （你也可以定制自己的USB补丁）/下载地址</td>\n</tr>\n<tr>\n<td align=\"left\">*NVMeFix.kext</td>\n<td align=\"left\">为NVME硬盘增加ASPT属性来保证节电，虽然对台式机没啥用，但是官方推荐所有NVME用户都使用此补丁/下载地址</td>\n</tr>\n</tbody></table>\n<h3 id=\"编辑配置config-plist\"><a href=\"#编辑配置config-plist\" class=\"headerlink\" title=\"编辑配置config.plist\"></a>编辑配置<code>config.plist</code></h3><p>需要根据自己的配置编辑修改<code>config.plist</code></p>\n<h2 id=\"EFI引导项配置\"><a href=\"#EFI引导项配置\" class=\"headerlink\" title=\"EFI引导项配置\"></a>EFI引导项配置</h2><p>这里需要用到<code>BOOTICE</code>工具</p>\n<h2 id=\"我遇到的问题\"><a href=\"#我遇到的问题\" class=\"headerlink\" title=\"我遇到的问题\"></a>我遇到的问题</h2><ul>\n<li>选择完之后跑日志, 循环刷日志, 屏幕中出现 🚫 符号</li>\n</ul>\n<p>这个问题后面发现是U盘插在3.0接口的问题, 所以<strong>务必</strong>使用2.0USB接口安装系统</p>\n<ul>\n<li>选择完之后, 跑完日志, 重启就黑屏了</li>\n</ul>\n<p>这个问题是由于<code>config.plist</code>中关于显卡配置的问题导致的. 可以参考以下链接</p>\n<p><a href=\"https://github.com/xiaoyaowx/Hackintosh-Z490-ASRock-Steel-Legend-Intel-10700\">见图配置</a></p>\n<p><img src=\"./1.png\" alt=\" \"></p>\n<p>同时添加<code>SSDT-RX5600XT.aml</code>到<code>/EFI/ACPI/</code>下, 并在<code>config.plist</code>中配置好</p>\n<ul>\n<li>在进入MacOS安装界面后, 选择<code>磁盘工具</code>格式化需要安装MacOS的盘符时, 提示无法完成该操作</li>\n</ul>\n<p>这个问题是由于系统<code>ESP</code>分区过小的问题导致的, 我们进入win pe系统中,通过<code>d</code>添加<code>ESP</code>分区分配1G空间, 再重新进入安装工具格式化磁盘即可解决问题</p>\n<h2 id=\"目前系统出现的问题\"><a href=\"#目前系统出现的问题\" class=\"headerlink\" title=\"目前系统出现的问题\"></a>目前系统出现的问题</h2><ul>\n<li>无法睡眠,</li>\n</ul>\n"},{"title":"Hello World","date":"2018-12-31T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-01-01 00:00:00\ntag: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)","slug":"hello-world","published":1,"updated":"2021-11-04T15:54:07.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihv000lahte3la65qol","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"IIS服务器学习","date":"2019-05-15T08:13:34.000Z","_content":"\nIIS是Internet Information Services的缩写. 微软公司提供的基于运行Microsoft Windows的互联网基本服务. IIS是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事.\n\n## IIS 服务器\n\nIIS服务器是Windows自带的一个服务器, 默认是禁用的, 我们需要在 控制面板 -> 程序与应用 中开启这个服务, 然后在管理工具中添加你的网站即可.\n\n## 配置IIS服务\n\n> 我以 windows 10 为例\n\n找到控制面板, 打开**程序和功能**, 点击左侧的**启用和关闭windows功能**\n\n![ ](./iis_01.png)\n\n![ ](./iis_02.png)\n\n如图所示, 勾选 **Internet Information Service** 选项, 会自动帮你选中子选项, 到这里一个简单的iis服务器就算启动了\n\n![ ](./iis_03.png)\n\n> [浏览器输入(或点击这里)](http://localhost)就可以看到以下信息\n\n![ ](./iis_04.png)\n\n## 管理你的网站\n\n### 管理界面\n\n同样的在控制面板, 打开**管理工具**, 找到**Internet Information Service(IIS)管理器**\n\n![ ](./iis_05.png)\n\n这个就是你的IIS服务器的管理界面\n\n### 添加网站\n\n右键**服务器**/**网站**选择**添加网站**, 出现如下界面, 填写网站相关信息即可.\n\n![ ](./iis_06.png)\n\n我将本机的一个图片目录部署为一个网站, *图片服务器*\n\n1. 网站名称, 即你的网站名字.\n2. 应用程序池, 默认即可, 深入的再探讨.\n3. 物理路径, 就是你的项目所在路径\n4. 绑定\n   1. 类型 http/htts, 如果选择为 https 还需要配置证书\n   2. IP地址段, 你可以在你局域网的IP段内自定义, 默认就是本机IP(localhost、127.0.0.1)\n   3. 端口不能重复, 这里我配置为 8001\n5. 主机名,就是你的域名, 默认不需要修改, 相应的修改需要配置 hosts 文件 (路径\"C:\\Windows\\System32\\drivers\\etc\\hosts\")\n\n最后一步, 点击确认保存, 你可以看到:\n\n![ ](./iis_07.png)\n\n打开浏览器,输入 [localhost:8001/1.jpg](http://localhost:8001/1.jpg), 你可以看到:\n\n![ ](./iis_08.png)\n\n## 结语\n\n学无止境","source":"_posts/iis.md","raw":"---\ntitle: IIS服务器学习\ndate: 2019-05-15 16:13:34\ntags: 服务器\n---\n\nIIS是Internet Information Services的缩写. 微软公司提供的基于运行Microsoft Windows的互联网基本服务. IIS是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事.\n\n## IIS 服务器\n\nIIS服务器是Windows自带的一个服务器, 默认是禁用的, 我们需要在 控制面板 -> 程序与应用 中开启这个服务, 然后在管理工具中添加你的网站即可.\n\n## 配置IIS服务\n\n> 我以 windows 10 为例\n\n找到控制面板, 打开**程序和功能**, 点击左侧的**启用和关闭windows功能**\n\n![ ](./iis_01.png)\n\n![ ](./iis_02.png)\n\n如图所示, 勾选 **Internet Information Service** 选项, 会自动帮你选中子选项, 到这里一个简单的iis服务器就算启动了\n\n![ ](./iis_03.png)\n\n> [浏览器输入(或点击这里)](http://localhost)就可以看到以下信息\n\n![ ](./iis_04.png)\n\n## 管理你的网站\n\n### 管理界面\n\n同样的在控制面板, 打开**管理工具**, 找到**Internet Information Service(IIS)管理器**\n\n![ ](./iis_05.png)\n\n这个就是你的IIS服务器的管理界面\n\n### 添加网站\n\n右键**服务器**/**网站**选择**添加网站**, 出现如下界面, 填写网站相关信息即可.\n\n![ ](./iis_06.png)\n\n我将本机的一个图片目录部署为一个网站, *图片服务器*\n\n1. 网站名称, 即你的网站名字.\n2. 应用程序池, 默认即可, 深入的再探讨.\n3. 物理路径, 就是你的项目所在路径\n4. 绑定\n   1. 类型 http/htts, 如果选择为 https 还需要配置证书\n   2. IP地址段, 你可以在你局域网的IP段内自定义, 默认就是本机IP(localhost、127.0.0.1)\n   3. 端口不能重复, 这里我配置为 8001\n5. 主机名,就是你的域名, 默认不需要修改, 相应的修改需要配置 hosts 文件 (路径\"C:\\Windows\\System32\\drivers\\etc\\hosts\")\n\n最后一步, 点击确认保存, 你可以看到:\n\n![ ](./iis_07.png)\n\n打开浏览器,输入 [localhost:8001/1.jpg](http://localhost:8001/1.jpg), 你可以看到:\n\n![ ](./iis_08.png)\n\n## 结语\n\n学无止境","slug":"iis","published":1,"updated":"2021-11-04T15:54:07.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihv000nahtecmo9fead","content":"<p>IIS是Internet Information Services的缩写. 微软公司提供的基于运行Microsoft Windows的互联网基本服务. IIS是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事.</p>\n<h2 id=\"IIS-服务器\"><a href=\"#IIS-服务器\" class=\"headerlink\" title=\"IIS 服务器\"></a>IIS 服务器</h2><p>IIS服务器是Windows自带的一个服务器, 默认是禁用的, 我们需要在 控制面板 -&gt; 程序与应用 中开启这个服务, 然后在管理工具中添加你的网站即可.</p>\n<h2 id=\"配置IIS服务\"><a href=\"#配置IIS服务\" class=\"headerlink\" title=\"配置IIS服务\"></a>配置IIS服务</h2><blockquote>\n<p>我以 windows 10 为例</p>\n</blockquote>\n<p>找到控制面板, 打开<strong>程序和功能</strong>, 点击左侧的<strong>启用和关闭windows功能</strong></p>\n<p><img src=\"./iis_01.png\" alt=\" \"></p>\n<p><img src=\"./iis_02.png\" alt=\" \"></p>\n<p>如图所示, 勾选 <strong>Internet Information Service</strong> 选项, 会自动帮你选中子选项, 到这里一个简单的iis服务器就算启动了</p>\n<p><img src=\"./iis_03.png\" alt=\" \"></p>\n<blockquote>\n<p><a href=\"http://localhost/\">浏览器输入(或点击这里)</a>就可以看到以下信息</p>\n</blockquote>\n<p><img src=\"./iis_04.png\" alt=\" \"></p>\n<h2 id=\"管理你的网站\"><a href=\"#管理你的网站\" class=\"headerlink\" title=\"管理你的网站\"></a>管理你的网站</h2><h3 id=\"管理界面\"><a href=\"#管理界面\" class=\"headerlink\" title=\"管理界面\"></a>管理界面</h3><p>同样的在控制面板, 打开<strong>管理工具</strong>, 找到<strong>Internet Information Service(IIS)管理器</strong></p>\n<p><img src=\"./iis_05.png\" alt=\" \"></p>\n<p>这个就是你的IIS服务器的管理界面</p>\n<h3 id=\"添加网站\"><a href=\"#添加网站\" class=\"headerlink\" title=\"添加网站\"></a>添加网站</h3><p>右键<strong>服务器</strong>/<strong>网站</strong>选择<strong>添加网站</strong>, 出现如下界面, 填写网站相关信息即可.</p>\n<p><img src=\"./iis_06.png\" alt=\" \"></p>\n<p>我将本机的一个图片目录部署为一个网站, <em>图片服务器</em></p>\n<ol>\n<li>网站名称, 即你的网站名字.</li>\n<li>应用程序池, 默认即可, 深入的再探讨.</li>\n<li>物理路径, 就是你的项目所在路径</li>\n<li>绑定<ol>\n<li>类型 http/htts, 如果选择为 https 还需要配置证书</li>\n<li>IP地址段, 你可以在你局域网的IP段内自定义, 默认就是本机IP(localhost、127.0.0.1)</li>\n<li>端口不能重复, 这里我配置为 8001</li>\n</ol>\n</li>\n<li>主机名,就是你的域名, 默认不需要修改, 相应的修改需要配置 hosts 文件 (路径”C:\\Windows\\System32\\drivers\\etc\\hosts”)</li>\n</ol>\n<p>最后一步, 点击确认保存, 你可以看到:</p>\n<p><img src=\"./iis_07.png\" alt=\" \"></p>\n<p>打开浏览器,输入 <a href=\"http://localhost:8001/1.jpg\">localhost:8001/1.jpg</a>, 你可以看到:</p>\n<p><img src=\"./iis_08.png\" alt=\" \"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>学无止境</p>\n","site":{"data":{}},"excerpt":"","more":"<p>IIS是Internet Information Services的缩写. 微软公司提供的基于运行Microsoft Windows的互联网基本服务. IIS是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事.</p>\n<h2 id=\"IIS-服务器\"><a href=\"#IIS-服务器\" class=\"headerlink\" title=\"IIS 服务器\"></a>IIS 服务器</h2><p>IIS服务器是Windows自带的一个服务器, 默认是禁用的, 我们需要在 控制面板 -&gt; 程序与应用 中开启这个服务, 然后在管理工具中添加你的网站即可.</p>\n<h2 id=\"配置IIS服务\"><a href=\"#配置IIS服务\" class=\"headerlink\" title=\"配置IIS服务\"></a>配置IIS服务</h2><blockquote>\n<p>我以 windows 10 为例</p>\n</blockquote>\n<p>找到控制面板, 打开<strong>程序和功能</strong>, 点击左侧的<strong>启用和关闭windows功能</strong></p>\n<p><img src=\"./iis_01.png\" alt=\" \"></p>\n<p><img src=\"./iis_02.png\" alt=\" \"></p>\n<p>如图所示, 勾选 <strong>Internet Information Service</strong> 选项, 会自动帮你选中子选项, 到这里一个简单的iis服务器就算启动了</p>\n<p><img src=\"./iis_03.png\" alt=\" \"></p>\n<blockquote>\n<p><a href=\"http://localhost/\">浏览器输入(或点击这里)</a>就可以看到以下信息</p>\n</blockquote>\n<p><img src=\"./iis_04.png\" alt=\" \"></p>\n<h2 id=\"管理你的网站\"><a href=\"#管理你的网站\" class=\"headerlink\" title=\"管理你的网站\"></a>管理你的网站</h2><h3 id=\"管理界面\"><a href=\"#管理界面\" class=\"headerlink\" title=\"管理界面\"></a>管理界面</h3><p>同样的在控制面板, 打开<strong>管理工具</strong>, 找到<strong>Internet Information Service(IIS)管理器</strong></p>\n<p><img src=\"./iis_05.png\" alt=\" \"></p>\n<p>这个就是你的IIS服务器的管理界面</p>\n<h3 id=\"添加网站\"><a href=\"#添加网站\" class=\"headerlink\" title=\"添加网站\"></a>添加网站</h3><p>右键<strong>服务器</strong>/<strong>网站</strong>选择<strong>添加网站</strong>, 出现如下界面, 填写网站相关信息即可.</p>\n<p><img src=\"./iis_06.png\" alt=\" \"></p>\n<p>我将本机的一个图片目录部署为一个网站, <em>图片服务器</em></p>\n<ol>\n<li>网站名称, 即你的网站名字.</li>\n<li>应用程序池, 默认即可, 深入的再探讨.</li>\n<li>物理路径, 就是你的项目所在路径</li>\n<li>绑定<ol>\n<li>类型 http/htts, 如果选择为 https 还需要配置证书</li>\n<li>IP地址段, 你可以在你局域网的IP段内自定义, 默认就是本机IP(localhost、127.0.0.1)</li>\n<li>端口不能重复, 这里我配置为 8001</li>\n</ol>\n</li>\n<li>主机名,就是你的域名, 默认不需要修改, 相应的修改需要配置 hosts 文件 (路径”C:\\Windows\\System32\\drivers\\etc\\hosts”)</li>\n</ol>\n<p>最后一步, 点击确认保存, 你可以看到:</p>\n<p><img src=\"./iis_07.png\" alt=\" \"></p>\n<p>打开浏览器,输入 <a href=\"http://localhost:8001/1.jpg\">localhost:8001/1.jpg</a>, 你可以看到:</p>\n<p><img src=\"./iis_08.png\" alt=\" \"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>学无止境</p>\n"},{"title":"了解javascript的执行机制","date":"2020-08-24T07:19:24.000Z","_content":"\n[参考《这一次，彻底弄懂 JavaScript 执行机制 - 掘金》](https://juejin.im/post/6844903512845860872#heading-0)\n[参考《一次弄懂Event Loop（彻底解决此类面试问题）- 掘金》](https://juejin.im/post/6844903764202094606)\n[参考《2020前端面试必会知识点 - 灰蓝宇墨的文章 - 知乎》](https://zhuanlan.zhihu.com/p/139983258)\n\n## 关于JavaScript的说明\n\nJavaScript是一门**单线程**编程语言, 一切的关于JavaScript的多线程都是单线程模拟出来的\n\n不管是什么新框架新语法糖实现的所谓异步, 其实都是用同步的方法去模拟的\n\n## JavaScript的执行机制\n\nJavaScript的执行机制: **事件循环(Event Loop)**\n\n事件循环是js实现异步的一种方法，也是js的执行机制。\n\n注意区分**执行**和**运行**\n\n## 广义的同步任务和异步任务\n\n1. 同步任务\n2. 异步任务\n\n![ ](./1.png)\n\n简单的文字描述图片中的内容:\n\n- 同步和异步任务分别进入不同的执行\"场所\"，同步的进入主线程，异步的进入**Event Table**并注册函数。\n- 当指定的事情完成时，Event Table会将这个函数移入**Event Queue**。\n- 主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。\n- 上述过程会不断重复，也就是常说的**Event Loop(事件循环)**。\n\n> js引擎存在**monitoring process**进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数\n\n### 示例\n\n参考一下ajax的执行过程\n\n```javascript\nlet data = [];\n$.ajax({\n    url:www.javascript.com,\n    data:data,\n    success:() => {\n        console.log('发送成功!');\n    }\n})\nconsole.log('代码执行结束');\n```\n\n- ajax进入Event Table，注册回调函数success。\n- 执行console.log('代码执行结束')。\n- ajax事件完成，回调函数success进入Event Queue。\n- 主线程从Event Queue读取回调函数success并执行。\n\n### 常用 setTimeout、setInterval 函数\n\n#### setTimeout\n\n平时经常使用`setTimeout`函数定时执行一些业务\n\n```javascript\nsetTimeout(() => {\n    console.log('延时3秒');\n},3000)\n```\n\n随着`setTimeout`的越来越多, 问题也就来了\n\n```javascript\nsetTimeout(() => {\n    console.log('延时3秒');\n},3000);\nconsole.log('---> 执行:console');\n```\n\n输出\n\n```javascript\n// ---> 执行:console\n// 延迟3秒\n```\n\n这个结果是正确的, 但是我们稍微改一下代码\n\n```javascript\nsetTimeout(() => {\n    task()\n},3000);\nsleep(100000); // 这里假设执行业务代码耗时比较长\n```\n\n这个时候执行`task()`输出时间就不止延迟3秒了,\n\n- `task()`进入Event Table并注册,计时开始。\n- 执行`sleep`函数，很慢，非常慢，计时仍在继续。\n- 3秒到了，计时事件timeout完成，`task()`进入Event Queue，但是`sleep`也太慢了吧，还没执行完，只好等着。\n- `sleep`终于执行完了，`task()`终于从Event Queue进入了主线程执行。\n\n`setTimeout`函数的定义是, 函数等待定义的时间之后才进入Event Queue, 又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒\n\n#### setInterval\n\n`setInterval`跟`setTimeout`效果差不多, 区别是`setInterval`会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待.\n\n唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。**一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。**\n\n## 任务还有更精细的定义 宏任务/微任务\n\n1. macro-task(宏任务)：包括整体代码script，setTimeout，setInterval\n2. micro-task(微任务)：Promise，process.nextTick\n\n> 不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。\n\n除了传统的定时器`setInterval`和`setTimeout`外, 我们还要了解的`Promise`和`process.nextTick`\n\n1. `Promise`可以参考[阮一峰老师的Promise讲解](https://es6.ruanyifeng.com/#docs/promise)\n2. `process.nextTick`类似node.js版的`setTimeout`\n\n事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。\n\n举例:\n\n```javascript\nsetTimeout(function() {\n    console.log('setTimeout');\n})\n\nnew Promise(function(resolve) {\n    console.log('promise');\n}).then(function() {\n    console.log('then');\n})\n\nconsole.log('console');\n```\n\n- 这段代码作为宏任务，进入主线程。\n- 先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)\n- 接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。\n- 遇到console.log()，立即执行。\n- 好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。\n- ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。\n- 结束。\n\n关系图\n\n![ ](./2.png)\n\n一段较复杂的javascript代码, 分析一下它的输出\n\n```javascript\nconsole.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n```\n\n第一轮事件循环流程分析如下：\n\n1. 整体script作为第一个宏任务进入主线程，遇到console.log，输出1。\n2. 遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。\n3. 遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。\n4. 遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。\n5. 又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。\n\n宏任务Event Queue|微任务Event Queue\n:---------:|:---------:\nsetTimeout1|process1\nsetTimeout2|then1\n\n> 上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。\n\n我们发现了process1和then1两个微任务。\n\n1. 执行process1,输出6。\n2. 执行then1，输出8。\n\n第一轮事件循环正式结束，这一轮的结果是输出`1，7，6，8`。\n\n第二轮时间循环从setTimeout1宏任务开始: \n\n1. 首先输出2。接下来遇到了`process.nextTick()`，同样将其分发到微任务Event Queue中，记为process2。\n2. `new Promise`立即执行输出4，then也分发到微任务Event Queue中，记为then2。\n\n宏任务Event Queue|微任务Event Queue\n:---------:|:---------:\nsetTimeout2|process2\n|then2\n\n第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。\n\n1. 输出3。\n2. 输出5。\n\n第二轮事件循环结束，第二轮输出`2，4，3，5`。\n\n第三轮事件循环开始，此时只剩setTimeout2了，执行。\n\n1. 直接输出9。\n2. 将process.nextTick()分发到微任务Event Queue中。记为process3。\n3. 直接执行new Promise，输出11。\n4. 将then分发到微任务Event Queue中，记为then3。\n\n宏任务Event Queue|微任务Event Queue\n:---------:|:---------:\n|process3\n|then3\n\n第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。\n\n1. 输出10。\n2. 输出12。\n\n第三轮事件循环结束，第三轮输出`9，11，10，12`。\n\n整段代码，共进行了三次事件循环，完整的输出为`1，7，6，8，2，4，3，5，9，11，10，12`。*(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)*\n\n## 其他\n\n### javascript学习路线\n\n![ ](./3.jpg)\n","source":"_posts/javascript-event-queue.md","raw":"---\ntitle: 了解javascript的执行机制\ndate: 2020-08-24 15:19:24\ntags: JavaScript\n---\n\n[参考《这一次，彻底弄懂 JavaScript 执行机制 - 掘金》](https://juejin.im/post/6844903512845860872#heading-0)\n[参考《一次弄懂Event Loop（彻底解决此类面试问题）- 掘金》](https://juejin.im/post/6844903764202094606)\n[参考《2020前端面试必会知识点 - 灰蓝宇墨的文章 - 知乎》](https://zhuanlan.zhihu.com/p/139983258)\n\n## 关于JavaScript的说明\n\nJavaScript是一门**单线程**编程语言, 一切的关于JavaScript的多线程都是单线程模拟出来的\n\n不管是什么新框架新语法糖实现的所谓异步, 其实都是用同步的方法去模拟的\n\n## JavaScript的执行机制\n\nJavaScript的执行机制: **事件循环(Event Loop)**\n\n事件循环是js实现异步的一种方法，也是js的执行机制。\n\n注意区分**执行**和**运行**\n\n## 广义的同步任务和异步任务\n\n1. 同步任务\n2. 异步任务\n\n![ ](./1.png)\n\n简单的文字描述图片中的内容:\n\n- 同步和异步任务分别进入不同的执行\"场所\"，同步的进入主线程，异步的进入**Event Table**并注册函数。\n- 当指定的事情完成时，Event Table会将这个函数移入**Event Queue**。\n- 主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。\n- 上述过程会不断重复，也就是常说的**Event Loop(事件循环)**。\n\n> js引擎存在**monitoring process**进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数\n\n### 示例\n\n参考一下ajax的执行过程\n\n```javascript\nlet data = [];\n$.ajax({\n    url:www.javascript.com,\n    data:data,\n    success:() => {\n        console.log('发送成功!');\n    }\n})\nconsole.log('代码执行结束');\n```\n\n- ajax进入Event Table，注册回调函数success。\n- 执行console.log('代码执行结束')。\n- ajax事件完成，回调函数success进入Event Queue。\n- 主线程从Event Queue读取回调函数success并执行。\n\n### 常用 setTimeout、setInterval 函数\n\n#### setTimeout\n\n平时经常使用`setTimeout`函数定时执行一些业务\n\n```javascript\nsetTimeout(() => {\n    console.log('延时3秒');\n},3000)\n```\n\n随着`setTimeout`的越来越多, 问题也就来了\n\n```javascript\nsetTimeout(() => {\n    console.log('延时3秒');\n},3000);\nconsole.log('---> 执行:console');\n```\n\n输出\n\n```javascript\n// ---> 执行:console\n// 延迟3秒\n```\n\n这个结果是正确的, 但是我们稍微改一下代码\n\n```javascript\nsetTimeout(() => {\n    task()\n},3000);\nsleep(100000); // 这里假设执行业务代码耗时比较长\n```\n\n这个时候执行`task()`输出时间就不止延迟3秒了,\n\n- `task()`进入Event Table并注册,计时开始。\n- 执行`sleep`函数，很慢，非常慢，计时仍在继续。\n- 3秒到了，计时事件timeout完成，`task()`进入Event Queue，但是`sleep`也太慢了吧，还没执行完，只好等着。\n- `sleep`终于执行完了，`task()`终于从Event Queue进入了主线程执行。\n\n`setTimeout`函数的定义是, 函数等待定义的时间之后才进入Event Queue, 又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒\n\n#### setInterval\n\n`setInterval`跟`setTimeout`效果差不多, 区别是`setInterval`会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待.\n\n唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。**一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。**\n\n## 任务还有更精细的定义 宏任务/微任务\n\n1. macro-task(宏任务)：包括整体代码script，setTimeout，setInterval\n2. micro-task(微任务)：Promise，process.nextTick\n\n> 不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。\n\n除了传统的定时器`setInterval`和`setTimeout`外, 我们还要了解的`Promise`和`process.nextTick`\n\n1. `Promise`可以参考[阮一峰老师的Promise讲解](https://es6.ruanyifeng.com/#docs/promise)\n2. `process.nextTick`类似node.js版的`setTimeout`\n\n事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。\n\n举例:\n\n```javascript\nsetTimeout(function() {\n    console.log('setTimeout');\n})\n\nnew Promise(function(resolve) {\n    console.log('promise');\n}).then(function() {\n    console.log('then');\n})\n\nconsole.log('console');\n```\n\n- 这段代码作为宏任务，进入主线程。\n- 先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)\n- 接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。\n- 遇到console.log()，立即执行。\n- 好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。\n- ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。\n- 结束。\n\n关系图\n\n![ ](./2.png)\n\n一段较复杂的javascript代码, 分析一下它的输出\n\n```javascript\nconsole.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n```\n\n第一轮事件循环流程分析如下：\n\n1. 整体script作为第一个宏任务进入主线程，遇到console.log，输出1。\n2. 遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。\n3. 遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。\n4. 遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。\n5. 又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。\n\n宏任务Event Queue|微任务Event Queue\n:---------:|:---------:\nsetTimeout1|process1\nsetTimeout2|then1\n\n> 上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。\n\n我们发现了process1和then1两个微任务。\n\n1. 执行process1,输出6。\n2. 执行then1，输出8。\n\n第一轮事件循环正式结束，这一轮的结果是输出`1，7，6，8`。\n\n第二轮时间循环从setTimeout1宏任务开始: \n\n1. 首先输出2。接下来遇到了`process.nextTick()`，同样将其分发到微任务Event Queue中，记为process2。\n2. `new Promise`立即执行输出4，then也分发到微任务Event Queue中，记为then2。\n\n宏任务Event Queue|微任务Event Queue\n:---------:|:---------:\nsetTimeout2|process2\n|then2\n\n第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。\n\n1. 输出3。\n2. 输出5。\n\n第二轮事件循环结束，第二轮输出`2，4，3，5`。\n\n第三轮事件循环开始，此时只剩setTimeout2了，执行。\n\n1. 直接输出9。\n2. 将process.nextTick()分发到微任务Event Queue中。记为process3。\n3. 直接执行new Promise，输出11。\n4. 将then分发到微任务Event Queue中，记为then3。\n\n宏任务Event Queue|微任务Event Queue\n:---------:|:---------:\n|process3\n|then3\n\n第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。\n\n1. 输出10。\n2. 输出12。\n\n第三轮事件循环结束，第三轮输出`9，11，10，12`。\n\n整段代码，共进行了三次事件循环，完整的输出为`1，7，6，8，2，4，3，5，9，11，10，12`。*(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)*\n\n## 其他\n\n### javascript学习路线\n\n![ ](./3.jpg)\n","slug":"javascript-event-queue","published":1,"updated":"2021-11-04T15:54:07.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihw000pahte8bw7b7l0","content":"<p><a href=\"https://juejin.im/post/6844903512845860872#heading-0\">参考《这一次，彻底弄懂 JavaScript 执行机制 - 掘金》</a><br><a href=\"https://juejin.im/post/6844903764202094606\">参考《一次弄懂Event Loop（彻底解决此类面试问题）- 掘金》</a><br><a href=\"https://zhuanlan.zhihu.com/p/139983258\">参考《2020前端面试必会知识点 - 灰蓝宇墨的文章 - 知乎》</a></p>\n<h2 id=\"关于JavaScript的说明\"><a href=\"#关于JavaScript的说明\" class=\"headerlink\" title=\"关于JavaScript的说明\"></a>关于JavaScript的说明</h2><p>JavaScript是一门<strong>单线程</strong>编程语言, 一切的关于JavaScript的多线程都是单线程模拟出来的</p>\n<p>不管是什么新框架新语法糖实现的所谓异步, 其实都是用同步的方法去模拟的</p>\n<h2 id=\"JavaScript的执行机制\"><a href=\"#JavaScript的执行机制\" class=\"headerlink\" title=\"JavaScript的执行机制\"></a>JavaScript的执行机制</h2><p>JavaScript的执行机制: <strong>事件循环(Event Loop)</strong></p>\n<p>事件循环是js实现异步的一种方法，也是js的执行机制。</p>\n<p>注意区分<strong>执行</strong>和<strong>运行</strong></p>\n<h2 id=\"广义的同步任务和异步任务\"><a href=\"#广义的同步任务和异步任务\" class=\"headerlink\" title=\"广义的同步任务和异步任务\"></a>广义的同步任务和异步任务</h2><ol>\n<li>同步任务</li>\n<li>异步任务</li>\n</ol>\n<p><img src=\"./1.png\" alt=\" \"></p>\n<p>简单的文字描述图片中的内容:</p>\n<ul>\n<li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入<strong>Event Table</strong>并注册函数。</li>\n<li>当指定的事情完成时，Event Table会将这个函数移入<strong>Event Queue</strong>。</li>\n<li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li>\n<li>上述过程会不断重复，也就是常说的**Event Loop(事件循环)**。</li>\n</ul>\n<blockquote>\n<p>js引擎存在<strong>monitoring process</strong>进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>参考一下ajax的执行过程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = [];</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:www.javascript.com,</span><br><span class=\"line\">    data:data,</span><br><span class=\"line\">    success:<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送成功!&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;代码执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ajax进入Event Table，注册回调函数success。</li>\n<li>执行console.log(‘代码执行结束’)。</li>\n<li>ajax事件完成，回调函数success进入Event Queue。</li>\n<li>主线程从Event Queue读取回调函数success并执行。</li>\n</ul>\n<h3 id=\"常用-setTimeout、setInterval-函数\"><a href=\"#常用-setTimeout、setInterval-函数\" class=\"headerlink\" title=\"常用 setTimeout、setInterval 函数\"></a>常用 setTimeout、setInterval 函数</h3><h4 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h4><p>平时经常使用<code>setTimeout</code>函数定时执行一些业务</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;延时3秒&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>随着<code>setTimeout</code>的越来越多, 问题也就来了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;延时3秒&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;---&gt; 执行:console&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ---&gt; 执行:console</span></span><br><span class=\"line\"><span class=\"comment\">// 延迟3秒</span></span><br></pre></td></tr></table></figure>\n\n<p>这个结果是正确的, 但是我们稍微改一下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    task()</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">sleep(<span class=\"number\">100000</span>); <span class=\"comment\">// 这里假设执行业务代码耗时比较长</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候执行<code>task()</code>输出时间就不止延迟3秒了,</p>\n<ul>\n<li><code>task()</code>进入Event Table并注册,计时开始。</li>\n<li>执行<code>sleep</code>函数，很慢，非常慢，计时仍在继续。</li>\n<li>3秒到了，计时事件timeout完成，<code>task()</code>进入Event Queue，但是<code>sleep</code>也太慢了吧，还没执行完，只好等着。</li>\n<li><code>sleep</code>终于执行完了，<code>task()</code>终于从Event Queue进入了主线程执行。</li>\n</ul>\n<p><code>setTimeout</code>函数的定义是, 函数等待定义的时间之后才进入Event Queue, 又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒</p>\n<h4 id=\"setInterval\"><a href=\"#setInterval\" class=\"headerlink\" title=\"setInterval\"></a>setInterval</h4><p><code>setInterval</code>跟<code>setTimeout</code>效果差不多, 区别是<code>setInterval</code>会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待.</p>\n<p>唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。<strong>一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。</strong></p>\n<h2 id=\"任务还有更精细的定义-宏任务-微任务\"><a href=\"#任务还有更精细的定义-宏任务-微任务\" class=\"headerlink\" title=\"任务还有更精细的定义 宏任务/微任务\"></a>任务还有更精细的定义 宏任务/微任务</h2><ol>\n<li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</li>\n<li>micro-task(微任务)：Promise，process.nextTick</li>\n</ol>\n<blockquote>\n<p>不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。</p>\n</blockquote>\n<p>除了传统的定时器<code>setInterval</code>和<code>setTimeout</code>外, 我们还要了解的<code>Promise</code>和<code>process.nextTick</code></p>\n<ol>\n<li><code>Promise</code>可以参考<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰老师的Promise讲解</a></li>\n<li><code>process.nextTick</code>类似node.js版的<code>setTimeout</code></li>\n</ol>\n<p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p>\n<p>举例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise&#x27;</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;then&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;console&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这段代码作为宏任务，进入主线程。</li>\n<li>先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li>\n<li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。</li>\n<li>遇到console.log()，立即执行。</li>\n<li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。</li>\n<li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。</li>\n<li>结束。</li>\n</ul>\n<p>关系图</p>\n<p><img src=\"./2.png\" alt=\" \"></p>\n<p>一段较复杂的javascript代码, 分析一下它的输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7&#x27;</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;11&#x27;</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>第一轮事件循环流程分析如下：</p>\n<ol>\n<li>整体script作为第一个宏任务进入主线程，遇到console.log，输出1。</li>\n<li>遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。</li>\n<li>遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。</li>\n<li>遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。</li>\n<li>又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">宏任务Event Queue</th>\n<th align=\"center\">微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">setTimeout1</td>\n<td align=\"center\">process1</td>\n</tr>\n<tr>\n<td align=\"center\">setTimeout2</td>\n<td align=\"center\">then1</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。</p>\n</blockquote>\n<p>我们发现了process1和then1两个微任务。</p>\n<ol>\n<li>执行process1,输出6。</li>\n<li>执行then1，输出8。</li>\n</ol>\n<p>第一轮事件循环正式结束，这一轮的结果是输出<code>1，7，6，8</code>。</p>\n<p>第二轮时间循环从setTimeout1宏任务开始: </p>\n<ol>\n<li>首先输出2。接下来遇到了<code>process.nextTick()</code>，同样将其分发到微任务Event Queue中，记为process2。</li>\n<li><code>new Promise</code>立即执行输出4，then也分发到微任务Event Queue中，记为then2。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">宏任务Event Queue</th>\n<th align=\"center\">微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">setTimeout2</td>\n<td align=\"center\">process2</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">then2</td>\n</tr>\n</tbody></table>\n<p>第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。</p>\n<ol>\n<li>输出3。</li>\n<li>输出5。</li>\n</ol>\n<p>第二轮事件循环结束，第二轮输出<code>2，4，3，5</code>。</p>\n<p>第三轮事件循环开始，此时只剩setTimeout2了，执行。</p>\n<ol>\n<li>直接输出9。</li>\n<li>将process.nextTick()分发到微任务Event Queue中。记为process3。</li>\n<li>直接执行new Promise，输出11。</li>\n<li>将then分发到微任务Event Queue中，记为then3。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">宏任务Event Queue</th>\n<th align=\"center\">微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"></td>\n<td align=\"center\">process3</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">then3</td>\n</tr>\n</tbody></table>\n<p>第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。</p>\n<ol>\n<li>输出10。</li>\n<li>输出12。</li>\n</ol>\n<p>第三轮事件循环结束，第三轮输出<code>9，11，10，12</code>。</p>\n<p>整段代码，共进行了三次事件循环，完整的输出为<code>1，7，6，8，2，4，3，5，9，11，10，12</code>。*(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)*</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"javascript学习路线\"><a href=\"#javascript学习路线\" class=\"headerlink\" title=\"javascript学习路线\"></a>javascript学习路线</h3><p><img src=\"./3.jpg\" alt=\" \"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://juejin.im/post/6844903512845860872#heading-0\">参考《这一次，彻底弄懂 JavaScript 执行机制 - 掘金》</a><br><a href=\"https://juejin.im/post/6844903764202094606\">参考《一次弄懂Event Loop（彻底解决此类面试问题）- 掘金》</a><br><a href=\"https://zhuanlan.zhihu.com/p/139983258\">参考《2020前端面试必会知识点 - 灰蓝宇墨的文章 - 知乎》</a></p>\n<h2 id=\"关于JavaScript的说明\"><a href=\"#关于JavaScript的说明\" class=\"headerlink\" title=\"关于JavaScript的说明\"></a>关于JavaScript的说明</h2><p>JavaScript是一门<strong>单线程</strong>编程语言, 一切的关于JavaScript的多线程都是单线程模拟出来的</p>\n<p>不管是什么新框架新语法糖实现的所谓异步, 其实都是用同步的方法去模拟的</p>\n<h2 id=\"JavaScript的执行机制\"><a href=\"#JavaScript的执行机制\" class=\"headerlink\" title=\"JavaScript的执行机制\"></a>JavaScript的执行机制</h2><p>JavaScript的执行机制: <strong>事件循环(Event Loop)</strong></p>\n<p>事件循环是js实现异步的一种方法，也是js的执行机制。</p>\n<p>注意区分<strong>执行</strong>和<strong>运行</strong></p>\n<h2 id=\"广义的同步任务和异步任务\"><a href=\"#广义的同步任务和异步任务\" class=\"headerlink\" title=\"广义的同步任务和异步任务\"></a>广义的同步任务和异步任务</h2><ol>\n<li>同步任务</li>\n<li>异步任务</li>\n</ol>\n<p><img src=\"./1.png\" alt=\" \"></p>\n<p>简单的文字描述图片中的内容:</p>\n<ul>\n<li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入<strong>Event Table</strong>并注册函数。</li>\n<li>当指定的事情完成时，Event Table会将这个函数移入<strong>Event Queue</strong>。</li>\n<li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li>\n<li>上述过程会不断重复，也就是常说的**Event Loop(事件循环)**。</li>\n</ul>\n<blockquote>\n<p>js引擎存在<strong>monitoring process</strong>进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>参考一下ajax的执行过程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = [];</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:www.javascript.com,</span><br><span class=\"line\">    data:data,</span><br><span class=\"line\">    success:<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送成功!&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;代码执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ajax进入Event Table，注册回调函数success。</li>\n<li>执行console.log(‘代码执行结束’)。</li>\n<li>ajax事件完成，回调函数success进入Event Queue。</li>\n<li>主线程从Event Queue读取回调函数success并执行。</li>\n</ul>\n<h3 id=\"常用-setTimeout、setInterval-函数\"><a href=\"#常用-setTimeout、setInterval-函数\" class=\"headerlink\" title=\"常用 setTimeout、setInterval 函数\"></a>常用 setTimeout、setInterval 函数</h3><h4 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h4><p>平时经常使用<code>setTimeout</code>函数定时执行一些业务</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;延时3秒&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>随着<code>setTimeout</code>的越来越多, 问题也就来了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;延时3秒&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;---&gt; 执行:console&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ---&gt; 执行:console</span></span><br><span class=\"line\"><span class=\"comment\">// 延迟3秒</span></span><br></pre></td></tr></table></figure>\n\n<p>这个结果是正确的, 但是我们稍微改一下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    task()</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">sleep(<span class=\"number\">100000</span>); <span class=\"comment\">// 这里假设执行业务代码耗时比较长</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候执行<code>task()</code>输出时间就不止延迟3秒了,</p>\n<ul>\n<li><code>task()</code>进入Event Table并注册,计时开始。</li>\n<li>执行<code>sleep</code>函数，很慢，非常慢，计时仍在继续。</li>\n<li>3秒到了，计时事件timeout完成，<code>task()</code>进入Event Queue，但是<code>sleep</code>也太慢了吧，还没执行完，只好等着。</li>\n<li><code>sleep</code>终于执行完了，<code>task()</code>终于从Event Queue进入了主线程执行。</li>\n</ul>\n<p><code>setTimeout</code>函数的定义是, 函数等待定义的时间之后才进入Event Queue, 又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒</p>\n<h4 id=\"setInterval\"><a href=\"#setInterval\" class=\"headerlink\" title=\"setInterval\"></a>setInterval</h4><p><code>setInterval</code>跟<code>setTimeout</code>效果差不多, 区别是<code>setInterval</code>会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待.</p>\n<p>唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。<strong>一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。</strong></p>\n<h2 id=\"任务还有更精细的定义-宏任务-微任务\"><a href=\"#任务还有更精细的定义-宏任务-微任务\" class=\"headerlink\" title=\"任务还有更精细的定义 宏任务/微任务\"></a>任务还有更精细的定义 宏任务/微任务</h2><ol>\n<li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</li>\n<li>micro-task(微任务)：Promise，process.nextTick</li>\n</ol>\n<blockquote>\n<p>不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。</p>\n</blockquote>\n<p>除了传统的定时器<code>setInterval</code>和<code>setTimeout</code>外, 我们还要了解的<code>Promise</code>和<code>process.nextTick</code></p>\n<ol>\n<li><code>Promise</code>可以参考<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰老师的Promise讲解</a></li>\n<li><code>process.nextTick</code>类似node.js版的<code>setTimeout</code></li>\n</ol>\n<p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p>\n<p>举例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise&#x27;</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;then&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;console&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这段代码作为宏任务，进入主线程。</li>\n<li>先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li>\n<li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。</li>\n<li>遇到console.log()，立即执行。</li>\n<li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。</li>\n<li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。</li>\n<li>结束。</li>\n</ul>\n<p>关系图</p>\n<p><img src=\"./2.png\" alt=\" \"></p>\n<p>一段较复杂的javascript代码, 分析一下它的输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7&#x27;</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;11&#x27;</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>第一轮事件循环流程分析如下：</p>\n<ol>\n<li>整体script作为第一个宏任务进入主线程，遇到console.log，输出1。</li>\n<li>遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。</li>\n<li>遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。</li>\n<li>遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。</li>\n<li>又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">宏任务Event Queue</th>\n<th align=\"center\">微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">setTimeout1</td>\n<td align=\"center\">process1</td>\n</tr>\n<tr>\n<td align=\"center\">setTimeout2</td>\n<td align=\"center\">then1</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。</p>\n</blockquote>\n<p>我们发现了process1和then1两个微任务。</p>\n<ol>\n<li>执行process1,输出6。</li>\n<li>执行then1，输出8。</li>\n</ol>\n<p>第一轮事件循环正式结束，这一轮的结果是输出<code>1，7，6，8</code>。</p>\n<p>第二轮时间循环从setTimeout1宏任务开始: </p>\n<ol>\n<li>首先输出2。接下来遇到了<code>process.nextTick()</code>，同样将其分发到微任务Event Queue中，记为process2。</li>\n<li><code>new Promise</code>立即执行输出4，then也分发到微任务Event Queue中，记为then2。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">宏任务Event Queue</th>\n<th align=\"center\">微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">setTimeout2</td>\n<td align=\"center\">process2</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">then2</td>\n</tr>\n</tbody></table>\n<p>第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。</p>\n<ol>\n<li>输出3。</li>\n<li>输出5。</li>\n</ol>\n<p>第二轮事件循环结束，第二轮输出<code>2，4，3，5</code>。</p>\n<p>第三轮事件循环开始，此时只剩setTimeout2了，执行。</p>\n<ol>\n<li>直接输出9。</li>\n<li>将process.nextTick()分发到微任务Event Queue中。记为process3。</li>\n<li>直接执行new Promise，输出11。</li>\n<li>将then分发到微任务Event Queue中，记为then3。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">宏任务Event Queue</th>\n<th align=\"center\">微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"></td>\n<td align=\"center\">process3</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">then3</td>\n</tr>\n</tbody></table>\n<p>第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。</p>\n<ol>\n<li>输出10。</li>\n<li>输出12。</li>\n</ol>\n<p>第三轮事件循环结束，第三轮输出<code>9，11，10，12</code>。</p>\n<p>整段代码，共进行了三次事件循环，完整的输出为<code>1，7，6，8，2，4，3，5，9，11，10，12</code>。*(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)*</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"javascript学习路线\"><a href=\"#javascript学习路线\" class=\"headerlink\" title=\"javascript学习路线\"></a>javascript学习路线</h3><p><img src=\"./3.jpg\" alt=\" \"></p>\n"},{"title":"Markdown学习","date":"2019-04-26T07:18:49.000Z","_content":"\n这个网站都是所有的文章都是使用 Markdown 编写的,所以我们有必要了解一下 Markdown 的基本语法\n\n## 我们需要了解的\n\n1. Markdown 是什么\n2. 为什么要用 Markdown\n3. 怎么使用 Markdown 基本语法\n4. 总结\n\n### 什么是 Markdown\n\n* Markdown 是一个简单的标记语言,通过**简单的**几个标记使得普通文本文字具有一定的格式,用来写博客再好不过了.\n\n### 为什么要用 Markdown\n\n* **上手快**,语法简单 只需要记住几个符号就能上手了.\n* Markdwon 有着 易读、易写、易更改 等特点\n* Markdwon 最终是被编译成 HTML 代码执行的\n* Markdwon 支持原生html代码, 如: <span style=\"color: red; font-size: 18px;\">Markdwon 支持原生html代码 (红色 18px 字体)</span>\n\n### Markdown 的基本语法\n\n#### 标题标签 (#、=、-)\n\n>两种形式:使用 # 符号代表1-6级标题标签, **个数**为级别;  使用 =、- 代表 一、二级标签\n\n```\n# 一级标题<h1>\n## 二级标题 <h2>\n### 三级标题 <h3>\n#### 四级标题 <h4>\n##### 五级标题 <h5>\n```\n\n#### 段落标签 (>)\n\n> 段落(引用)标签 符号与内容之间要有空格, 单个为主,内嵌几层就打几个 **>**    (ps:貌似可以一致打下去)\n>> 内嵌1     >> 内嵌1\n>>> 内嵌2    >>> 内嵌2\n>>>> 内嵌3   >>>> 内嵌3\n\n#### 字体属性\n\n```\n* **字体加粗**  给字体加粗,在字体左右各加两个 *\n* *斜体字*  使文字倾斜,在文字左右各加一个 *\n* ***斜体加粗***  要使文字加粗、倾斜,在文字左右各加三个 *\n* ~~加删除线的文字~~ 左右各 两个 ~\n```\n\n* **字体加粗**  给字体加粗,在字体左右各加两个 *\n* *斜体字*  使文字倾斜,在文字左右各加一个 *\n* ***斜体加粗***  要使文字加粗、倾斜,在文字左右各加三个 *\n* ~~加删除线的文字~~ 左右各 两个 ~\n\n#### 分割线 (-、*)\n\n> 三个(-、*)及三个以上符号即可\n\n效果如下:\n\n```\n---\n***\n* * *\n```\n\n符号(-)分割线\n\n---\n\n符号(*)分割线\n\n******\n\n#### 图片\n\n基本语法\n\n```sh\n![图片语法](https://images.jzwyz.com/blog/tpurl.png \"这是对图片语法的说明图\")\n![图片alt](https://images.jzwyz.com/blog/1.jpg \"图片title\")\n![链接语法](https://images.jzwyz.com/blog/urlsm.png \"链接语法说明\")\n```\n\n效果:\n\n![图片语法](https://images.jzwyz.com/blog/tpurl.png \"这是对图片语法的说明图\")\n\n![图片alt](https://images.jzwyz.com/blog/1.jpg \"图片title\")\n\n![链接语法](https://images.jzwyz.com/blog/urlsm.png \"链接语法说明\")\n\n> 图片alt 显示在图片下方\n> 图片title 就是图片描述,当鼠标移到图片上时显示的内容。title可加可不加 title与url之间以 空格 隔开\n\n#### 链接\n\n与图片语法类似, 开始 不要 ! 符号\n\n```sh\n[百度](https://www.baidu.com \"百度一下\")\n[Github](https://www.github.com \"去Github\")\n```\n\n[百度](https://www.baidu.com \"百度一下\")\n\n[Github](https://www.github.com \"去Github\")\n\n#### 列表\n\n```md\n1. 有序列表\n2. 有序列表\n3. 有序列表\n\n* 无序列表 *\n  + 无序列表 +\n    - 无序列表 -\n  + 无序列白\n* 无序列表\n```\n\n效果:\n\n1. 有序列表\n2. 有序列表\n3. 有序列表\n\n* 无序列表 *\n  + 无序列表 +\n    - 无序列表 -\n  + 无序列白\n* 无序列表\n\n> 列表 分为无序和有序,其语法区别就是 有序列表以**数字.**为符号 序号和内容之间空格分开\n\n> 无序列表 有 (*、+、-) 三个符号, 使用多个时,最顶层应使用 *,次级使用 +,再次级使用 -\n\n> 列表嵌套 下级与上级换行,缩进三个空格\n\n#### 表格\n\n示列 md 代码:\n\n```sh\n列名|列名|列名\n--|:-:|:--—\n内容|内|内容呀\n```\n\n第一行 | 符号分格列名\n\n第二行 - 代码该列中一个字符,一般设置为该列最长字符数量, : 放在 - 哪边就表示 该列字段向:对齐, | 符号分隔列\n  \n再往下,就是每列的数据列\n\n编号|姓名|性别|年龄\n--:|:---:|-:|:--\n01|小明|男|12\n02|小小红|女|15\n\n#### 代码块语法\n\n效果如下:\n\n```sh\n 这是代码块\n```\n\n`这是代码行`\n\n```bash\n# 指定 语言\ndocker run -d --rm -v ~/../workspace/my-blog/source:/app/source --network=app-bridge --name=webblog myblog:1.0\n```\n\n```node\nnode --version\n```\n\n![代码块语法](https://images.jzwyz.com/blog/dmkyf.png \"代码块语法\")","source":"_posts/markdown.md","raw":"---\ntitle: Markdown学习\ndate: 2019-04-26 15:18:49\ntags: 基础\n---\n\n这个网站都是所有的文章都是使用 Markdown 编写的,所以我们有必要了解一下 Markdown 的基本语法\n\n## 我们需要了解的\n\n1. Markdown 是什么\n2. 为什么要用 Markdown\n3. 怎么使用 Markdown 基本语法\n4. 总结\n\n### 什么是 Markdown\n\n* Markdown 是一个简单的标记语言,通过**简单的**几个标记使得普通文本文字具有一定的格式,用来写博客再好不过了.\n\n### 为什么要用 Markdown\n\n* **上手快**,语法简单 只需要记住几个符号就能上手了.\n* Markdwon 有着 易读、易写、易更改 等特点\n* Markdwon 最终是被编译成 HTML 代码执行的\n* Markdwon 支持原生html代码, 如: <span style=\"color: red; font-size: 18px;\">Markdwon 支持原生html代码 (红色 18px 字体)</span>\n\n### Markdown 的基本语法\n\n#### 标题标签 (#、=、-)\n\n>两种形式:使用 # 符号代表1-6级标题标签, **个数**为级别;  使用 =、- 代表 一、二级标签\n\n```\n# 一级标题<h1>\n## 二级标题 <h2>\n### 三级标题 <h3>\n#### 四级标题 <h4>\n##### 五级标题 <h5>\n```\n\n#### 段落标签 (>)\n\n> 段落(引用)标签 符号与内容之间要有空格, 单个为主,内嵌几层就打几个 **>**    (ps:貌似可以一致打下去)\n>> 内嵌1     >> 内嵌1\n>>> 内嵌2    >>> 内嵌2\n>>>> 内嵌3   >>>> 内嵌3\n\n#### 字体属性\n\n```\n* **字体加粗**  给字体加粗,在字体左右各加两个 *\n* *斜体字*  使文字倾斜,在文字左右各加一个 *\n* ***斜体加粗***  要使文字加粗、倾斜,在文字左右各加三个 *\n* ~~加删除线的文字~~ 左右各 两个 ~\n```\n\n* **字体加粗**  给字体加粗,在字体左右各加两个 *\n* *斜体字*  使文字倾斜,在文字左右各加一个 *\n* ***斜体加粗***  要使文字加粗、倾斜,在文字左右各加三个 *\n* ~~加删除线的文字~~ 左右各 两个 ~\n\n#### 分割线 (-、*)\n\n> 三个(-、*)及三个以上符号即可\n\n效果如下:\n\n```\n---\n***\n* * *\n```\n\n符号(-)分割线\n\n---\n\n符号(*)分割线\n\n******\n\n#### 图片\n\n基本语法\n\n```sh\n![图片语法](https://images.jzwyz.com/blog/tpurl.png \"这是对图片语法的说明图\")\n![图片alt](https://images.jzwyz.com/blog/1.jpg \"图片title\")\n![链接语法](https://images.jzwyz.com/blog/urlsm.png \"链接语法说明\")\n```\n\n效果:\n\n![图片语法](https://images.jzwyz.com/blog/tpurl.png \"这是对图片语法的说明图\")\n\n![图片alt](https://images.jzwyz.com/blog/1.jpg \"图片title\")\n\n![链接语法](https://images.jzwyz.com/blog/urlsm.png \"链接语法说明\")\n\n> 图片alt 显示在图片下方\n> 图片title 就是图片描述,当鼠标移到图片上时显示的内容。title可加可不加 title与url之间以 空格 隔开\n\n#### 链接\n\n与图片语法类似, 开始 不要 ! 符号\n\n```sh\n[百度](https://www.baidu.com \"百度一下\")\n[Github](https://www.github.com \"去Github\")\n```\n\n[百度](https://www.baidu.com \"百度一下\")\n\n[Github](https://www.github.com \"去Github\")\n\n#### 列表\n\n```md\n1. 有序列表\n2. 有序列表\n3. 有序列表\n\n* 无序列表 *\n  + 无序列表 +\n    - 无序列表 -\n  + 无序列白\n* 无序列表\n```\n\n效果:\n\n1. 有序列表\n2. 有序列表\n3. 有序列表\n\n* 无序列表 *\n  + 无序列表 +\n    - 无序列表 -\n  + 无序列白\n* 无序列表\n\n> 列表 分为无序和有序,其语法区别就是 有序列表以**数字.**为符号 序号和内容之间空格分开\n\n> 无序列表 有 (*、+、-) 三个符号, 使用多个时,最顶层应使用 *,次级使用 +,再次级使用 -\n\n> 列表嵌套 下级与上级换行,缩进三个空格\n\n#### 表格\n\n示列 md 代码:\n\n```sh\n列名|列名|列名\n--|:-:|:--—\n内容|内|内容呀\n```\n\n第一行 | 符号分格列名\n\n第二行 - 代码该列中一个字符,一般设置为该列最长字符数量, : 放在 - 哪边就表示 该列字段向:对齐, | 符号分隔列\n  \n再往下,就是每列的数据列\n\n编号|姓名|性别|年龄\n--:|:---:|-:|:--\n01|小明|男|12\n02|小小红|女|15\n\n#### 代码块语法\n\n效果如下:\n\n```sh\n 这是代码块\n```\n\n`这是代码行`\n\n```bash\n# 指定 语言\ndocker run -d --rm -v ~/../workspace/my-blog/source:/app/source --network=app-bridge --name=webblog myblog:1.0\n```\n\n```node\nnode --version\n```\n\n![代码块语法](https://images.jzwyz.com/blog/dmkyf.png \"代码块语法\")","slug":"markdown","published":1,"updated":"2021-11-04T15:54:07.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihx000rahte65ycd1ui","content":"<p>这个网站都是所有的文章都是使用 Markdown 编写的,所以我们有必要了解一下 Markdown 的基本语法</p>\n<h2 id=\"我们需要了解的\"><a href=\"#我们需要了解的\" class=\"headerlink\" title=\"我们需要了解的\"></a>我们需要了解的</h2><ol>\n<li>Markdown 是什么</li>\n<li>为什么要用 Markdown</li>\n<li>怎么使用 Markdown 基本语法</li>\n<li>总结</li>\n</ol>\n<h3 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h3><ul>\n<li>Markdown 是一个简单的标记语言,通过<strong>简单的</strong>几个标记使得普通文本文字具有一定的格式,用来写博客再好不过了.</li>\n</ul>\n<h3 id=\"为什么要用-Markdown\"><a href=\"#为什么要用-Markdown\" class=\"headerlink\" title=\"为什么要用 Markdown\"></a>为什么要用 Markdown</h3><ul>\n<li><strong>上手快</strong>,语法简单 只需要记住几个符号就能上手了.</li>\n<li>Markdwon 有着 易读、易写、易更改 等特点</li>\n<li>Markdwon 最终是被编译成 HTML 代码执行的</li>\n<li>Markdwon 支持原生html代码, 如: <span style=\"color: red; font-size: 18px;\">Markdwon 支持原生html代码 (红色 18px 字体)</span></li>\n</ul>\n<h3 id=\"Markdown-的基本语法\"><a href=\"#Markdown-的基本语法\" class=\"headerlink\" title=\"Markdown 的基本语法\"></a>Markdown 的基本语法</h3><h4 id=\"标题标签-、-、\"><a href=\"#标题标签-、-、\" class=\"headerlink\" title=\"标题标签 (#、=、-)\"></a>标题标签 (#、=、-)</h4><blockquote>\n<p>两种形式:使用 # 符号代表1-6级标题标签, <strong>个数</strong>为级别;  使用 =、- 代表 一、二级标签</p>\n</blockquote>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题&lt;h1&gt;</span><br><span class=\"line\">## 二级标题 &lt;h2&gt;</span><br><span class=\"line\">### 三级标题 &lt;h3&gt;</span><br><span class=\"line\">#### 四级标题 &lt;h4&gt;</span><br><span class=\"line\">##### 五级标题 &lt;h5&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"段落标签-gt\"><a href=\"#段落标签-gt\" class=\"headerlink\" title=\"段落标签 (&gt;)\"></a>段落标签 (&gt;)</h4><blockquote>\n<p>段落(引用)标签 符号与内容之间要有空格, 单个为主,内嵌几层就打几个 <strong>&gt;</strong>    (ps:貌似可以一致打下去)</p>\n<blockquote>\n<p>内嵌1     &gt;&gt; 内嵌1</p>\n<blockquote>\n<p>内嵌2    &gt;&gt;&gt; 内嵌2</p>\n<blockquote>\n<p>内嵌3   &gt;&gt;&gt;&gt; 内嵌3</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"字体属性\"><a href=\"#字体属性\" class=\"headerlink\" title=\"字体属性\"></a>字体属性</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">* </span>*<span class=\"strong\">*字体加粗*</span>*  给字体加粗,在字体左右各加两个 <span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> <span class=\"strong\">*斜体字*</span>  使文字倾斜,在文字左右各加一个 <span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> **<span class=\"strong\">*斜体加粗*</span>**  要使文字加粗、倾斜,在文字左右各加三个 <span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> ~~加删除线的文字~~ 左右各 两个 ~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>字体加粗</strong>  给字体加粗,在字体左右各加两个 *</li>\n<li><em>斜体字</em>  使文字倾斜,在文字左右各加一个 *</li>\n<li><strong><em>斜体加粗</em></strong>  要使文字加粗、倾斜,在文字左右各加三个 *</li>\n<li><del>加删除线的文字</del> 左右各 两个 ~</li>\n</ul>\n<h4 id=\"分割线-、\"><a href=\"#分割线-、\" class=\"headerlink\" title=\"分割线 (-、*)\"></a>分割线 (-、*)</h4><blockquote>\n<p>三个(-、*)及三个以上符号即可</p>\n</blockquote>\n<p>效果如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">***</span></span><br><span class=\"line\"><span class=\"string\">*</span> <span class=\"string\">*</span> <span class=\"string\">*</span></span><br></pre></td></tr></table></figure>\n\n<p>符号(-)分割线</p>\n<hr>\n<p>符号(*)分割线</p>\n<hr>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><p>基本语法</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片语法](https://images.jzwyz.com/blog/tpurl.png <span class=\"string\">&quot;这是对图片语法的说明图&quot;</span>)</span><br><span class=\"line\">![图片alt](https://images.jzwyz.com/blog/1.jpg <span class=\"string\">&quot;图片title&quot;</span>)</span><br><span class=\"line\">![链接语法](https://images.jzwyz.com/blog/urlsm.png <span class=\"string\">&quot;链接语法说明&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>效果:</p>\n<p><img src=\"https://images.jzwyz.com/blog/tpurl.png\" alt=\"图片语法\" title=\"这是对图片语法的说明图\"></p>\n<p><img src=\"https://images.jzwyz.com/blog/1.jpg\" alt=\"图片alt\" title=\"图片title\"></p>\n<p><img src=\"https://images.jzwyz.com/blog/urlsm.png\" alt=\"链接语法\" title=\"链接语法说明\"></p>\n<blockquote>\n<p>图片alt 显示在图片下方<br>图片title 就是图片描述,当鼠标移到图片上时显示的内容。title可加可不加 title与url之间以 空格 隔开</p>\n</blockquote>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>与图片语法类似, 开始 不要 ! 符号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[百度](https://www.baidu.com <span class=\"string\">&quot;百度一下&quot;</span>)</span><br><span class=\"line\">[Github](https://www.github.com <span class=\"string\">&quot;去Github&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.baidu.com/\" title=\"百度一下\">百度</a></p>\n<p><a href=\"https://www.github.com/\" title=\"去Github\">Github</a></p>\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 有序列表</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 有序列表</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 有序列表</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*</span> 无序列表 <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\">  + 无序列表 +</span></span><br><span class=\"line\"><span class=\"emphasis\">    - 无序列表 -</span></span><br><span class=\"line\"><span class=\"emphasis\">  + 无序列白</span></span><br><span class=\"line\"><span class=\"emphasis\">*</span> 无序列表</span><br></pre></td></tr></table></figure>\n\n<p>效果:</p>\n<ol>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n</ol>\n<ul>\n<li>无序列表 *<ul>\n<li>无序列表 +<ul>\n<li>无序列表 -</li>\n</ul>\n</li>\n<li>无序列白</li>\n</ul>\n</li>\n<li>无序列表</li>\n</ul>\n<blockquote>\n<p>列表 分为无序和有序,其语法区别就是 有序列表以**数字.**为符号 序号和内容之间空格分开</p>\n</blockquote>\n<blockquote>\n<p>无序列表 有 (*、+、-) 三个符号, 使用多个时,最顶层应使用 *,次级使用 +,再次级使用 -</p>\n</blockquote>\n<blockquote>\n<p>列表嵌套 下级与上级换行,缩进三个空格</p>\n</blockquote>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><p>示列 md 代码:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列名|列名|列名</span><br><span class=\"line\">--|:-:|:--—</span><br><span class=\"line\">内容|内|内容呀</span><br></pre></td></tr></table></figure>\n\n<p>第一行 | 符号分格列名</p>\n<p>第二行 - 代码该列中一个字符,一般设置为该列最长字符数量, : 放在 - 哪边就表示 该列字段向:对齐, | 符号分隔列</p>\n<p>再往下,就是每列的数据列</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">编号</th>\n<th align=\"center\">姓名</th>\n<th align=\"right\">性别</th>\n<th align=\"left\">年龄</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">01</td>\n<td align=\"center\">小明</td>\n<td align=\"right\">男</td>\n<td align=\"left\">12</td>\n</tr>\n<tr>\n<td align=\"right\">02</td>\n<td align=\"center\">小小红</td>\n<td align=\"right\">女</td>\n<td align=\"left\">15</td>\n</tr>\n</tbody></table>\n<h4 id=\"代码块语法\"><a href=\"#代码块语法\" class=\"headerlink\" title=\"代码块语法\"></a>代码块语法</h4><p>效果如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是代码块</span><br></pre></td></tr></table></figure>\n\n<p><code>这是代码行</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定 语言</span></span><br><span class=\"line\">docker run -d --rm -v ~/../workspace/my-blog/<span class=\"built_in\">source</span>:/app/<span class=\"built_in\">source</span> --network=app-bridge --name=webblog myblog:1.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://images.jzwyz.com/blog/dmkyf.png\" alt=\"代码块语法\" title=\"代码块语法\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个网站都是所有的文章都是使用 Markdown 编写的,所以我们有必要了解一下 Markdown 的基本语法</p>\n<h2 id=\"我们需要了解的\"><a href=\"#我们需要了解的\" class=\"headerlink\" title=\"我们需要了解的\"></a>我们需要了解的</h2><ol>\n<li>Markdown 是什么</li>\n<li>为什么要用 Markdown</li>\n<li>怎么使用 Markdown 基本语法</li>\n<li>总结</li>\n</ol>\n<h3 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h3><ul>\n<li>Markdown 是一个简单的标记语言,通过<strong>简单的</strong>几个标记使得普通文本文字具有一定的格式,用来写博客再好不过了.</li>\n</ul>\n<h3 id=\"为什么要用-Markdown\"><a href=\"#为什么要用-Markdown\" class=\"headerlink\" title=\"为什么要用 Markdown\"></a>为什么要用 Markdown</h3><ul>\n<li><strong>上手快</strong>,语法简单 只需要记住几个符号就能上手了.</li>\n<li>Markdwon 有着 易读、易写、易更改 等特点</li>\n<li>Markdwon 最终是被编译成 HTML 代码执行的</li>\n<li>Markdwon 支持原生html代码, 如: <span style=\"color: red; font-size: 18px;\">Markdwon 支持原生html代码 (红色 18px 字体)</span></li>\n</ul>\n<h3 id=\"Markdown-的基本语法\"><a href=\"#Markdown-的基本语法\" class=\"headerlink\" title=\"Markdown 的基本语法\"></a>Markdown 的基本语法</h3><h4 id=\"标题标签-、-、\"><a href=\"#标题标签-、-、\" class=\"headerlink\" title=\"标题标签 (#、=、-)\"></a>标题标签 (#、=、-)</h4><blockquote>\n<p>两种形式:使用 # 符号代表1-6级标题标签, <strong>个数</strong>为级别;  使用 =、- 代表 一、二级标签</p>\n</blockquote>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题&lt;h1&gt;</span><br><span class=\"line\">## 二级标题 &lt;h2&gt;</span><br><span class=\"line\">### 三级标题 &lt;h3&gt;</span><br><span class=\"line\">#### 四级标题 &lt;h4&gt;</span><br><span class=\"line\">##### 五级标题 &lt;h5&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"段落标签-gt\"><a href=\"#段落标签-gt\" class=\"headerlink\" title=\"段落标签 (&gt;)\"></a>段落标签 (&gt;)</h4><blockquote>\n<p>段落(引用)标签 符号与内容之间要有空格, 单个为主,内嵌几层就打几个 <strong>&gt;</strong>    (ps:貌似可以一致打下去)</p>\n<blockquote>\n<p>内嵌1     &gt;&gt; 内嵌1</p>\n<blockquote>\n<p>内嵌2    &gt;&gt;&gt; 内嵌2</p>\n<blockquote>\n<p>内嵌3   &gt;&gt;&gt;&gt; 内嵌3</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"字体属性\"><a href=\"#字体属性\" class=\"headerlink\" title=\"字体属性\"></a>字体属性</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">* </span>*<span class=\"strong\">*字体加粗*</span>*  给字体加粗,在字体左右各加两个 <span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> <span class=\"strong\">*斜体字*</span>  使文字倾斜,在文字左右各加一个 <span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> **<span class=\"strong\">*斜体加粗*</span>**  要使文字加粗、倾斜,在文字左右各加三个 <span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> ~~加删除线的文字~~ 左右各 两个 ~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>字体加粗</strong>  给字体加粗,在字体左右各加两个 *</li>\n<li><em>斜体字</em>  使文字倾斜,在文字左右各加一个 *</li>\n<li><strong><em>斜体加粗</em></strong>  要使文字加粗、倾斜,在文字左右各加三个 *</li>\n<li><del>加删除线的文字</del> 左右各 两个 ~</li>\n</ul>\n<h4 id=\"分割线-、\"><a href=\"#分割线-、\" class=\"headerlink\" title=\"分割线 (-、*)\"></a>分割线 (-、*)</h4><blockquote>\n<p>三个(-、*)及三个以上符号即可</p>\n</blockquote>\n<p>效果如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">***</span></span><br><span class=\"line\"><span class=\"string\">*</span> <span class=\"string\">*</span> <span class=\"string\">*</span></span><br></pre></td></tr></table></figure>\n\n<p>符号(-)分割线</p>\n<hr>\n<p>符号(*)分割线</p>\n<hr>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><p>基本语法</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片语法](https://images.jzwyz.com/blog/tpurl.png <span class=\"string\">&quot;这是对图片语法的说明图&quot;</span>)</span><br><span class=\"line\">![图片alt](https://images.jzwyz.com/blog/1.jpg <span class=\"string\">&quot;图片title&quot;</span>)</span><br><span class=\"line\">![链接语法](https://images.jzwyz.com/blog/urlsm.png <span class=\"string\">&quot;链接语法说明&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>效果:</p>\n<p><img src=\"https://images.jzwyz.com/blog/tpurl.png\" alt=\"图片语法\" title=\"这是对图片语法的说明图\"></p>\n<p><img src=\"https://images.jzwyz.com/blog/1.jpg\" alt=\"图片alt\" title=\"图片title\"></p>\n<p><img src=\"https://images.jzwyz.com/blog/urlsm.png\" alt=\"链接语法\" title=\"链接语法说明\"></p>\n<blockquote>\n<p>图片alt 显示在图片下方<br>图片title 就是图片描述,当鼠标移到图片上时显示的内容。title可加可不加 title与url之间以 空格 隔开</p>\n</blockquote>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>与图片语法类似, 开始 不要 ! 符号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[百度](https://www.baidu.com <span class=\"string\">&quot;百度一下&quot;</span>)</span><br><span class=\"line\">[Github](https://www.github.com <span class=\"string\">&quot;去Github&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.baidu.com/\" title=\"百度一下\">百度</a></p>\n<p><a href=\"https://www.github.com/\" title=\"去Github\">Github</a></p>\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 有序列表</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 有序列表</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 有序列表</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*</span> 无序列表 <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\">  + 无序列表 +</span></span><br><span class=\"line\"><span class=\"emphasis\">    - 无序列表 -</span></span><br><span class=\"line\"><span class=\"emphasis\">  + 无序列白</span></span><br><span class=\"line\"><span class=\"emphasis\">*</span> 无序列表</span><br></pre></td></tr></table></figure>\n\n<p>效果:</p>\n<ol>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n</ol>\n<ul>\n<li>无序列表 *<ul>\n<li>无序列表 +<ul>\n<li>无序列表 -</li>\n</ul>\n</li>\n<li>无序列白</li>\n</ul>\n</li>\n<li>无序列表</li>\n</ul>\n<blockquote>\n<p>列表 分为无序和有序,其语法区别就是 有序列表以**数字.**为符号 序号和内容之间空格分开</p>\n</blockquote>\n<blockquote>\n<p>无序列表 有 (*、+、-) 三个符号, 使用多个时,最顶层应使用 *,次级使用 +,再次级使用 -</p>\n</blockquote>\n<blockquote>\n<p>列表嵌套 下级与上级换行,缩进三个空格</p>\n</blockquote>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><p>示列 md 代码:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列名|列名|列名</span><br><span class=\"line\">--|:-:|:--—</span><br><span class=\"line\">内容|内|内容呀</span><br></pre></td></tr></table></figure>\n\n<p>第一行 | 符号分格列名</p>\n<p>第二行 - 代码该列中一个字符,一般设置为该列最长字符数量, : 放在 - 哪边就表示 该列字段向:对齐, | 符号分隔列</p>\n<p>再往下,就是每列的数据列</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">编号</th>\n<th align=\"center\">姓名</th>\n<th align=\"right\">性别</th>\n<th align=\"left\">年龄</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">01</td>\n<td align=\"center\">小明</td>\n<td align=\"right\">男</td>\n<td align=\"left\">12</td>\n</tr>\n<tr>\n<td align=\"right\">02</td>\n<td align=\"center\">小小红</td>\n<td align=\"right\">女</td>\n<td align=\"left\">15</td>\n</tr>\n</tbody></table>\n<h4 id=\"代码块语法\"><a href=\"#代码块语法\" class=\"headerlink\" title=\"代码块语法\"></a>代码块语法</h4><p>效果如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是代码块</span><br></pre></td></tr></table></figure>\n\n<p><code>这是代码行</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定 语言</span></span><br><span class=\"line\">docker run -d --rm -v ~/../workspace/my-blog/<span class=\"built_in\">source</span>:/app/<span class=\"built_in\">source</span> --network=app-bridge --name=webblog myblog:1.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://images.jzwyz.com/blog/dmkyf.png\" alt=\"代码块语法\" title=\"代码块语法\"></p>\n"},{"title":"梅林安装zerotier","date":"2020-01-02T10:50:50.000Z","_content":"\n网件R7000刷梅林, 安装zerotier内网穿透工具, 并配置开机自启\n\n[参考](http://koolshare.cn/forum.php?mod=viewthread&tid=134930&extra=&ordertype=1)\n\n## 安装 entware\n\n```sh\nrm -rf /opt\n\nmkdir /opt\n\ncd /opt\n\nwget -O - http://qnapware.zyxmon.org/binaries-armv7/installer/entware_install_arm.sh | sh\n```\n\n> 然后会提示你选择哪个分区，选择你挂载的U盘分区\n\n```sh\n···省略\nInfo:  Looking for available partitions...\n[1] --> /tmp/mnt/sda1\n=>  Please enter partition number or 0 to exit\n[0-1]: 1 # 选1回车\n···省略\n```\n\n> 跑完之后只要不提示错误，就是安装成功了\n\n### 配置entware环境变量\n\n`vim /etc/profile`\n\n直接在前面/usr/sbin:这行下直接添加下面两行并保存退出（ESC+:wq+Enter）\n\n`/opt/bin:/opt/sbin:`\n\n使配置生效\n\n`source /etc/profile`\n\n### 检查entware环境安装情况看是否报错\n\n```sh\nopkg update\n\nopkg list\n```\n\n## 安装 zerotier\n\n```sh\nopkg update\n\nopkg install zerotier\n```\n\n## 启动zerotier服务\n\n## 添加端口映射表\n\n## 重启zerotier服务\n\n## 注意事项\n\n1. 安装zerotier之前先安装 entware, 这样才能安装最新版本的zerotier\n\n## 最后\n\n......\n","source":"_posts/meilin-zerotier.md","raw":"---\ntitle: 梅林安装zerotier\ndate: 2020-01-02 18:50:50\ntags: 路由器\n---\n\n网件R7000刷梅林, 安装zerotier内网穿透工具, 并配置开机自启\n\n[参考](http://koolshare.cn/forum.php?mod=viewthread&tid=134930&extra=&ordertype=1)\n\n## 安装 entware\n\n```sh\nrm -rf /opt\n\nmkdir /opt\n\ncd /opt\n\nwget -O - http://qnapware.zyxmon.org/binaries-armv7/installer/entware_install_arm.sh | sh\n```\n\n> 然后会提示你选择哪个分区，选择你挂载的U盘分区\n\n```sh\n···省略\nInfo:  Looking for available partitions...\n[1] --> /tmp/mnt/sda1\n=>  Please enter partition number or 0 to exit\n[0-1]: 1 # 选1回车\n···省略\n```\n\n> 跑完之后只要不提示错误，就是安装成功了\n\n### 配置entware环境变量\n\n`vim /etc/profile`\n\n直接在前面/usr/sbin:这行下直接添加下面两行并保存退出（ESC+:wq+Enter）\n\n`/opt/bin:/opt/sbin:`\n\n使配置生效\n\n`source /etc/profile`\n\n### 检查entware环境安装情况看是否报错\n\n```sh\nopkg update\n\nopkg list\n```\n\n## 安装 zerotier\n\n```sh\nopkg update\n\nopkg install zerotier\n```\n\n## 启动zerotier服务\n\n## 添加端口映射表\n\n## 重启zerotier服务\n\n## 注意事项\n\n1. 安装zerotier之前先安装 entware, 这样才能安装最新版本的zerotier\n\n## 最后\n\n......\n","slug":"meilin-zerotier","published":1,"updated":"2021-11-04T15:54:07.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihx000tahteg9gy965z","content":"<p>网件R7000刷梅林, 安装zerotier内网穿透工具, 并配置开机自启</p>\n<p><a href=\"http://koolshare.cn/forum.php?mod=viewthread&tid=134930&extra=&ordertype=1\">参考</a></p>\n<h2 id=\"安装-entware\"><a href=\"#安装-entware\" class=\"headerlink\" title=\"安装 entware\"></a>安装 entware</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /opt</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /opt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt</span><br><span class=\"line\"></span><br><span class=\"line\">wget -O - http://qnapware.zyxmon.org/binaries-armv7/installer/entware_install_arm.sh | sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>然后会提示你选择哪个分区，选择你挂载的U盘分区</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">···省略</span><br><span class=\"line\">Info:  Looking <span class=\"keyword\">for</span> available partitions...</span><br><span class=\"line\">[1] --&gt; /tmp/mnt/sda1</span><br><span class=\"line\">=&gt;  Please enter partition number or 0 to <span class=\"built_in\">exit</span></span><br><span class=\"line\">[0-1]: 1 <span class=\"comment\"># 选1回车</span></span><br><span class=\"line\">···省略</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>跑完之后只要不提示错误，就是安装成功了</p>\n</blockquote>\n<h3 id=\"配置entware环境变量\"><a href=\"#配置entware环境变量\" class=\"headerlink\" title=\"配置entware环境变量\"></a>配置entware环境变量</h3><p><code>vim /etc/profile</code></p>\n<p>直接在前面/usr/sbin:这行下直接添加下面两行并保存退出（ESC+:wq+Enter）</p>\n<p><code>/opt/bin:/opt/sbin:</code></p>\n<p>使配置生效</p>\n<p><code>source /etc/profile</code></p>\n<h3 id=\"检查entware环境安装情况看是否报错\"><a href=\"#检查entware环境安装情况看是否报错\" class=\"headerlink\" title=\"检查entware环境安装情况看是否报错\"></a>检查entware环境安装情况看是否报错</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\"></span><br><span class=\"line\">opkg list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-zerotier\"><a href=\"#安装-zerotier\" class=\"headerlink\" title=\"安装 zerotier\"></a>安装 zerotier</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\"></span><br><span class=\"line\">opkg install zerotier</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动zerotier服务\"><a href=\"#启动zerotier服务\" class=\"headerlink\" title=\"启动zerotier服务\"></a>启动zerotier服务</h2><h2 id=\"添加端口映射表\"><a href=\"#添加端口映射表\" class=\"headerlink\" title=\"添加端口映射表\"></a>添加端口映射表</h2><h2 id=\"重启zerotier服务\"><a href=\"#重启zerotier服务\" class=\"headerlink\" title=\"重启zerotier服务\"></a>重启zerotier服务</h2><h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li>安装zerotier之前先安装 entware, 这样才能安装最新版本的zerotier</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>网件R7000刷梅林, 安装zerotier内网穿透工具, 并配置开机自启</p>\n<p><a href=\"http://koolshare.cn/forum.php?mod=viewthread&tid=134930&extra=&ordertype=1\">参考</a></p>\n<h2 id=\"安装-entware\"><a href=\"#安装-entware\" class=\"headerlink\" title=\"安装 entware\"></a>安装 entware</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /opt</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /opt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt</span><br><span class=\"line\"></span><br><span class=\"line\">wget -O - http://qnapware.zyxmon.org/binaries-armv7/installer/entware_install_arm.sh | sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>然后会提示你选择哪个分区，选择你挂载的U盘分区</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">···省略</span><br><span class=\"line\">Info:  Looking <span class=\"keyword\">for</span> available partitions...</span><br><span class=\"line\">[1] --&gt; /tmp/mnt/sda1</span><br><span class=\"line\">=&gt;  Please enter partition number or 0 to <span class=\"built_in\">exit</span></span><br><span class=\"line\">[0-1]: 1 <span class=\"comment\"># 选1回车</span></span><br><span class=\"line\">···省略</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>跑完之后只要不提示错误，就是安装成功了</p>\n</blockquote>\n<h3 id=\"配置entware环境变量\"><a href=\"#配置entware环境变量\" class=\"headerlink\" title=\"配置entware环境变量\"></a>配置entware环境变量</h3><p><code>vim /etc/profile</code></p>\n<p>直接在前面/usr/sbin:这行下直接添加下面两行并保存退出（ESC+:wq+Enter）</p>\n<p><code>/opt/bin:/opt/sbin:</code></p>\n<p>使配置生效</p>\n<p><code>source /etc/profile</code></p>\n<h3 id=\"检查entware环境安装情况看是否报错\"><a href=\"#检查entware环境安装情况看是否报错\" class=\"headerlink\" title=\"检查entware环境安装情况看是否报错\"></a>检查entware环境安装情况看是否报错</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\"></span><br><span class=\"line\">opkg list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-zerotier\"><a href=\"#安装-zerotier\" class=\"headerlink\" title=\"安装 zerotier\"></a>安装 zerotier</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\"></span><br><span class=\"line\">opkg install zerotier</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动zerotier服务\"><a href=\"#启动zerotier服务\" class=\"headerlink\" title=\"启动zerotier服务\"></a>启动zerotier服务</h2><h2 id=\"添加端口映射表\"><a href=\"#添加端口映射表\" class=\"headerlink\" title=\"添加端口映射表\"></a>添加端口映射表</h2><h2 id=\"重启zerotier服务\"><a href=\"#重启zerotier服务\" class=\"headerlink\" title=\"重启zerotier服务\"></a>重启zerotier服务</h2><h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li>安装zerotier之前先安装 entware, 这样才能安装最新版本的zerotier</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>……</p>\n"},{"title":"Windows10下的子系统Linux","date":"2020-01-08T06:41:17.000Z","_content":"\nWindows10出了一款子系统Linux,可以方便开发者不在需要依赖虚拟机啦\n\n## 开始\n\n首先你得是windows10最新版本的系统\n\n进入 系统设置 -> 更新和安全 -> 开发者选项 打开\n\n![ ](./WX20200108-154615@2x.png)\n\n![ ](./WX20200108-154856@2x.png)\n\n其次是 进入 控制面板-程序和功能-启用或关闭Windows功能下 选择 “适用于Linux的Window之系统”\n\n![ ](./WX20200108-155336@2x.png)\n\n然后**重启系统**\n\n## 安装Linux系统\n\n打开Windows10的应用商店, 搜索Linux会得到以下结果, 点击第一个进入\n\n![ ](./A84A183D1145E8245B6A7C8A84FB985F.jpg)\n\n![ ](./WX20200108-155928@2x.png)\n\n这里我安装的是第一个 Ubuntu 系统\n\n![ ](./WX20200108-160028@2x.png)\n\n点击安装, 等待安装完成\n\n## 进入Linux系统\n\n安装完成之后, `Ctrl + R`打开CMD, 输入 `bash` 就会进入Linux系统了\n\n根据提示, 设置用户名、密码就好了\n\n![ ](./20180912154639866.png)\n\n## 子系统Ubuntu进阶(可选)\n\n### 升级到 WSL2\n\n**先决条件** 运行 `Windows 10`（已更新到版本 *2004* 的内部版本 *19041* 或更高版本）\n\n[官方文档](https://docs.microsoft.com/zh-cn/windows/wsl/install-win10)\n\n打开 cmd\n\n```cmd\n# 将当前wsl版本设置为2  `wsl --set-version <distribution name> <versionNumber>`\nwsl --set-version Ubuntu 18.04 2\n\n# 将wsl默认版本设置为 2  (后续安装wsl子系统都将以wsl2版本安装)\nwsl --set-default-version 2\n\n# 查看当前 wsl 版本\nwsl -l -v\n```\n\n![ ](./WX20200108-164517@2x.png)\n\n### 更换 apt-get 安装源(可选、觉得网速好的可以不换)\n\n一般新安装的Linux系统都需要更新软件仓库的, 但是Ubuntu的默认仓库源是国外的,更新数据比较慢, 我们可以先更换软件仓库源为国内的(个人一般喜欢用*阿里*的源)\n\n#### 准备源\n\n查看系统版本\n\n```sh\nlsb_release -a\n```\n\n![ ](./WX20200108-164517@2x.png)\n\n> Codename 是你的系统版本代号\n> Ubuntu 12.04 (LTS)代号为precise。\n> Ubuntu 14.04 (LTS)代号为trusty。\n> Ubuntu 15.04 代号为vivid。\n> Ubuntu 15.10 代号为wily。\n> Ubuntu 16.04 (LTS)代号为xenial。\n> Ubuntu 18.04 (LTS)代号为bionic\n\nUbuntu 18.04 (LTS)代号为bionic 对应阿里云镜像仓库的地址为:\n\n```txt\ndeb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\n```\n\n[这里最后面说明了,为什么要关注这个系统的版本号](https://blog.csdn.net/zhangjiahao14/article/details/80554616)\n\n### 修改 `/etc/apt/sources.list` 文件\n\n我们需要修改 `/etc/apt/sources.list` 文件\n\n第一步: 备份 `/etc/apt/sources.list` 文件\n\n```sh\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bak\n```\n\n> .bak 后缀的文件是linux系统中的备份文件\n\n第二部: 修改 `/etc/apt/sources.list` 文件\n\n```sh\nsudo vim /etc/apt/sources.list\n```\n\n![ ](./WX20200108-163130@2x.png)\n\n打开之后是这样的\n\n注释已有的源, 粘贴阿里的镜像地址保存即可\n\nvim编辑器说明:\n\nvi编辑器一共有三种模式，分别是命令模式（command mode）*默认*、插入模式（Insert mode）和底行模式（last line mode）。命令模式下我们只能控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode等；插入模式下可以做文字输入，按「ESC」键可回到命令行模式；底行模式下，可以将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号等。\n\nvim编辑器的常用命令:\n\n1. `vim /etc/apt/sources.list` 打开文件(不存在的文件,在保存时自动创建) 默认(命令模式)\n2. `i` (插入模式) 在光标前开始插入\n3. `a` (插入模式) 在光标后开始插入\n4. `shift + :` (命令模式) 调出vim的命令行, 输入命令(`wq`保存退出、`q!`不保存退出、 `w`仅保存)\n5. `d + up键` (命令模式) *浏览模式下* 删除一行\n\n#### apt-get update、 apt-get upgrade 不要忘记了, 不管有没有换源都要执行的\n\n### zsh\n\n*zsh*是一个终端shell程序,比默认的bash终端好用, 可以搭配*oh-my-zsh*美化你的命令行\n\n官网[oh-my-zsh](https://ohmyz.sh/)\n\n#### 安装 zsh oh-my-zsh\n\n安装zsh\n\n`sudo apt-get install zsh`\n\n检查zsh\n\n`zsh --version`\n\n如果没有看到版本号、或者报错,则说明安装失败了\n\n设置为默认终端\n\n`sudo chsh -s /usr/bin/zsh <username>`\n\n如果报错, 则看一下 `/etc/shells` 文件中是否包含 `/bin/zsh`、`/usr/bin/zsh`, 没有就添加\n\n![ ](./WX20200108-173249@2x.png)\n\n顺序不重要\n\n再次执行 `sudo chsh -s /usr/bin/zsh <username>`\n\n成功则**关闭终端,重新打开(退出用户,重新登陆)**\n\n执行 `bash` 进入Linux子系统\n\n执行 `echo $SHELL` 会输出 `/bin/zsh`\n\n执行 `$SHELL --version` 会输出 `zsh 5.4.2 (x86_64-ubuntu-linux-gnu)`\n\n上面两部执行正确,则说明安装zsh并设置为默认终端成功了,\n\n#### 我遇到的windows10子系统的一个问题\n\n在设置为默认终端时,为参考官方教程来做,无法将zsh设置为默认终端\n\n官方命令: `sudo chsh -s $(which zsh)`\n\n检查是否设置默认成功: `echo $SHELL`\n\n终端应该输出: `/bin/zsh`, 如果不是 或者是 空 则说明默认配置是失败的\n\n查看 `/etc/passwd` 文件中 对应你的用户配置 是否是 指定 `/bin/zsh`\n\n##### 最终解决问题的办法\n\n编辑 `~/.bash_profile` 文件，（不存在就创建）\n\n加入以下类容：\n\n```sh\n# 指定 zsh的目录\nexport SHELL=/bin/zsh\nexport PATH=$SHELL:$PATH\n\n# 每次打开终端的时候运行zsh\nexec $SHELL\n```\n\n![ ](./WX20200108-173321@2x.png)\n\n执行 `sudo chsh -s /usr/bin/zsh <username>` 命令 (最后面对应你的用户名)\n\n#### 下载 oh-my-zsh 美化zsh\n\n参考官方的教程\n\n使用 curl\n\n```sh\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n使用 wget\n\n```sh\nsh -c \"$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\"\n```\n\n默认是 robbyrussell 样式\n\n修改 `~/.zshrc` 的 `ZSH_THEME=robbyrussell` 值 即可更换样式, 如果你不想要任何样式,则将值设置为\"\"即可\n\n[主题库](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)\n\n### 其他\n\n后面需要学习的:\n\n1. 安装docker\n2. putty远程连接\n\n## 结束\n\n...\n","source":"_posts/msl.md","raw":"---\ntitle: Windows10下的子系统Linux\ndate: 2020-01-08 14:41:17\ntags: Windows\n---\n\nWindows10出了一款子系统Linux,可以方便开发者不在需要依赖虚拟机啦\n\n## 开始\n\n首先你得是windows10最新版本的系统\n\n进入 系统设置 -> 更新和安全 -> 开发者选项 打开\n\n![ ](./WX20200108-154615@2x.png)\n\n![ ](./WX20200108-154856@2x.png)\n\n其次是 进入 控制面板-程序和功能-启用或关闭Windows功能下 选择 “适用于Linux的Window之系统”\n\n![ ](./WX20200108-155336@2x.png)\n\n然后**重启系统**\n\n## 安装Linux系统\n\n打开Windows10的应用商店, 搜索Linux会得到以下结果, 点击第一个进入\n\n![ ](./A84A183D1145E8245B6A7C8A84FB985F.jpg)\n\n![ ](./WX20200108-155928@2x.png)\n\n这里我安装的是第一个 Ubuntu 系统\n\n![ ](./WX20200108-160028@2x.png)\n\n点击安装, 等待安装完成\n\n## 进入Linux系统\n\n安装完成之后, `Ctrl + R`打开CMD, 输入 `bash` 就会进入Linux系统了\n\n根据提示, 设置用户名、密码就好了\n\n![ ](./20180912154639866.png)\n\n## 子系统Ubuntu进阶(可选)\n\n### 升级到 WSL2\n\n**先决条件** 运行 `Windows 10`（已更新到版本 *2004* 的内部版本 *19041* 或更高版本）\n\n[官方文档](https://docs.microsoft.com/zh-cn/windows/wsl/install-win10)\n\n打开 cmd\n\n```cmd\n# 将当前wsl版本设置为2  `wsl --set-version <distribution name> <versionNumber>`\nwsl --set-version Ubuntu 18.04 2\n\n# 将wsl默认版本设置为 2  (后续安装wsl子系统都将以wsl2版本安装)\nwsl --set-default-version 2\n\n# 查看当前 wsl 版本\nwsl -l -v\n```\n\n![ ](./WX20200108-164517@2x.png)\n\n### 更换 apt-get 安装源(可选、觉得网速好的可以不换)\n\n一般新安装的Linux系统都需要更新软件仓库的, 但是Ubuntu的默认仓库源是国外的,更新数据比较慢, 我们可以先更换软件仓库源为国内的(个人一般喜欢用*阿里*的源)\n\n#### 准备源\n\n查看系统版本\n\n```sh\nlsb_release -a\n```\n\n![ ](./WX20200108-164517@2x.png)\n\n> Codename 是你的系统版本代号\n> Ubuntu 12.04 (LTS)代号为precise。\n> Ubuntu 14.04 (LTS)代号为trusty。\n> Ubuntu 15.04 代号为vivid。\n> Ubuntu 15.10 代号为wily。\n> Ubuntu 16.04 (LTS)代号为xenial。\n> Ubuntu 18.04 (LTS)代号为bionic\n\nUbuntu 18.04 (LTS)代号为bionic 对应阿里云镜像仓库的地址为:\n\n```txt\ndeb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\n```\n\n[这里最后面说明了,为什么要关注这个系统的版本号](https://blog.csdn.net/zhangjiahao14/article/details/80554616)\n\n### 修改 `/etc/apt/sources.list` 文件\n\n我们需要修改 `/etc/apt/sources.list` 文件\n\n第一步: 备份 `/etc/apt/sources.list` 文件\n\n```sh\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bak\n```\n\n> .bak 后缀的文件是linux系统中的备份文件\n\n第二部: 修改 `/etc/apt/sources.list` 文件\n\n```sh\nsudo vim /etc/apt/sources.list\n```\n\n![ ](./WX20200108-163130@2x.png)\n\n打开之后是这样的\n\n注释已有的源, 粘贴阿里的镜像地址保存即可\n\nvim编辑器说明:\n\nvi编辑器一共有三种模式，分别是命令模式（command mode）*默认*、插入模式（Insert mode）和底行模式（last line mode）。命令模式下我们只能控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode等；插入模式下可以做文字输入，按「ESC」键可回到命令行模式；底行模式下，可以将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号等。\n\nvim编辑器的常用命令:\n\n1. `vim /etc/apt/sources.list` 打开文件(不存在的文件,在保存时自动创建) 默认(命令模式)\n2. `i` (插入模式) 在光标前开始插入\n3. `a` (插入模式) 在光标后开始插入\n4. `shift + :` (命令模式) 调出vim的命令行, 输入命令(`wq`保存退出、`q!`不保存退出、 `w`仅保存)\n5. `d + up键` (命令模式) *浏览模式下* 删除一行\n\n#### apt-get update、 apt-get upgrade 不要忘记了, 不管有没有换源都要执行的\n\n### zsh\n\n*zsh*是一个终端shell程序,比默认的bash终端好用, 可以搭配*oh-my-zsh*美化你的命令行\n\n官网[oh-my-zsh](https://ohmyz.sh/)\n\n#### 安装 zsh oh-my-zsh\n\n安装zsh\n\n`sudo apt-get install zsh`\n\n检查zsh\n\n`zsh --version`\n\n如果没有看到版本号、或者报错,则说明安装失败了\n\n设置为默认终端\n\n`sudo chsh -s /usr/bin/zsh <username>`\n\n如果报错, 则看一下 `/etc/shells` 文件中是否包含 `/bin/zsh`、`/usr/bin/zsh`, 没有就添加\n\n![ ](./WX20200108-173249@2x.png)\n\n顺序不重要\n\n再次执行 `sudo chsh -s /usr/bin/zsh <username>`\n\n成功则**关闭终端,重新打开(退出用户,重新登陆)**\n\n执行 `bash` 进入Linux子系统\n\n执行 `echo $SHELL` 会输出 `/bin/zsh`\n\n执行 `$SHELL --version` 会输出 `zsh 5.4.2 (x86_64-ubuntu-linux-gnu)`\n\n上面两部执行正确,则说明安装zsh并设置为默认终端成功了,\n\n#### 我遇到的windows10子系统的一个问题\n\n在设置为默认终端时,为参考官方教程来做,无法将zsh设置为默认终端\n\n官方命令: `sudo chsh -s $(which zsh)`\n\n检查是否设置默认成功: `echo $SHELL`\n\n终端应该输出: `/bin/zsh`, 如果不是 或者是 空 则说明默认配置是失败的\n\n查看 `/etc/passwd` 文件中 对应你的用户配置 是否是 指定 `/bin/zsh`\n\n##### 最终解决问题的办法\n\n编辑 `~/.bash_profile` 文件，（不存在就创建）\n\n加入以下类容：\n\n```sh\n# 指定 zsh的目录\nexport SHELL=/bin/zsh\nexport PATH=$SHELL:$PATH\n\n# 每次打开终端的时候运行zsh\nexec $SHELL\n```\n\n![ ](./WX20200108-173321@2x.png)\n\n执行 `sudo chsh -s /usr/bin/zsh <username>` 命令 (最后面对应你的用户名)\n\n#### 下载 oh-my-zsh 美化zsh\n\n参考官方的教程\n\n使用 curl\n\n```sh\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n使用 wget\n\n```sh\nsh -c \"$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\"\n```\n\n默认是 robbyrussell 样式\n\n修改 `~/.zshrc` 的 `ZSH_THEME=robbyrussell` 值 即可更换样式, 如果你不想要任何样式,则将值设置为\"\"即可\n\n[主题库](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)\n\n### 其他\n\n后面需要学习的:\n\n1. 安装docker\n2. putty远程连接\n\n## 结束\n\n...\n","slug":"msl","published":1,"updated":"2021-11-04T15:54:07.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihy000uahte489sheql","content":"<p>Windows10出了一款子系统Linux,可以方便开发者不在需要依赖虚拟机啦</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>首先你得是windows10最新版本的系统</p>\n<p>进入 系统设置 -&gt; 更新和安全 -&gt; 开发者选项 打开</p>\n<p><img src=\"./WX20200108-154615@2x.png\" alt=\" \"></p>\n<p><img src=\"./WX20200108-154856@2x.png\" alt=\" \"></p>\n<p>其次是 进入 控制面板-程序和功能-启用或关闭Windows功能下 选择 “适用于Linux的Window之系统”</p>\n<p><img src=\"./WX20200108-155336@2x.png\" alt=\" \"></p>\n<p>然后<strong>重启系统</strong></p>\n<h2 id=\"安装Linux系统\"><a href=\"#安装Linux系统\" class=\"headerlink\" title=\"安装Linux系统\"></a>安装Linux系统</h2><p>打开Windows10的应用商店, 搜索Linux会得到以下结果, 点击第一个进入</p>\n<p><img src=\"./A84A183D1145E8245B6A7C8A84FB985F.jpg\" alt=\" \"></p>\n<p><img src=\"./WX20200108-155928@2x.png\" alt=\" \"></p>\n<p>这里我安装的是第一个 Ubuntu 系统</p>\n<p><img src=\"./WX20200108-160028@2x.png\" alt=\" \"></p>\n<p>点击安装, 等待安装完成</p>\n<h2 id=\"进入Linux系统\"><a href=\"#进入Linux系统\" class=\"headerlink\" title=\"进入Linux系统\"></a>进入Linux系统</h2><p>安装完成之后, <code>Ctrl + R</code>打开CMD, 输入 <code>bash</code> 就会进入Linux系统了</p>\n<p>根据提示, 设置用户名、密码就好了</p>\n<p><img src=\"./20180912154639866.png\" alt=\" \"></p>\n<h2 id=\"子系统Ubuntu进阶-可选\"><a href=\"#子系统Ubuntu进阶-可选\" class=\"headerlink\" title=\"子系统Ubuntu进阶(可选)\"></a>子系统Ubuntu进阶(可选)</h2><h3 id=\"升级到-WSL2\"><a href=\"#升级到-WSL2\" class=\"headerlink\" title=\"升级到 WSL2\"></a>升级到 WSL2</h3><p><strong>先决条件</strong> 运行 <code>Windows 10</code>（已更新到版本 <em>2004</em> 的内部版本 <em>19041</em> 或更高版本）</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10\">官方文档</a></p>\n<p>打开 cmd</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将当前wsl版本设置为<span class=\"number\">2</span>  `wsl --<span class=\"built_in\">set</span>-version &lt;distribution name&gt; &lt;versionNumber&gt;`</span><br><span class=\"line\">wsl --<span class=\"built_in\">set</span>-version Ubuntu <span class=\"number\">18</span>.<span class=\"number\">04</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 将wsl默认版本设置为 <span class=\"number\">2</span>  (后续安装wsl子系统都将以wsl2版本安装)</span><br><span class=\"line\">wsl --<span class=\"built_in\">set</span>-default-version <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前 wsl 版本</span><br><span class=\"line\">wsl -l -v</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./WX20200108-164517@2x.png\" alt=\" \"></p>\n<h3 id=\"更换-apt-get-安装源-可选、觉得网速好的可以不换\"><a href=\"#更换-apt-get-安装源-可选、觉得网速好的可以不换\" class=\"headerlink\" title=\"更换 apt-get 安装源(可选、觉得网速好的可以不换)\"></a>更换 apt-get 安装源(可选、觉得网速好的可以不换)</h3><p>一般新安装的Linux系统都需要更新软件仓库的, 但是Ubuntu的默认仓库源是国外的,更新数据比较慢, 我们可以先更换软件仓库源为国内的(个人一般喜欢用<em>阿里</em>的源)</p>\n<h4 id=\"准备源\"><a href=\"#准备源\" class=\"headerlink\" title=\"准备源\"></a>准备源</h4><p>查看系统版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsb_release -a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./WX20200108-164517@2x.png\" alt=\" \"></p>\n<blockquote>\n<p>Codename 是你的系统版本代号<br>Ubuntu 12.04 (LTS)代号为precise。<br>Ubuntu 14.04 (LTS)代号为trusty。<br>Ubuntu 15.04 代号为vivid。<br>Ubuntu 15.10 代号为wily。<br>Ubuntu 16.04 (LTS)代号为xenial。<br>Ubuntu 18.04 (LTS)代号为bionic</p>\n</blockquote>\n<p>Ubuntu 18.04 (LTS)代号为bionic 对应阿里云镜像仓库的地址为:</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/zhangjiahao14/article/details/80554616\">这里最后面说明了,为什么要关注这个系统的版本号</a></p>\n<h3 id=\"修改-etc-apt-sources-list-文件\"><a href=\"#修改-etc-apt-sources-list-文件\" class=\"headerlink\" title=\"修改 /etc/apt/sources.list 文件\"></a>修改 <code>/etc/apt/sources.list</code> 文件</h3><p>我们需要修改 <code>/etc/apt/sources.list</code> 文件</p>\n<p>第一步: 备份 <code>/etc/apt/sources.list</code> 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>.bak 后缀的文件是linux系统中的备份文件</p>\n</blockquote>\n<p>第二部: 修改 <code>/etc/apt/sources.list</code> 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./WX20200108-163130@2x.png\" alt=\" \"></p>\n<p>打开之后是这样的</p>\n<p>注释已有的源, 粘贴阿里的镜像地址保存即可</p>\n<p>vim编辑器说明:</p>\n<p>vi编辑器一共有三种模式，分别是命令模式（command mode）<em>默认</em>、插入模式（Insert mode）和底行模式（last line mode）。命令模式下我们只能控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode等；插入模式下可以做文字输入，按「ESC」键可回到命令行模式；底行模式下，可以将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号等。</p>\n<p>vim编辑器的常用命令:</p>\n<ol>\n<li><code>vim /etc/apt/sources.list</code> 打开文件(不存在的文件,在保存时自动创建) 默认(命令模式)</li>\n<li><code>i</code> (插入模式) 在光标前开始插入</li>\n<li><code>a</code> (插入模式) 在光标后开始插入</li>\n<li><code>shift + :</code> (命令模式) 调出vim的命令行, 输入命令(<code>wq</code>保存退出、<code>q!</code>不保存退出、 <code>w</code>仅保存)</li>\n<li><code>d + up键</code> (命令模式) <em>浏览模式下</em> 删除一行</li>\n</ol>\n<h4 id=\"apt-get-update、-apt-get-upgrade-不要忘记了-不管有没有换源都要执行的\"><a href=\"#apt-get-update、-apt-get-upgrade-不要忘记了-不管有没有换源都要执行的\" class=\"headerlink\" title=\"apt-get update、 apt-get upgrade 不要忘记了, 不管有没有换源都要执行的\"></a>apt-get update、 apt-get upgrade 不要忘记了, 不管有没有换源都要执行的</h4><h3 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h3><p><em>zsh</em>是一个终端shell程序,比默认的bash终端好用, 可以搭配<em>oh-my-zsh</em>美化你的命令行</p>\n<p>官网<a href=\"https://ohmyz.sh/\">oh-my-zsh</a></p>\n<h4 id=\"安装-zsh-oh-my-zsh\"><a href=\"#安装-zsh-oh-my-zsh\" class=\"headerlink\" title=\"安装 zsh oh-my-zsh\"></a>安装 zsh oh-my-zsh</h4><p>安装zsh</p>\n<p><code>sudo apt-get install zsh</code></p>\n<p>检查zsh</p>\n<p><code>zsh --version</code></p>\n<p>如果没有看到版本号、或者报错,则说明安装失败了</p>\n<p>设置为默认终端</p>\n<p><code>sudo chsh -s /usr/bin/zsh &lt;username&gt;</code></p>\n<p>如果报错, 则看一下 <code>/etc/shells</code> 文件中是否包含 <code>/bin/zsh</code>、<code>/usr/bin/zsh</code>, 没有就添加</p>\n<p><img src=\"./WX20200108-173249@2x.png\" alt=\" \"></p>\n<p>顺序不重要</p>\n<p>再次执行 <code>sudo chsh -s /usr/bin/zsh &lt;username&gt;</code></p>\n<p>成功则<strong>关闭终端,重新打开(退出用户,重新登陆)</strong></p>\n<p>执行 <code>bash</code> 进入Linux子系统</p>\n<p>执行 <code>echo $SHELL</code> 会输出 <code>/bin/zsh</code></p>\n<p>执行 <code>$SHELL --version</code> 会输出 <code>zsh 5.4.2 (x86_64-ubuntu-linux-gnu)</code></p>\n<p>上面两部执行正确,则说明安装zsh并设置为默认终端成功了,</p>\n<h4 id=\"我遇到的windows10子系统的一个问题\"><a href=\"#我遇到的windows10子系统的一个问题\" class=\"headerlink\" title=\"我遇到的windows10子系统的一个问题\"></a>我遇到的windows10子系统的一个问题</h4><p>在设置为默认终端时,为参考官方教程来做,无法将zsh设置为默认终端</p>\n<p>官方命令: <code>sudo chsh -s $(which zsh)</code></p>\n<p>检查是否设置默认成功: <code>echo $SHELL</code></p>\n<p>终端应该输出: <code>/bin/zsh</code>, 如果不是 或者是 空 则说明默认配置是失败的</p>\n<p>查看 <code>/etc/passwd</code> 文件中 对应你的用户配置 是否是 指定 <code>/bin/zsh</code></p>\n<h5 id=\"最终解决问题的办法\"><a href=\"#最终解决问题的办法\" class=\"headerlink\" title=\"最终解决问题的办法\"></a>最终解决问题的办法</h5><p>编辑 <code>~/.bash_profile</code> 文件，（不存在就创建）</p>\n<p>加入以下类容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定 zsh的目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SHELL=/bin/zsh</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$SHELL</span>:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每次打开终端的时候运行zsh</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"variable\">$SHELL</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./WX20200108-173321@2x.png\" alt=\" \"></p>\n<p>执行 <code>sudo chsh -s /usr/bin/zsh &lt;username&gt;</code> 命令 (最后面对应你的用户名)</p>\n<h4 id=\"下载-oh-my-zsh-美化zsh\"><a href=\"#下载-oh-my-zsh-美化zsh\" class=\"headerlink\" title=\"下载 oh-my-zsh 美化zsh\"></a>下载 oh-my-zsh 美化zsh</h4><p>参考官方的教程</p>\n<p>使用 curl</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 wget</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认是 robbyrussell 样式</p>\n<p>修改 <code>~/.zshrc</code> 的 <code>ZSH_THEME=robbyrussell</code> 值 即可更换样式, 如果你不想要任何样式,则将值设置为””即可</p>\n<p><a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\">主题库</a></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>后面需要学习的:</p>\n<ol>\n<li>安装docker</li>\n<li>putty远程连接</li>\n</ol>\n<h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Windows10出了一款子系统Linux,可以方便开发者不在需要依赖虚拟机啦</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>首先你得是windows10最新版本的系统</p>\n<p>进入 系统设置 -&gt; 更新和安全 -&gt; 开发者选项 打开</p>\n<p><img src=\"./WX20200108-154615@2x.png\" alt=\" \"></p>\n<p><img src=\"./WX20200108-154856@2x.png\" alt=\" \"></p>\n<p>其次是 进入 控制面板-程序和功能-启用或关闭Windows功能下 选择 “适用于Linux的Window之系统”</p>\n<p><img src=\"./WX20200108-155336@2x.png\" alt=\" \"></p>\n<p>然后<strong>重启系统</strong></p>\n<h2 id=\"安装Linux系统\"><a href=\"#安装Linux系统\" class=\"headerlink\" title=\"安装Linux系统\"></a>安装Linux系统</h2><p>打开Windows10的应用商店, 搜索Linux会得到以下结果, 点击第一个进入</p>\n<p><img src=\"./A84A183D1145E8245B6A7C8A84FB985F.jpg\" alt=\" \"></p>\n<p><img src=\"./WX20200108-155928@2x.png\" alt=\" \"></p>\n<p>这里我安装的是第一个 Ubuntu 系统</p>\n<p><img src=\"./WX20200108-160028@2x.png\" alt=\" \"></p>\n<p>点击安装, 等待安装完成</p>\n<h2 id=\"进入Linux系统\"><a href=\"#进入Linux系统\" class=\"headerlink\" title=\"进入Linux系统\"></a>进入Linux系统</h2><p>安装完成之后, <code>Ctrl + R</code>打开CMD, 输入 <code>bash</code> 就会进入Linux系统了</p>\n<p>根据提示, 设置用户名、密码就好了</p>\n<p><img src=\"./20180912154639866.png\" alt=\" \"></p>\n<h2 id=\"子系统Ubuntu进阶-可选\"><a href=\"#子系统Ubuntu进阶-可选\" class=\"headerlink\" title=\"子系统Ubuntu进阶(可选)\"></a>子系统Ubuntu进阶(可选)</h2><h3 id=\"升级到-WSL2\"><a href=\"#升级到-WSL2\" class=\"headerlink\" title=\"升级到 WSL2\"></a>升级到 WSL2</h3><p><strong>先决条件</strong> 运行 <code>Windows 10</code>（已更新到版本 <em>2004</em> 的内部版本 <em>19041</em> 或更高版本）</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10\">官方文档</a></p>\n<p>打开 cmd</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将当前wsl版本设置为<span class=\"number\">2</span>  `wsl --<span class=\"built_in\">set</span>-version &lt;distribution name&gt; &lt;versionNumber&gt;`</span><br><span class=\"line\">wsl --<span class=\"built_in\">set</span>-version Ubuntu <span class=\"number\">18</span>.<span class=\"number\">04</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 将wsl默认版本设置为 <span class=\"number\">2</span>  (后续安装wsl子系统都将以wsl2版本安装)</span><br><span class=\"line\">wsl --<span class=\"built_in\">set</span>-default-version <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前 wsl 版本</span><br><span class=\"line\">wsl -l -v</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./WX20200108-164517@2x.png\" alt=\" \"></p>\n<h3 id=\"更换-apt-get-安装源-可选、觉得网速好的可以不换\"><a href=\"#更换-apt-get-安装源-可选、觉得网速好的可以不换\" class=\"headerlink\" title=\"更换 apt-get 安装源(可选、觉得网速好的可以不换)\"></a>更换 apt-get 安装源(可选、觉得网速好的可以不换)</h3><p>一般新安装的Linux系统都需要更新软件仓库的, 但是Ubuntu的默认仓库源是国外的,更新数据比较慢, 我们可以先更换软件仓库源为国内的(个人一般喜欢用<em>阿里</em>的源)</p>\n<h4 id=\"准备源\"><a href=\"#准备源\" class=\"headerlink\" title=\"准备源\"></a>准备源</h4><p>查看系统版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsb_release -a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./WX20200108-164517@2x.png\" alt=\" \"></p>\n<blockquote>\n<p>Codename 是你的系统版本代号<br>Ubuntu 12.04 (LTS)代号为precise。<br>Ubuntu 14.04 (LTS)代号为trusty。<br>Ubuntu 15.04 代号为vivid。<br>Ubuntu 15.10 代号为wily。<br>Ubuntu 16.04 (LTS)代号为xenial。<br>Ubuntu 18.04 (LTS)代号为bionic</p>\n</blockquote>\n<p>Ubuntu 18.04 (LTS)代号为bionic 对应阿里云镜像仓库的地址为:</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/zhangjiahao14/article/details/80554616\">这里最后面说明了,为什么要关注这个系统的版本号</a></p>\n<h3 id=\"修改-etc-apt-sources-list-文件\"><a href=\"#修改-etc-apt-sources-list-文件\" class=\"headerlink\" title=\"修改 /etc/apt/sources.list 文件\"></a>修改 <code>/etc/apt/sources.list</code> 文件</h3><p>我们需要修改 <code>/etc/apt/sources.list</code> 文件</p>\n<p>第一步: 备份 <code>/etc/apt/sources.list</code> 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>.bak 后缀的文件是linux系统中的备份文件</p>\n</blockquote>\n<p>第二部: 修改 <code>/etc/apt/sources.list</code> 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./WX20200108-163130@2x.png\" alt=\" \"></p>\n<p>打开之后是这样的</p>\n<p>注释已有的源, 粘贴阿里的镜像地址保存即可</p>\n<p>vim编辑器说明:</p>\n<p>vi编辑器一共有三种模式，分别是命令模式（command mode）<em>默认</em>、插入模式（Insert mode）和底行模式（last line mode）。命令模式下我们只能控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode等；插入模式下可以做文字输入，按「ESC」键可回到命令行模式；底行模式下，可以将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号等。</p>\n<p>vim编辑器的常用命令:</p>\n<ol>\n<li><code>vim /etc/apt/sources.list</code> 打开文件(不存在的文件,在保存时自动创建) 默认(命令模式)</li>\n<li><code>i</code> (插入模式) 在光标前开始插入</li>\n<li><code>a</code> (插入模式) 在光标后开始插入</li>\n<li><code>shift + :</code> (命令模式) 调出vim的命令行, 输入命令(<code>wq</code>保存退出、<code>q!</code>不保存退出、 <code>w</code>仅保存)</li>\n<li><code>d + up键</code> (命令模式) <em>浏览模式下</em> 删除一行</li>\n</ol>\n<h4 id=\"apt-get-update、-apt-get-upgrade-不要忘记了-不管有没有换源都要执行的\"><a href=\"#apt-get-update、-apt-get-upgrade-不要忘记了-不管有没有换源都要执行的\" class=\"headerlink\" title=\"apt-get update、 apt-get upgrade 不要忘记了, 不管有没有换源都要执行的\"></a>apt-get update、 apt-get upgrade 不要忘记了, 不管有没有换源都要执行的</h4><h3 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h3><p><em>zsh</em>是一个终端shell程序,比默认的bash终端好用, 可以搭配<em>oh-my-zsh</em>美化你的命令行</p>\n<p>官网<a href=\"https://ohmyz.sh/\">oh-my-zsh</a></p>\n<h4 id=\"安装-zsh-oh-my-zsh\"><a href=\"#安装-zsh-oh-my-zsh\" class=\"headerlink\" title=\"安装 zsh oh-my-zsh\"></a>安装 zsh oh-my-zsh</h4><p>安装zsh</p>\n<p><code>sudo apt-get install zsh</code></p>\n<p>检查zsh</p>\n<p><code>zsh --version</code></p>\n<p>如果没有看到版本号、或者报错,则说明安装失败了</p>\n<p>设置为默认终端</p>\n<p><code>sudo chsh -s /usr/bin/zsh &lt;username&gt;</code></p>\n<p>如果报错, 则看一下 <code>/etc/shells</code> 文件中是否包含 <code>/bin/zsh</code>、<code>/usr/bin/zsh</code>, 没有就添加</p>\n<p><img src=\"./WX20200108-173249@2x.png\" alt=\" \"></p>\n<p>顺序不重要</p>\n<p>再次执行 <code>sudo chsh -s /usr/bin/zsh &lt;username&gt;</code></p>\n<p>成功则<strong>关闭终端,重新打开(退出用户,重新登陆)</strong></p>\n<p>执行 <code>bash</code> 进入Linux子系统</p>\n<p>执行 <code>echo $SHELL</code> 会输出 <code>/bin/zsh</code></p>\n<p>执行 <code>$SHELL --version</code> 会输出 <code>zsh 5.4.2 (x86_64-ubuntu-linux-gnu)</code></p>\n<p>上面两部执行正确,则说明安装zsh并设置为默认终端成功了,</p>\n<h4 id=\"我遇到的windows10子系统的一个问题\"><a href=\"#我遇到的windows10子系统的一个问题\" class=\"headerlink\" title=\"我遇到的windows10子系统的一个问题\"></a>我遇到的windows10子系统的一个问题</h4><p>在设置为默认终端时,为参考官方教程来做,无法将zsh设置为默认终端</p>\n<p>官方命令: <code>sudo chsh -s $(which zsh)</code></p>\n<p>检查是否设置默认成功: <code>echo $SHELL</code></p>\n<p>终端应该输出: <code>/bin/zsh</code>, 如果不是 或者是 空 则说明默认配置是失败的</p>\n<p>查看 <code>/etc/passwd</code> 文件中 对应你的用户配置 是否是 指定 <code>/bin/zsh</code></p>\n<h5 id=\"最终解决问题的办法\"><a href=\"#最终解决问题的办法\" class=\"headerlink\" title=\"最终解决问题的办法\"></a>最终解决问题的办法</h5><p>编辑 <code>~/.bash_profile</code> 文件，（不存在就创建）</p>\n<p>加入以下类容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定 zsh的目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> SHELL=/bin/zsh</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$SHELL</span>:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每次打开终端的时候运行zsh</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"variable\">$SHELL</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./WX20200108-173321@2x.png\" alt=\" \"></p>\n<p>执行 <code>sudo chsh -s /usr/bin/zsh &lt;username&gt;</code> 命令 (最后面对应你的用户名)</p>\n<h4 id=\"下载-oh-my-zsh-美化zsh\"><a href=\"#下载-oh-my-zsh-美化zsh\" class=\"headerlink\" title=\"下载 oh-my-zsh 美化zsh\"></a>下载 oh-my-zsh 美化zsh</h4><p>参考官方的教程</p>\n<p>使用 curl</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 wget</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认是 robbyrussell 样式</p>\n<p>修改 <code>~/.zshrc</code> 的 <code>ZSH_THEME=robbyrussell</code> 值 即可更换样式, 如果你不想要任何样式,则将值设置为””即可</p>\n<p><a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\">主题库</a></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>后面需要学习的:</p>\n<ol>\n<li>安装docker</li>\n<li>putty远程连接</li>\n</ol>\n<h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>…</p>\n"},{"title":"mysql的explain命令","date":"2020-01-02T10:16:21.000Z","_content":"\n**explain**关键字可以模拟MySQL优化器执行SQL语句，可以很好的分析SQL语句或表结构的性能瓶颈.\n\n## explain的用途\n\n1. 表的读取顺序如何\n2. 数据读取操作有哪些操作类型\n3. 哪些索引可以使用\n4. 哪些索引被实际使用\n5. 表之间是如何引用\n6. 每张表有多少行被优化器查询\n7. ......\n\n## explain的主要字段有\n\n1. **id** select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序\n2. **select_type** 查询类型\n3. **table** 正在访问哪个表\n4. **partitions** 匹配的分区\n5. **type** 访问的类型\n6. **possible_keys** 显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到\n7. **key** 实际使用到的索引，如果为NULL，则没有使用索引\n8. **key_len** 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度\n9. **ref** 显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值\n10. **rows** 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数\n11. **filtered** 查询的表行占表的百分比\n12. **Extra** 包含不适合在其它列中显示但十分重要的额外信息\n\n## 最后\n\n![ ](./2864885534-202c0878c1abf896.png)\n\n......\n","source":"_posts/mysql-explain.md","raw":"---\ntitle: mysql的explain命令\ndate: 2020-01-02 18:16:21\ntags: 数据库\n---\n\n**explain**关键字可以模拟MySQL优化器执行SQL语句，可以很好的分析SQL语句或表结构的性能瓶颈.\n\n## explain的用途\n\n1. 表的读取顺序如何\n2. 数据读取操作有哪些操作类型\n3. 哪些索引可以使用\n4. 哪些索引被实际使用\n5. 表之间是如何引用\n6. 每张表有多少行被优化器查询\n7. ......\n\n## explain的主要字段有\n\n1. **id** select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序\n2. **select_type** 查询类型\n3. **table** 正在访问哪个表\n4. **partitions** 匹配的分区\n5. **type** 访问的类型\n6. **possible_keys** 显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到\n7. **key** 实际使用到的索引，如果为NULL，则没有使用索引\n8. **key_len** 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度\n9. **ref** 显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值\n10. **rows** 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数\n11. **filtered** 查询的表行占表的百分比\n12. **Extra** 包含不适合在其它列中显示但十分重要的额外信息\n\n## 最后\n\n![ ](./2864885534-202c0878c1abf896.png)\n\n......\n","slug":"mysql-explain","published":1,"updated":"2021-11-04T15:54:07.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihy000xahte895f7ov1","content":"<p><strong>explain</strong>关键字可以模拟MySQL优化器执行SQL语句，可以很好的分析SQL语句或表结构的性能瓶颈.</p>\n<h2 id=\"explain的用途\"><a href=\"#explain的用途\" class=\"headerlink\" title=\"explain的用途\"></a>explain的用途</h2><ol>\n<li>表的读取顺序如何</li>\n<li>数据读取操作有哪些操作类型</li>\n<li>哪些索引可以使用</li>\n<li>哪些索引被实际使用</li>\n<li>表之间是如何引用</li>\n<li>每张表有多少行被优化器查询</li>\n<li>……</li>\n</ol>\n<h2 id=\"explain的主要字段有\"><a href=\"#explain的主要字段有\" class=\"headerlink\" title=\"explain的主要字段有\"></a>explain的主要字段有</h2><ol>\n<li><strong>id</strong> select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</li>\n<li><strong>select_type</strong> 查询类型</li>\n<li><strong>table</strong> 正在访问哪个表</li>\n<li><strong>partitions</strong> 匹配的分区</li>\n<li><strong>type</strong> 访问的类型</li>\n<li><strong>possible_keys</strong> 显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到</li>\n<li><strong>key</strong> 实际使用到的索引，如果为NULL，则没有使用索引</li>\n<li><strong>key_len</strong> 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</li>\n<li><strong>ref</strong> 显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</li>\n<li><strong>rows</strong> 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</li>\n<li><strong>filtered</strong> 查询的表行占表的百分比</li>\n<li><strong>Extra</strong> 包含不适合在其它列中显示但十分重要的额外信息</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p><img src=\"./2864885534-202c0878c1abf896.png\" alt=\" \"></p>\n<p>……</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>explain</strong>关键字可以模拟MySQL优化器执行SQL语句，可以很好的分析SQL语句或表结构的性能瓶颈.</p>\n<h2 id=\"explain的用途\"><a href=\"#explain的用途\" class=\"headerlink\" title=\"explain的用途\"></a>explain的用途</h2><ol>\n<li>表的读取顺序如何</li>\n<li>数据读取操作有哪些操作类型</li>\n<li>哪些索引可以使用</li>\n<li>哪些索引被实际使用</li>\n<li>表之间是如何引用</li>\n<li>每张表有多少行被优化器查询</li>\n<li>……</li>\n</ol>\n<h2 id=\"explain的主要字段有\"><a href=\"#explain的主要字段有\" class=\"headerlink\" title=\"explain的主要字段有\"></a>explain的主要字段有</h2><ol>\n<li><strong>id</strong> select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</li>\n<li><strong>select_type</strong> 查询类型</li>\n<li><strong>table</strong> 正在访问哪个表</li>\n<li><strong>partitions</strong> 匹配的分区</li>\n<li><strong>type</strong> 访问的类型</li>\n<li><strong>possible_keys</strong> 显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到</li>\n<li><strong>key</strong> 实际使用到的索引，如果为NULL，则没有使用索引</li>\n<li><strong>key_len</strong> 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</li>\n<li><strong>ref</strong> 显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</li>\n<li><strong>rows</strong> 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</li>\n<li><strong>filtered</strong> 查询的表行占表的百分比</li>\n<li><strong>Extra</strong> 包含不适合在其它列中显示但十分重要的额外信息</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p><img src=\"./2864885534-202c0878c1abf896.png\" alt=\" \"></p>\n<p>……</p>\n"},{"title":"mysql学习笔记","date":"2019-06-05T09:00:05.000Z","_content":"\n这篇文章主要是我日常使用mysql的一些记录\n我使用的mysql版本是:`5.7`\n\n## MySQL 相关文章\n\n[【链接】大牛总结的MySQL锁优化，写得太好了！](https://cloud.tencent.com/developer/news/456119)\n[【链接】一篇文章弄懂MySQL的事务隔离级别](https://mp.weixin.qq.com/s/p32Tc6XhbHq_NbJWAiZnhQ)\n\n## 用户\n\n### 创建用户\n\n```sh\ncreate user 'testuser'@'%' identified by 'password';\n```\n\n创建 `testuser` 用户, 可以在所有主机上登陆使用, 密码为`password`;\n\n1. testuser 是创建的用户名\n2. % 是主机名,指定哪些主机可以使用改用户\n   1. %/0.0.0.0 所有主机可以使用\n   2. localhost/127.0.0.1 本机可以使用\n   3. ...\n3. password 是创建的用户登陆密码, 如果指定为 `identified by ''` 则不设置密码\n\n### 删除用户\n\n```sh\ndrop user 'apollo'@'%';\n```\n\n### 用户权限\n\n#### 授予权限\n\n```sh\ngrant all on testdb.* to 'testuser'@'%';\ngrant select on testdb.* to 'testuser'@'%';\ngrant insert on testdb.* to 'testuser'@'%';\n```\n\n授予用户`testuser`在所有主机上使用`testdb`数据库下**所有表**的权限\n\n+ all 代表权限\n  + select 查询权限\n  + insert 插入权限\n  + delete 删除权限\n  + update 修改权限\n+ testdb.* 改数据库下的所有表\n+ 'testuser'@'%' 表示`testuser`在`%`主机可以使用授予的权限\n\n#### 刷新权限\n\n`flush privileges;`\n\n#### 删除权限\n\n```sh\nREVOKE ALL ON test.* FROM 'testuser'@'%';\nREVOKE select ON test.* FROM 'testuser'@'%';\nREVOKE insert ON test.* FROM 'testuser'@'%';\n```\n\n+ 删除所有权限\n+ 删除查询权限\n+ 删除插入权限\n\n#### 查看用户权限\n\n`SHOW GRANTS FOR 'testuser'@'%';`\n\n## 数据库\n\n### 基本语法\n\n#### 函数\n\n##### 类型转换函数\n\n用于类型转化 CAST()和CONVERT()\n\n```sh\nCAST(value as type);\nCONVERT(value, type);\n```\n\n可以转换的类型是有限制的。这个类型可以是以下值其中的一个：\n\n+ 二进制，同带binary前缀的效果 : BINARY\n+ 字符型，可带参数 : CHAR()\n+ 日期 : DATE\n+ 时间: TIME\n+ 日期时间型 : DATETIME\n+ 浮点数 : DECIMAL\n+ 整数 : SIGNED\n+ 无符号整数 : UNSIGNED\n\n示例:\n\n```sh\n# 1\nmysql> SELECT CONVERT('23',SIGNED);\n+----------------------+\n| CONVERT('23',SIGNED) |\n+----------------------+\n|                   23 |\n+----------------------+\n1 row in set\n\n# 2\nmysql> SELECT CAST('125e342.83' AS signed);\n+------------------------------+\n| CAST('125e342.83' AS signed) |\n+------------------------------+\n|                          125 |\n+------------------------------+\n1 row in set\n\n# 3\nmysql> SELECT CAST('3.35' AS signed);\n+------------------------+\n| CAST('3.35' AS signed) |\n+------------------------+\n|                      3 |\n+------------------------+\n1 row in set\n```\n\n##### 格式化函数\n\n##### 随机数 rand()\n\n```sh\nselect rand()\n```\n\n#### 时间\n\n##### 获取系统时间 `now()` 和 `sysdate()` 这两个函数的区别是, `now()`在执行前就确认了值, `sysdate()`在执行时动态确认值\n\n例子:\n\n```sh\n> select now(), sleep(3), now();\n> select sysdate(), sleep(3), sysdate();\n```\n\n> 感兴趣的可以看一下这两天sql执行的结果\n\n##### 获得当前时间戳函数：current_timestamp, current_timestamp()\n\n语法: `select current_timestamp, current_timestamp()`\n\n##### 日期、时间转换\n\n时间转换为字符串 date_format(date,format), time_format(time,format)\n\n时间格式化函数 DATE_FORMAT(date, format)\n\n1. date 时间\n2. format 参数格式有\n\n参数|说明\n:----:|:-----------------------:\n%a|缩写星期名\n%b|缩写月名\n%c|月，数值\n%D|带有英文前缀的月中的天\n%d|月的天，数值(00-31)\n%e|月的天，数值(0-31)\n%f|微秒\n%H|小时 (00-23)\n%h|小时 (01-12)\n%I|小时 (01-12)\n%i|分钟，数值(00-59)\n%j|年的天 (001-366)\n%k|小时 (0-23)\n%l|小时 (1-12)\n%M|月名\n%m|月，数值(00-12)\n%p|AM 或 PM\n%r|时间，12-小时（hh:mm:ss AM 或 PM）\n%S|秒(00-59)\n%s|秒(00-59)\n%T|时间, 24-小时 (hh:mm:ss)\n%U|周 (00-53) 星期日是一周的第一天\n%u|周 (00-53) 星期一是一周的第一天\n%V|周 (01-53) 星期日是一周的第一天，与 %X 使用\n%v|周 (01-53) 星期一是一周的第一天，与 %x 使用\n%W|星期名\n%w|周的天 （0=星期日, 6=星期六）\n%X|年，其中的星期日是周的第一天，4 位，与 %V 使用\n%x|年，其中的星期一是周的第一天，4 位，与 %v 使用\n%Y|年，4 位\n%y|年，2 位\n\n字符串转换为时间 str_to_date(str, format)\n\n(日期、天数）转换函数：to_days(date), from_days(days)\n\n(时间、秒）转换函数：time_to_sec(time), sec_to_time(seconds)\n\n拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)\n\nUnix 时间戳、日期）转换函数\n\n1. unix_timestamp(),\n2. unix_timestamp(date),\n3. from_unixtime(unix_timestamp),\n4. from_unixtime(unix_timestamp,format)\n   1. 格式化函数 FROM_UNIXTIME(unix_timestamp, [format])\n   2. unix_timestamp 一般为10位的时间戳，如:1417363200\n   3. format *可选* 转换之后的时间字符串显示的格式;\n\n##### 日期时间计算函数\n\n增加一个时间间隔：DATE_ADD(date,INTERVAL expr type)\n\n+ date 要操作的时间\n+ expr 要添加的时间间隔\n+ type 参考下表\n\ntype的值|备注\n:----------:|:-------:\nMICROSECOND|\nSECOND|秒\nMINUTE|分\nHOUR|小时\nDAY|天\nWEEK|星期\nMONTH|月\nQUARTER|?\nYEAR|年\nSECOND_MICROSECOND|\nMINUTE_MICROSECOND|\nMINUTE_SECOND|\nHOUR_MICROSECOND|\nHOUR_SECOND|\nHOUR_MINUTE|\nDAY_MICROSECOND|\nDAY_SECOND|\nDAY_MINUTE|\nDAY_HOUR|\nYEAR_MONTH|\n\n> adddate(), addtime()函数，可以用 date_add() 来替代\n\n日期减去一个时间间隔：DATE_SUB(date,INTERVAL expr type)\n\n> DATE_SUB(date,INTERVAL expr type) 日期时间函数 和 date_add() 用法一致\n\n日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)\n\n1. datediff 返回天数差距\n2. timediff 返回time差距\n\n> 注意：timediff(time1,time2) 函数的两个参数类型必须相同。\n\n时间戳（timestamp）转换、增、减函数\n\n1. timestamp(date) -- date to timestamp\n2. timestamp(dt,time) -- dt + time\n3. timestampadd(unit,interval,datetime_expr) --\n4. timestampdiff(unit,datetime_expr1,datetime_expr2) --\n\n示例:\n\n```sh\nselect timestamp('2008-08-08'); -- 2008-08-08 00:00:00\nselect timestamp('2008-08-08 08:00:00', '01:01:01'); -- 2008-08-08 09:01:01\nselect timestamp('2008-08-08 08:00:00', '10 01:01:01'); -- 2008-08-18 09:01:01\n\nselect timestampadd(day, 1, '2008-08-08 08:00:00'); -- 2008-08-09 08:00:00\nselect date_add('2008-08-08 08:00:00', interval 1 day); -- 2008-08-09 08:00:00\n\ntimestampadd() 函数类似于 date_add()。\nselect timestampdiff(year,'2002-05-01','2001-01-01'); -- -1\nselect timestampdiff(day ,'2002-05-01','2001-01-01'); -- -485\nselect timestampdiff(hour,'2008-08-08 12:00:00','2008-08-08 00:00:00'); -- -12\n\nselect datediff('2008-08-08 12:00:00', '2008-08-01 00:00:00'); -- 7\n```\n\n> timestampdiff() 函数就比 datediff() 功能强多了，datediff() 只能计算两个日期（date）之间相差的天数。\n\n时区（timezone）转换函数\n\n```sh\nconvert_tz(dt,from_tz,to_tz)\n\nselect convert_tz('2008-08-08 12:00:00', '+08:00', '+00:00'); -- 2008-08-08 04:00:00\n```\n\n> 时区转换也可以通过 date_add, date_sub, timestampadd 来实现\n\n## 相关链接\n\n[MySQL CAST与CONVERT 函数的用法](https://www.cnblogs.com/chenqionghe/p/4675844.html)\n\n[MySQL 日期格式](https://www.cnblogs.com/dest/p/4205371.html)\n\n## 结语\n\n每天都要去折腾才能进步\n","source":"_posts/mysql5-7.md","raw":"---\ntitle: mysql学习笔记\ndate: 2019-06-05 17:00:05\ntags: 数据库\n---\n\n这篇文章主要是我日常使用mysql的一些记录\n我使用的mysql版本是:`5.7`\n\n## MySQL 相关文章\n\n[【链接】大牛总结的MySQL锁优化，写得太好了！](https://cloud.tencent.com/developer/news/456119)\n[【链接】一篇文章弄懂MySQL的事务隔离级别](https://mp.weixin.qq.com/s/p32Tc6XhbHq_NbJWAiZnhQ)\n\n## 用户\n\n### 创建用户\n\n```sh\ncreate user 'testuser'@'%' identified by 'password';\n```\n\n创建 `testuser` 用户, 可以在所有主机上登陆使用, 密码为`password`;\n\n1. testuser 是创建的用户名\n2. % 是主机名,指定哪些主机可以使用改用户\n   1. %/0.0.0.0 所有主机可以使用\n   2. localhost/127.0.0.1 本机可以使用\n   3. ...\n3. password 是创建的用户登陆密码, 如果指定为 `identified by ''` 则不设置密码\n\n### 删除用户\n\n```sh\ndrop user 'apollo'@'%';\n```\n\n### 用户权限\n\n#### 授予权限\n\n```sh\ngrant all on testdb.* to 'testuser'@'%';\ngrant select on testdb.* to 'testuser'@'%';\ngrant insert on testdb.* to 'testuser'@'%';\n```\n\n授予用户`testuser`在所有主机上使用`testdb`数据库下**所有表**的权限\n\n+ all 代表权限\n  + select 查询权限\n  + insert 插入权限\n  + delete 删除权限\n  + update 修改权限\n+ testdb.* 改数据库下的所有表\n+ 'testuser'@'%' 表示`testuser`在`%`主机可以使用授予的权限\n\n#### 刷新权限\n\n`flush privileges;`\n\n#### 删除权限\n\n```sh\nREVOKE ALL ON test.* FROM 'testuser'@'%';\nREVOKE select ON test.* FROM 'testuser'@'%';\nREVOKE insert ON test.* FROM 'testuser'@'%';\n```\n\n+ 删除所有权限\n+ 删除查询权限\n+ 删除插入权限\n\n#### 查看用户权限\n\n`SHOW GRANTS FOR 'testuser'@'%';`\n\n## 数据库\n\n### 基本语法\n\n#### 函数\n\n##### 类型转换函数\n\n用于类型转化 CAST()和CONVERT()\n\n```sh\nCAST(value as type);\nCONVERT(value, type);\n```\n\n可以转换的类型是有限制的。这个类型可以是以下值其中的一个：\n\n+ 二进制，同带binary前缀的效果 : BINARY\n+ 字符型，可带参数 : CHAR()\n+ 日期 : DATE\n+ 时间: TIME\n+ 日期时间型 : DATETIME\n+ 浮点数 : DECIMAL\n+ 整数 : SIGNED\n+ 无符号整数 : UNSIGNED\n\n示例:\n\n```sh\n# 1\nmysql> SELECT CONVERT('23',SIGNED);\n+----------------------+\n| CONVERT('23',SIGNED) |\n+----------------------+\n|                   23 |\n+----------------------+\n1 row in set\n\n# 2\nmysql> SELECT CAST('125e342.83' AS signed);\n+------------------------------+\n| CAST('125e342.83' AS signed) |\n+------------------------------+\n|                          125 |\n+------------------------------+\n1 row in set\n\n# 3\nmysql> SELECT CAST('3.35' AS signed);\n+------------------------+\n| CAST('3.35' AS signed) |\n+------------------------+\n|                      3 |\n+------------------------+\n1 row in set\n```\n\n##### 格式化函数\n\n##### 随机数 rand()\n\n```sh\nselect rand()\n```\n\n#### 时间\n\n##### 获取系统时间 `now()` 和 `sysdate()` 这两个函数的区别是, `now()`在执行前就确认了值, `sysdate()`在执行时动态确认值\n\n例子:\n\n```sh\n> select now(), sleep(3), now();\n> select sysdate(), sleep(3), sysdate();\n```\n\n> 感兴趣的可以看一下这两天sql执行的结果\n\n##### 获得当前时间戳函数：current_timestamp, current_timestamp()\n\n语法: `select current_timestamp, current_timestamp()`\n\n##### 日期、时间转换\n\n时间转换为字符串 date_format(date,format), time_format(time,format)\n\n时间格式化函数 DATE_FORMAT(date, format)\n\n1. date 时间\n2. format 参数格式有\n\n参数|说明\n:----:|:-----------------------:\n%a|缩写星期名\n%b|缩写月名\n%c|月，数值\n%D|带有英文前缀的月中的天\n%d|月的天，数值(00-31)\n%e|月的天，数值(0-31)\n%f|微秒\n%H|小时 (00-23)\n%h|小时 (01-12)\n%I|小时 (01-12)\n%i|分钟，数值(00-59)\n%j|年的天 (001-366)\n%k|小时 (0-23)\n%l|小时 (1-12)\n%M|月名\n%m|月，数值(00-12)\n%p|AM 或 PM\n%r|时间，12-小时（hh:mm:ss AM 或 PM）\n%S|秒(00-59)\n%s|秒(00-59)\n%T|时间, 24-小时 (hh:mm:ss)\n%U|周 (00-53) 星期日是一周的第一天\n%u|周 (00-53) 星期一是一周的第一天\n%V|周 (01-53) 星期日是一周的第一天，与 %X 使用\n%v|周 (01-53) 星期一是一周的第一天，与 %x 使用\n%W|星期名\n%w|周的天 （0=星期日, 6=星期六）\n%X|年，其中的星期日是周的第一天，4 位，与 %V 使用\n%x|年，其中的星期一是周的第一天，4 位，与 %v 使用\n%Y|年，4 位\n%y|年，2 位\n\n字符串转换为时间 str_to_date(str, format)\n\n(日期、天数）转换函数：to_days(date), from_days(days)\n\n(时间、秒）转换函数：time_to_sec(time), sec_to_time(seconds)\n\n拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)\n\nUnix 时间戳、日期）转换函数\n\n1. unix_timestamp(),\n2. unix_timestamp(date),\n3. from_unixtime(unix_timestamp),\n4. from_unixtime(unix_timestamp,format)\n   1. 格式化函数 FROM_UNIXTIME(unix_timestamp, [format])\n   2. unix_timestamp 一般为10位的时间戳，如:1417363200\n   3. format *可选* 转换之后的时间字符串显示的格式;\n\n##### 日期时间计算函数\n\n增加一个时间间隔：DATE_ADD(date,INTERVAL expr type)\n\n+ date 要操作的时间\n+ expr 要添加的时间间隔\n+ type 参考下表\n\ntype的值|备注\n:----------:|:-------:\nMICROSECOND|\nSECOND|秒\nMINUTE|分\nHOUR|小时\nDAY|天\nWEEK|星期\nMONTH|月\nQUARTER|?\nYEAR|年\nSECOND_MICROSECOND|\nMINUTE_MICROSECOND|\nMINUTE_SECOND|\nHOUR_MICROSECOND|\nHOUR_SECOND|\nHOUR_MINUTE|\nDAY_MICROSECOND|\nDAY_SECOND|\nDAY_MINUTE|\nDAY_HOUR|\nYEAR_MONTH|\n\n> adddate(), addtime()函数，可以用 date_add() 来替代\n\n日期减去一个时间间隔：DATE_SUB(date,INTERVAL expr type)\n\n> DATE_SUB(date,INTERVAL expr type) 日期时间函数 和 date_add() 用法一致\n\n日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)\n\n1. datediff 返回天数差距\n2. timediff 返回time差距\n\n> 注意：timediff(time1,time2) 函数的两个参数类型必须相同。\n\n时间戳（timestamp）转换、增、减函数\n\n1. timestamp(date) -- date to timestamp\n2. timestamp(dt,time) -- dt + time\n3. timestampadd(unit,interval,datetime_expr) --\n4. timestampdiff(unit,datetime_expr1,datetime_expr2) --\n\n示例:\n\n```sh\nselect timestamp('2008-08-08'); -- 2008-08-08 00:00:00\nselect timestamp('2008-08-08 08:00:00', '01:01:01'); -- 2008-08-08 09:01:01\nselect timestamp('2008-08-08 08:00:00', '10 01:01:01'); -- 2008-08-18 09:01:01\n\nselect timestampadd(day, 1, '2008-08-08 08:00:00'); -- 2008-08-09 08:00:00\nselect date_add('2008-08-08 08:00:00', interval 1 day); -- 2008-08-09 08:00:00\n\ntimestampadd() 函数类似于 date_add()。\nselect timestampdiff(year,'2002-05-01','2001-01-01'); -- -1\nselect timestampdiff(day ,'2002-05-01','2001-01-01'); -- -485\nselect timestampdiff(hour,'2008-08-08 12:00:00','2008-08-08 00:00:00'); -- -12\n\nselect datediff('2008-08-08 12:00:00', '2008-08-01 00:00:00'); -- 7\n```\n\n> timestampdiff() 函数就比 datediff() 功能强多了，datediff() 只能计算两个日期（date）之间相差的天数。\n\n时区（timezone）转换函数\n\n```sh\nconvert_tz(dt,from_tz,to_tz)\n\nselect convert_tz('2008-08-08 12:00:00', '+08:00', '+00:00'); -- 2008-08-08 04:00:00\n```\n\n> 时区转换也可以通过 date_add, date_sub, timestampadd 来实现\n\n## 相关链接\n\n[MySQL CAST与CONVERT 函数的用法](https://www.cnblogs.com/chenqionghe/p/4675844.html)\n\n[MySQL 日期格式](https://www.cnblogs.com/dest/p/4205371.html)\n\n## 结语\n\n每天都要去折腾才能进步\n","slug":"mysql5-7","published":1,"updated":"2021-11-04T15:54:07.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihz000yahtec90636kh","content":"<p>这篇文章主要是我日常使用mysql的一些记录<br>我使用的mysql版本是:<code>5.7</code></p>\n<h2 id=\"MySQL-相关文章\"><a href=\"#MySQL-相关文章\" class=\"headerlink\" title=\"MySQL 相关文章\"></a>MySQL 相关文章</h2><p><a href=\"https://cloud.tencent.com/developer/news/456119\">【链接】大牛总结的MySQL锁优化，写得太好了！</a><br><a href=\"https://mp.weixin.qq.com/s/p32Tc6XhbHq_NbJWAiZnhQ\">【链接】一篇文章弄懂MySQL的事务隔离级别</a></p>\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified by <span class=\"string\">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>创建 <code>testuser</code> 用户, 可以在所有主机上登陆使用, 密码为<code>password</code>;</p>\n<ol>\n<li>testuser 是创建的用户名</li>\n<li>% 是主机名,指定哪些主机可以使用改用户<ol>\n<li>%/0.0.0.0 所有主机可以使用</li>\n<li>localhost/127.0.0.1 本机可以使用</li>\n<li>…</li>\n</ol>\n</li>\n<li>password 是创建的用户登陆密码, 如果指定为 <code>identified by &#39;&#39;</code> 则不设置密码</li>\n</ol>\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop user <span class=\"string\">&#x27;apollo&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户权限\"><a href=\"#用户权限\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h3><h4 id=\"授予权限\"><a href=\"#授予权限\" class=\"headerlink\" title=\"授予权限\"></a>授予权限</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all on testdb.* to <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">grant select on testdb.* to <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">grant insert on testdb.* to <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>授予用户<code>testuser</code>在所有主机上使用<code>testdb</code>数据库下<strong>所有表</strong>的权限</p>\n<ul>\n<li>all 代表权限<ul>\n<li>select 查询权限</li>\n<li>insert 插入权限</li>\n<li>delete 删除权限</li>\n<li>update 修改权限</li>\n</ul>\n</li>\n<li>testdb.* 改数据库下的所有表</li>\n<li>‘testuser’@’%’ 表示<code>testuser</code>在<code>%</code>主机可以使用授予的权限</li>\n</ul>\n<h4 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h4><p><code>flush privileges;</code></p>\n<h4 id=\"删除权限\"><a href=\"#删除权限\" class=\"headerlink\" title=\"删除权限\"></a>删除权限</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REVOKE ALL ON <span class=\"built_in\">test</span>.* FROM <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">REVOKE select ON <span class=\"built_in\">test</span>.* FROM <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">REVOKE insert ON <span class=\"built_in\">test</span>.* FROM <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除所有权限</li>\n<li>删除查询权限</li>\n<li>删除插入权限</li>\n</ul>\n<h4 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h4><p><code>SHOW GRANTS FOR &#39;testuser&#39;@&#39;%&#39;;</code></p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><h5 id=\"类型转换函数\"><a href=\"#类型转换函数\" class=\"headerlink\" title=\"类型转换函数\"></a>类型转换函数</h5><p>用于类型转化 CAST()和CONVERT()</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAST(value as <span class=\"built_in\">type</span>);</span><br><span class=\"line\">CONVERT(value, <span class=\"built_in\">type</span>);</span><br></pre></td></tr></table></figure>\n\n<p>可以转换的类型是有限制的。这个类型可以是以下值其中的一个：</p>\n<ul>\n<li>二进制，同带binary前缀的效果 : BINARY</li>\n<li>字符型，可带参数 : CHAR()</li>\n<li>日期 : DATE</li>\n<li>时间: TIME</li>\n<li>日期时间型 : DATETIME</li>\n<li>浮点数 : DECIMAL</li>\n<li>整数 : SIGNED</li>\n<li>无符号整数 : UNSIGNED</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\">mysql&gt; SELECT CONVERT(<span class=\"string\">&#x27;23&#x27;</span>,SIGNED);</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">| CONVERT(<span class=\"string\">&#x27;23&#x27;</span>,SIGNED) |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                   23 |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br><span class=\"line\">mysql&gt; SELECT CAST(<span class=\"string\">&#x27;125e342.83&#x27;</span> AS signed);</span><br><span class=\"line\">+------------------------------+</span><br><span class=\"line\">| CAST(<span class=\"string\">&#x27;125e342.83&#x27;</span> AS signed) |</span><br><span class=\"line\">+------------------------------+</span><br><span class=\"line\">|                          125 |</span><br><span class=\"line\">+------------------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3</span></span><br><span class=\"line\">mysql&gt; SELECT CAST(<span class=\"string\">&#x27;3.35&#x27;</span> AS signed);</span><br><span class=\"line\">+------------------------+</span><br><span class=\"line\">| CAST(<span class=\"string\">&#x27;3.35&#x27;</span> AS signed) |</span><br><span class=\"line\">+------------------------+</span><br><span class=\"line\">|                      3 |</span><br><span class=\"line\">+------------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"格式化函数\"><a href=\"#格式化函数\" class=\"headerlink\" title=\"格式化函数\"></a>格式化函数</h5><h5 id=\"随机数-rand\"><a href=\"#随机数-rand\" class=\"headerlink\" title=\"随机数 rand()\"></a>随机数 rand()</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select rand()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><h5 id=\"获取系统时间-now-和-sysdate-这两个函数的区别是-now-在执行前就确认了值-sysdate-在执行时动态确认值\"><a href=\"#获取系统时间-now-和-sysdate-这两个函数的区别是-now-在执行前就确认了值-sysdate-在执行时动态确认值\" class=\"headerlink\" title=\"获取系统时间 now() 和 sysdate() 这两个函数的区别是, now()在执行前就确认了值, sysdate()在执行时动态确认值\"></a>获取系统时间 <code>now()</code> 和 <code>sysdate()</code> 这两个函数的区别是, <code>now()</code>在执行前就确认了值, <code>sysdate()</code>在执行时动态确认值</h5><p>例子:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; select now(), sleep(3), now();</span><br><span class=\"line\">&gt; select sysdate(), sleep(3), sysdate();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>感兴趣的可以看一下这两天sql执行的结果</p>\n</blockquote>\n<h5 id=\"获得当前时间戳函数：current-timestamp-current-timestamp\"><a href=\"#获得当前时间戳函数：current-timestamp-current-timestamp\" class=\"headerlink\" title=\"获得当前时间戳函数：current_timestamp, current_timestamp()\"></a>获得当前时间戳函数：current_timestamp, current_timestamp()</h5><p>语法: <code>select current_timestamp, current_timestamp()</code></p>\n<h5 id=\"日期、时间转换\"><a href=\"#日期、时间转换\" class=\"headerlink\" title=\"日期、时间转换\"></a>日期、时间转换</h5><p>时间转换为字符串 date_format(date,format), time_format(time,format)</p>\n<p>时间格式化函数 DATE_FORMAT(date, format)</p>\n<ol>\n<li>date 时间</li>\n<li>format 参数格式有</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">%a</td>\n<td align=\"center\">缩写星期名</td>\n</tr>\n<tr>\n<td align=\"center\">%b</td>\n<td align=\"center\">缩写月名</td>\n</tr>\n<tr>\n<td align=\"center\">%c</td>\n<td align=\"center\">月，数值</td>\n</tr>\n<tr>\n<td align=\"center\">%D</td>\n<td align=\"center\">带有英文前缀的月中的天</td>\n</tr>\n<tr>\n<td align=\"center\">%d</td>\n<td align=\"center\">月的天，数值(00-31)</td>\n</tr>\n<tr>\n<td align=\"center\">%e</td>\n<td align=\"center\">月的天，数值(0-31)</td>\n</tr>\n<tr>\n<td align=\"center\">%f</td>\n<td align=\"center\">微秒</td>\n</tr>\n<tr>\n<td align=\"center\">%H</td>\n<td align=\"center\">小时 (00-23)</td>\n</tr>\n<tr>\n<td align=\"center\">%h</td>\n<td align=\"center\">小时 (01-12)</td>\n</tr>\n<tr>\n<td align=\"center\">%I</td>\n<td align=\"center\">小时 (01-12)</td>\n</tr>\n<tr>\n<td align=\"center\">%i</td>\n<td align=\"center\">分钟，数值(00-59)</td>\n</tr>\n<tr>\n<td align=\"center\">%j</td>\n<td align=\"center\">年的天 (001-366)</td>\n</tr>\n<tr>\n<td align=\"center\">%k</td>\n<td align=\"center\">小时 (0-23)</td>\n</tr>\n<tr>\n<td align=\"center\">%l</td>\n<td align=\"center\">小时 (1-12)</td>\n</tr>\n<tr>\n<td align=\"center\">%M</td>\n<td align=\"center\">月名</td>\n</tr>\n<tr>\n<td align=\"center\">%m</td>\n<td align=\"center\">月，数值(00-12)</td>\n</tr>\n<tr>\n<td align=\"center\">%p</td>\n<td align=\"center\">AM 或 PM</td>\n</tr>\n<tr>\n<td align=\"center\">%r</td>\n<td align=\"center\">时间，12-小时（hh:mm:ss AM 或 PM）</td>\n</tr>\n<tr>\n<td align=\"center\">%S</td>\n<td align=\"center\">秒(00-59)</td>\n</tr>\n<tr>\n<td align=\"center\">%s</td>\n<td align=\"center\">秒(00-59)</td>\n</tr>\n<tr>\n<td align=\"center\">%T</td>\n<td align=\"center\">时间, 24-小时 (hh:mm:ss)</td>\n</tr>\n<tr>\n<td align=\"center\">%U</td>\n<td align=\"center\">周 (00-53) 星期日是一周的第一天</td>\n</tr>\n<tr>\n<td align=\"center\">%u</td>\n<td align=\"center\">周 (00-53) 星期一是一周的第一天</td>\n</tr>\n<tr>\n<td align=\"center\">%V</td>\n<td align=\"center\">周 (01-53) 星期日是一周的第一天，与 %X 使用</td>\n</tr>\n<tr>\n<td align=\"center\">%v</td>\n<td align=\"center\">周 (01-53) 星期一是一周的第一天，与 %x 使用</td>\n</tr>\n<tr>\n<td align=\"center\">%W</td>\n<td align=\"center\">星期名</td>\n</tr>\n<tr>\n<td align=\"center\">%w</td>\n<td align=\"center\">周的天 （0=星期日, 6=星期六）</td>\n</tr>\n<tr>\n<td align=\"center\">%X</td>\n<td align=\"center\">年，其中的星期日是周的第一天，4 位，与 %V 使用</td>\n</tr>\n<tr>\n<td align=\"center\">%x</td>\n<td align=\"center\">年，其中的星期一是周的第一天，4 位，与 %v 使用</td>\n</tr>\n<tr>\n<td align=\"center\">%Y</td>\n<td align=\"center\">年，4 位</td>\n</tr>\n<tr>\n<td align=\"center\">%y</td>\n<td align=\"center\">年，2 位</td>\n</tr>\n</tbody></table>\n<p>字符串转换为时间 str_to_date(str, format)</p>\n<p>(日期、天数）转换函数：to_days(date), from_days(days)</p>\n<p>(时间、秒）转换函数：time_to_sec(time), sec_to_time(seconds)</p>\n<p>拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)</p>\n<p>Unix 时间戳、日期）转换函数</p>\n<ol>\n<li>unix_timestamp(),</li>\n<li>unix_timestamp(date),</li>\n<li>from_unixtime(unix_timestamp),</li>\n<li>from_unixtime(unix_timestamp,format)<ol>\n<li>格式化函数 FROM_UNIXTIME(unix_timestamp, [format])</li>\n<li>unix_timestamp 一般为10位的时间戳，如:1417363200</li>\n<li>format <em>可选</em> 转换之后的时间字符串显示的格式;</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"日期时间计算函数\"><a href=\"#日期时间计算函数\" class=\"headerlink\" title=\"日期时间计算函数\"></a>日期时间计算函数</h5><p>增加一个时间间隔：DATE_ADD(date,INTERVAL expr type)</p>\n<ul>\n<li>date 要操作的时间</li>\n<li>expr 要添加的时间间隔</li>\n<li>type 参考下表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">type的值</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">MICROSECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">SECOND</td>\n<td align=\"center\">秒</td>\n</tr>\n<tr>\n<td align=\"center\">MINUTE</td>\n<td align=\"center\">分</td>\n</tr>\n<tr>\n<td align=\"center\">HOUR</td>\n<td align=\"center\">小时</td>\n</tr>\n<tr>\n<td align=\"center\">DAY</td>\n<td align=\"center\">天</td>\n</tr>\n<tr>\n<td align=\"center\">WEEK</td>\n<td align=\"center\">星期</td>\n</tr>\n<tr>\n<td align=\"center\">MONTH</td>\n<td align=\"center\">月</td>\n</tr>\n<tr>\n<td align=\"center\">QUARTER</td>\n<td align=\"center\">?</td>\n</tr>\n<tr>\n<td align=\"center\">YEAR</td>\n<td align=\"center\">年</td>\n</tr>\n<tr>\n<td align=\"center\">SECOND_MICROSECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">MINUTE_MICROSECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">MINUTE_SECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">HOUR_MICROSECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">HOUR_SECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">HOUR_MINUTE</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">DAY_MICROSECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">DAY_SECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">DAY_MINUTE</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">DAY_HOUR</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">YEAR_MONTH</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>adddate(), addtime()函数，可以用 date_add() 来替代</p>\n</blockquote>\n<p>日期减去一个时间间隔：DATE_SUB(date,INTERVAL expr type)</p>\n<blockquote>\n<p>DATE_SUB(date,INTERVAL expr type) 日期时间函数 和 date_add() 用法一致</p>\n</blockquote>\n<p>日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)</p>\n<ol>\n<li>datediff 返回天数差距</li>\n<li>timediff 返回time差距</li>\n</ol>\n<blockquote>\n<p>注意：timediff(time1,time2) 函数的两个参数类型必须相同。</p>\n</blockquote>\n<p>时间戳（timestamp）转换、增、减函数</p>\n<ol>\n<li>timestamp(date) – date to timestamp</li>\n<li>timestamp(dt,time) – dt + time</li>\n<li>timestampadd(unit,interval,datetime_expr) –</li>\n<li>timestampdiff(unit,datetime_expr1,datetime_expr2) –</li>\n</ol>\n<p>示例:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select timestamp(<span class=\"string\">&#x27;2008-08-08&#x27;</span>); -- 2008-08-08 00:00:00</span><br><span class=\"line\">select timestamp(<span class=\"string\">&#x27;2008-08-08 08:00:00&#x27;</span>, <span class=\"string\">&#x27;01:01:01&#x27;</span>); -- 2008-08-08 09:01:01</span><br><span class=\"line\">select timestamp(<span class=\"string\">&#x27;2008-08-08 08:00:00&#x27;</span>, <span class=\"string\">&#x27;10 01:01:01&#x27;</span>); -- 2008-08-18 09:01:01</span><br><span class=\"line\"></span><br><span class=\"line\">select timestampadd(day, 1, <span class=\"string\">&#x27;2008-08-08 08:00:00&#x27;</span>); -- 2008-08-09 08:00:00</span><br><span class=\"line\">select date_add(<span class=\"string\">&#x27;2008-08-08 08:00:00&#x27;</span>, interval 1 day); -- 2008-08-09 08:00:00</span><br><span class=\"line\"></span><br><span class=\"line\">timestampadd() 函数类似于 date_add()。</span><br><span class=\"line\">select timestampdiff(year,<span class=\"string\">&#x27;2002-05-01&#x27;</span>,<span class=\"string\">&#x27;2001-01-01&#x27;</span>); -- -1</span><br><span class=\"line\">select timestampdiff(day ,<span class=\"string\">&#x27;2002-05-01&#x27;</span>,<span class=\"string\">&#x27;2001-01-01&#x27;</span>); -- -485</span><br><span class=\"line\">select timestampdiff(hour,<span class=\"string\">&#x27;2008-08-08 12:00:00&#x27;</span>,<span class=\"string\">&#x27;2008-08-08 00:00:00&#x27;</span>); -- -12</span><br><span class=\"line\"></span><br><span class=\"line\">select datediff(<span class=\"string\">&#x27;2008-08-08 12:00:00&#x27;</span>, <span class=\"string\">&#x27;2008-08-01 00:00:00&#x27;</span>); -- 7</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>timestampdiff() 函数就比 datediff() 功能强多了，datediff() 只能计算两个日期（date）之间相差的天数。</p>\n</blockquote>\n<p>时区（timezone）转换函数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">convert_tz(dt,from_tz,to_tz)</span><br><span class=\"line\"></span><br><span class=\"line\">select convert_tz(<span class=\"string\">&#x27;2008-08-08 12:00:00&#x27;</span>, <span class=\"string\">&#x27;+08:00&#x27;</span>, <span class=\"string\">&#x27;+00:00&#x27;</span>); -- 2008-08-08 04:00:00</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时区转换也可以通过 date_add, date_sub, timestampadd 来实现</p>\n</blockquote>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p><a href=\"https://www.cnblogs.com/chenqionghe/p/4675844.html\">MySQL CAST与CONVERT 函数的用法</a></p>\n<p><a href=\"https://www.cnblogs.com/dest/p/4205371.html\">MySQL 日期格式</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>每天都要去折腾才能进步</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇文章主要是我日常使用mysql的一些记录<br>我使用的mysql版本是:<code>5.7</code></p>\n<h2 id=\"MySQL-相关文章\"><a href=\"#MySQL-相关文章\" class=\"headerlink\" title=\"MySQL 相关文章\"></a>MySQL 相关文章</h2><p><a href=\"https://cloud.tencent.com/developer/news/456119\">【链接】大牛总结的MySQL锁优化，写得太好了！</a><br><a href=\"https://mp.weixin.qq.com/s/p32Tc6XhbHq_NbJWAiZnhQ\">【链接】一篇文章弄懂MySQL的事务隔离级别</a></p>\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified by <span class=\"string\">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>创建 <code>testuser</code> 用户, 可以在所有主机上登陆使用, 密码为<code>password</code>;</p>\n<ol>\n<li>testuser 是创建的用户名</li>\n<li>% 是主机名,指定哪些主机可以使用改用户<ol>\n<li>%/0.0.0.0 所有主机可以使用</li>\n<li>localhost/127.0.0.1 本机可以使用</li>\n<li>…</li>\n</ol>\n</li>\n<li>password 是创建的用户登陆密码, 如果指定为 <code>identified by &#39;&#39;</code> 则不设置密码</li>\n</ol>\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop user <span class=\"string\">&#x27;apollo&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户权限\"><a href=\"#用户权限\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h3><h4 id=\"授予权限\"><a href=\"#授予权限\" class=\"headerlink\" title=\"授予权限\"></a>授予权限</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all on testdb.* to <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">grant select on testdb.* to <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">grant insert on testdb.* to <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>授予用户<code>testuser</code>在所有主机上使用<code>testdb</code>数据库下<strong>所有表</strong>的权限</p>\n<ul>\n<li>all 代表权限<ul>\n<li>select 查询权限</li>\n<li>insert 插入权限</li>\n<li>delete 删除权限</li>\n<li>update 修改权限</li>\n</ul>\n</li>\n<li>testdb.* 改数据库下的所有表</li>\n<li>‘testuser’@’%’ 表示<code>testuser</code>在<code>%</code>主机可以使用授予的权限</li>\n</ul>\n<h4 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h4><p><code>flush privileges;</code></p>\n<h4 id=\"删除权限\"><a href=\"#删除权限\" class=\"headerlink\" title=\"删除权限\"></a>删除权限</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REVOKE ALL ON <span class=\"built_in\">test</span>.* FROM <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">REVOKE select ON <span class=\"built_in\">test</span>.* FROM <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">REVOKE insert ON <span class=\"built_in\">test</span>.* FROM <span class=\"string\">&#x27;testuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除所有权限</li>\n<li>删除查询权限</li>\n<li>删除插入权限</li>\n</ul>\n<h4 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h4><p><code>SHOW GRANTS FOR &#39;testuser&#39;@&#39;%&#39;;</code></p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><h5 id=\"类型转换函数\"><a href=\"#类型转换函数\" class=\"headerlink\" title=\"类型转换函数\"></a>类型转换函数</h5><p>用于类型转化 CAST()和CONVERT()</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAST(value as <span class=\"built_in\">type</span>);</span><br><span class=\"line\">CONVERT(value, <span class=\"built_in\">type</span>);</span><br></pre></td></tr></table></figure>\n\n<p>可以转换的类型是有限制的。这个类型可以是以下值其中的一个：</p>\n<ul>\n<li>二进制，同带binary前缀的效果 : BINARY</li>\n<li>字符型，可带参数 : CHAR()</li>\n<li>日期 : DATE</li>\n<li>时间: TIME</li>\n<li>日期时间型 : DATETIME</li>\n<li>浮点数 : DECIMAL</li>\n<li>整数 : SIGNED</li>\n<li>无符号整数 : UNSIGNED</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\">mysql&gt; SELECT CONVERT(<span class=\"string\">&#x27;23&#x27;</span>,SIGNED);</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">| CONVERT(<span class=\"string\">&#x27;23&#x27;</span>,SIGNED) |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">|                   23 |</span><br><span class=\"line\">+----------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br><span class=\"line\">mysql&gt; SELECT CAST(<span class=\"string\">&#x27;125e342.83&#x27;</span> AS signed);</span><br><span class=\"line\">+------------------------------+</span><br><span class=\"line\">| CAST(<span class=\"string\">&#x27;125e342.83&#x27;</span> AS signed) |</span><br><span class=\"line\">+------------------------------+</span><br><span class=\"line\">|                          125 |</span><br><span class=\"line\">+------------------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3</span></span><br><span class=\"line\">mysql&gt; SELECT CAST(<span class=\"string\">&#x27;3.35&#x27;</span> AS signed);</span><br><span class=\"line\">+------------------------+</span><br><span class=\"line\">| CAST(<span class=\"string\">&#x27;3.35&#x27;</span> AS signed) |</span><br><span class=\"line\">+------------------------+</span><br><span class=\"line\">|                      3 |</span><br><span class=\"line\">+------------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"格式化函数\"><a href=\"#格式化函数\" class=\"headerlink\" title=\"格式化函数\"></a>格式化函数</h5><h5 id=\"随机数-rand\"><a href=\"#随机数-rand\" class=\"headerlink\" title=\"随机数 rand()\"></a>随机数 rand()</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select rand()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><h5 id=\"获取系统时间-now-和-sysdate-这两个函数的区别是-now-在执行前就确认了值-sysdate-在执行时动态确认值\"><a href=\"#获取系统时间-now-和-sysdate-这两个函数的区别是-now-在执行前就确认了值-sysdate-在执行时动态确认值\" class=\"headerlink\" title=\"获取系统时间 now() 和 sysdate() 这两个函数的区别是, now()在执行前就确认了值, sysdate()在执行时动态确认值\"></a>获取系统时间 <code>now()</code> 和 <code>sysdate()</code> 这两个函数的区别是, <code>now()</code>在执行前就确认了值, <code>sysdate()</code>在执行时动态确认值</h5><p>例子:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; select now(), sleep(3), now();</span><br><span class=\"line\">&gt; select sysdate(), sleep(3), sysdate();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>感兴趣的可以看一下这两天sql执行的结果</p>\n</blockquote>\n<h5 id=\"获得当前时间戳函数：current-timestamp-current-timestamp\"><a href=\"#获得当前时间戳函数：current-timestamp-current-timestamp\" class=\"headerlink\" title=\"获得当前时间戳函数：current_timestamp, current_timestamp()\"></a>获得当前时间戳函数：current_timestamp, current_timestamp()</h5><p>语法: <code>select current_timestamp, current_timestamp()</code></p>\n<h5 id=\"日期、时间转换\"><a href=\"#日期、时间转换\" class=\"headerlink\" title=\"日期、时间转换\"></a>日期、时间转换</h5><p>时间转换为字符串 date_format(date,format), time_format(time,format)</p>\n<p>时间格式化函数 DATE_FORMAT(date, format)</p>\n<ol>\n<li>date 时间</li>\n<li>format 参数格式有</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">%a</td>\n<td align=\"center\">缩写星期名</td>\n</tr>\n<tr>\n<td align=\"center\">%b</td>\n<td align=\"center\">缩写月名</td>\n</tr>\n<tr>\n<td align=\"center\">%c</td>\n<td align=\"center\">月，数值</td>\n</tr>\n<tr>\n<td align=\"center\">%D</td>\n<td align=\"center\">带有英文前缀的月中的天</td>\n</tr>\n<tr>\n<td align=\"center\">%d</td>\n<td align=\"center\">月的天，数值(00-31)</td>\n</tr>\n<tr>\n<td align=\"center\">%e</td>\n<td align=\"center\">月的天，数值(0-31)</td>\n</tr>\n<tr>\n<td align=\"center\">%f</td>\n<td align=\"center\">微秒</td>\n</tr>\n<tr>\n<td align=\"center\">%H</td>\n<td align=\"center\">小时 (00-23)</td>\n</tr>\n<tr>\n<td align=\"center\">%h</td>\n<td align=\"center\">小时 (01-12)</td>\n</tr>\n<tr>\n<td align=\"center\">%I</td>\n<td align=\"center\">小时 (01-12)</td>\n</tr>\n<tr>\n<td align=\"center\">%i</td>\n<td align=\"center\">分钟，数值(00-59)</td>\n</tr>\n<tr>\n<td align=\"center\">%j</td>\n<td align=\"center\">年的天 (001-366)</td>\n</tr>\n<tr>\n<td align=\"center\">%k</td>\n<td align=\"center\">小时 (0-23)</td>\n</tr>\n<tr>\n<td align=\"center\">%l</td>\n<td align=\"center\">小时 (1-12)</td>\n</tr>\n<tr>\n<td align=\"center\">%M</td>\n<td align=\"center\">月名</td>\n</tr>\n<tr>\n<td align=\"center\">%m</td>\n<td align=\"center\">月，数值(00-12)</td>\n</tr>\n<tr>\n<td align=\"center\">%p</td>\n<td align=\"center\">AM 或 PM</td>\n</tr>\n<tr>\n<td align=\"center\">%r</td>\n<td align=\"center\">时间，12-小时（hh:mm:ss AM 或 PM）</td>\n</tr>\n<tr>\n<td align=\"center\">%S</td>\n<td align=\"center\">秒(00-59)</td>\n</tr>\n<tr>\n<td align=\"center\">%s</td>\n<td align=\"center\">秒(00-59)</td>\n</tr>\n<tr>\n<td align=\"center\">%T</td>\n<td align=\"center\">时间, 24-小时 (hh:mm:ss)</td>\n</tr>\n<tr>\n<td align=\"center\">%U</td>\n<td align=\"center\">周 (00-53) 星期日是一周的第一天</td>\n</tr>\n<tr>\n<td align=\"center\">%u</td>\n<td align=\"center\">周 (00-53) 星期一是一周的第一天</td>\n</tr>\n<tr>\n<td align=\"center\">%V</td>\n<td align=\"center\">周 (01-53) 星期日是一周的第一天，与 %X 使用</td>\n</tr>\n<tr>\n<td align=\"center\">%v</td>\n<td align=\"center\">周 (01-53) 星期一是一周的第一天，与 %x 使用</td>\n</tr>\n<tr>\n<td align=\"center\">%W</td>\n<td align=\"center\">星期名</td>\n</tr>\n<tr>\n<td align=\"center\">%w</td>\n<td align=\"center\">周的天 （0=星期日, 6=星期六）</td>\n</tr>\n<tr>\n<td align=\"center\">%X</td>\n<td align=\"center\">年，其中的星期日是周的第一天，4 位，与 %V 使用</td>\n</tr>\n<tr>\n<td align=\"center\">%x</td>\n<td align=\"center\">年，其中的星期一是周的第一天，4 位，与 %v 使用</td>\n</tr>\n<tr>\n<td align=\"center\">%Y</td>\n<td align=\"center\">年，4 位</td>\n</tr>\n<tr>\n<td align=\"center\">%y</td>\n<td align=\"center\">年，2 位</td>\n</tr>\n</tbody></table>\n<p>字符串转换为时间 str_to_date(str, format)</p>\n<p>(日期、天数）转换函数：to_days(date), from_days(days)</p>\n<p>(时间、秒）转换函数：time_to_sec(time), sec_to_time(seconds)</p>\n<p>拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)</p>\n<p>Unix 时间戳、日期）转换函数</p>\n<ol>\n<li>unix_timestamp(),</li>\n<li>unix_timestamp(date),</li>\n<li>from_unixtime(unix_timestamp),</li>\n<li>from_unixtime(unix_timestamp,format)<ol>\n<li>格式化函数 FROM_UNIXTIME(unix_timestamp, [format])</li>\n<li>unix_timestamp 一般为10位的时间戳，如:1417363200</li>\n<li>format <em>可选</em> 转换之后的时间字符串显示的格式;</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"日期时间计算函数\"><a href=\"#日期时间计算函数\" class=\"headerlink\" title=\"日期时间计算函数\"></a>日期时间计算函数</h5><p>增加一个时间间隔：DATE_ADD(date,INTERVAL expr type)</p>\n<ul>\n<li>date 要操作的时间</li>\n<li>expr 要添加的时间间隔</li>\n<li>type 参考下表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">type的值</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">MICROSECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">SECOND</td>\n<td align=\"center\">秒</td>\n</tr>\n<tr>\n<td align=\"center\">MINUTE</td>\n<td align=\"center\">分</td>\n</tr>\n<tr>\n<td align=\"center\">HOUR</td>\n<td align=\"center\">小时</td>\n</tr>\n<tr>\n<td align=\"center\">DAY</td>\n<td align=\"center\">天</td>\n</tr>\n<tr>\n<td align=\"center\">WEEK</td>\n<td align=\"center\">星期</td>\n</tr>\n<tr>\n<td align=\"center\">MONTH</td>\n<td align=\"center\">月</td>\n</tr>\n<tr>\n<td align=\"center\">QUARTER</td>\n<td align=\"center\">?</td>\n</tr>\n<tr>\n<td align=\"center\">YEAR</td>\n<td align=\"center\">年</td>\n</tr>\n<tr>\n<td align=\"center\">SECOND_MICROSECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">MINUTE_MICROSECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">MINUTE_SECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">HOUR_MICROSECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">HOUR_SECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">HOUR_MINUTE</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">DAY_MICROSECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">DAY_SECOND</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">DAY_MINUTE</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">DAY_HOUR</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">YEAR_MONTH</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>adddate(), addtime()函数，可以用 date_add() 来替代</p>\n</blockquote>\n<p>日期减去一个时间间隔：DATE_SUB(date,INTERVAL expr type)</p>\n<blockquote>\n<p>DATE_SUB(date,INTERVAL expr type) 日期时间函数 和 date_add() 用法一致</p>\n</blockquote>\n<p>日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)</p>\n<ol>\n<li>datediff 返回天数差距</li>\n<li>timediff 返回time差距</li>\n</ol>\n<blockquote>\n<p>注意：timediff(time1,time2) 函数的两个参数类型必须相同。</p>\n</blockquote>\n<p>时间戳（timestamp）转换、增、减函数</p>\n<ol>\n<li>timestamp(date) – date to timestamp</li>\n<li>timestamp(dt,time) – dt + time</li>\n<li>timestampadd(unit,interval,datetime_expr) –</li>\n<li>timestampdiff(unit,datetime_expr1,datetime_expr2) –</li>\n</ol>\n<p>示例:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select timestamp(<span class=\"string\">&#x27;2008-08-08&#x27;</span>); -- 2008-08-08 00:00:00</span><br><span class=\"line\">select timestamp(<span class=\"string\">&#x27;2008-08-08 08:00:00&#x27;</span>, <span class=\"string\">&#x27;01:01:01&#x27;</span>); -- 2008-08-08 09:01:01</span><br><span class=\"line\">select timestamp(<span class=\"string\">&#x27;2008-08-08 08:00:00&#x27;</span>, <span class=\"string\">&#x27;10 01:01:01&#x27;</span>); -- 2008-08-18 09:01:01</span><br><span class=\"line\"></span><br><span class=\"line\">select timestampadd(day, 1, <span class=\"string\">&#x27;2008-08-08 08:00:00&#x27;</span>); -- 2008-08-09 08:00:00</span><br><span class=\"line\">select date_add(<span class=\"string\">&#x27;2008-08-08 08:00:00&#x27;</span>, interval 1 day); -- 2008-08-09 08:00:00</span><br><span class=\"line\"></span><br><span class=\"line\">timestampadd() 函数类似于 date_add()。</span><br><span class=\"line\">select timestampdiff(year,<span class=\"string\">&#x27;2002-05-01&#x27;</span>,<span class=\"string\">&#x27;2001-01-01&#x27;</span>); -- -1</span><br><span class=\"line\">select timestampdiff(day ,<span class=\"string\">&#x27;2002-05-01&#x27;</span>,<span class=\"string\">&#x27;2001-01-01&#x27;</span>); -- -485</span><br><span class=\"line\">select timestampdiff(hour,<span class=\"string\">&#x27;2008-08-08 12:00:00&#x27;</span>,<span class=\"string\">&#x27;2008-08-08 00:00:00&#x27;</span>); -- -12</span><br><span class=\"line\"></span><br><span class=\"line\">select datediff(<span class=\"string\">&#x27;2008-08-08 12:00:00&#x27;</span>, <span class=\"string\">&#x27;2008-08-01 00:00:00&#x27;</span>); -- 7</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>timestampdiff() 函数就比 datediff() 功能强多了，datediff() 只能计算两个日期（date）之间相差的天数。</p>\n</blockquote>\n<p>时区（timezone）转换函数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">convert_tz(dt,from_tz,to_tz)</span><br><span class=\"line\"></span><br><span class=\"line\">select convert_tz(<span class=\"string\">&#x27;2008-08-08 12:00:00&#x27;</span>, <span class=\"string\">&#x27;+08:00&#x27;</span>, <span class=\"string\">&#x27;+00:00&#x27;</span>); -- 2008-08-08 04:00:00</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时区转换也可以通过 date_add, date_sub, timestampadd 来实现</p>\n</blockquote>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p><a href=\"https://www.cnblogs.com/chenqionghe/p/4675844.html\">MySQL CAST与CONVERT 函数的用法</a></p>\n<p><a href=\"https://www.cnblogs.com/dest/p/4205371.html\">MySQL 日期格式</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>每天都要去折腾才能进步</p>\n"},{"title":"Nginx学习笔记","date":"2019-05-15T08:14:29.000Z","_content":"\nNginx是一个**轻量级的高性能**HTTP和反向代理服务器, 由俄罗斯人 **伊戈尔·赛索耶夫**\n\n> 这是一个学习笔记, 我想它应该不需要那么详细\n\n## 安装 Nginx\n\n我们既然学习了Docker, 那就要使用Docker\n\n使用 Docker 安装 Nginx\n\n```bash\n# 从docker hub中查找nginx\ndocker search nginx\n\n# 拉取nginx官方最新稳定版 nginx 镜像\ndocker pull nginx\n\n# 启动 nginx 镜像\ndocker run -d -p 80:80 --name nginx nginx\n```\n\n## Nginx基本概念\n\n### 正则表达式\n\n1. ~  表示执行一个正则匹配，区分大小写\n2. ~* 表示执行一个正则匹配，不区分大小写\n3. ^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。\n4. =  进行普通字符精确匹配。也就是完全匹配。\n5. @  它定义一个命名的 location，使用在内部定向时，例如 error_page, try_files\n\n### 匹配规则优先级\n\n1. 等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。\n2. ^~类型表达式。一旦匹配成功，则不再查找其他匹配项。\n3. 正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。\n4. 常规字符串匹配类型。按前缀匹配。\n\n### 文件及目录匹配\n\n1. -f和!-f用来判断是否存在文件\n2. -d和!-d用来判断是否存在目录\n3. -e和!-e用来判断是否存在文件或目录\n4. -x和!-x用来判断文件是否可执行\n\n### rewrite(重定向)指令的最后一项参数为flag标记，flag标记有\n\n1. last 相当于apache里面的[L]标记，表示rewrite。\n2. break 本条规则匹配完成后，终止匹配，不再匹配后面的规则。\n3. redirect 返回302临时重定向，浏览器地址会显示跳转后的URL地址。\n4. permanent 返回301永久重定向，浏览器地址会显示跳转后的URL地址。\n\n> 使用last和break实现URI重写，浏览器地址栏不变。  \n> 使用alias指令必须用last标记;  \n> 使用proxy_pass指令时，需要使用break标记。  \n> Last标记在本条rewrite规则执行完毕后，会对其所在server{......}标签重新发起请求.  \n> break标记则在本条规则匹配完成后，终止匹配。\n\n## Nginx配置文件\n\n```conf\n# nginx进程数，建议设置为等于CPU总核心数.\nworker_processes 8;\n\n# 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n# 进程文件\npid /var/run/nginx.pid;\n\n# 一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n# 工作模式与连接数上限\nevents\n{\n　　#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n　　use epoll;\n　　#单个进程最大连接数（最大连接数=连接数*进程数）\n　　worker_connections 65535;\n}\n\n# 设定http服务器\nhttp\n{\n\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n    #gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    # 应用 myblog 是容器网络中的昵称\n    upstream blogs {\n        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n        # 单台机器 weight 设置无意义\n        server myblog:3001 weight=3;\n    }\n\n    # 虚拟主机的配置\n    server\n    {\n\n        listen 80;　　　　#监听端口\n\n        server_name aa.cn www.aa.cn ; #server_name end  #域名可以有多个，用空格隔开\n\n        index index.html index.htm index.php;  # 设置访问主页\n\n        set $subdomain '';  # 绑定目录为二级域名 bbb.aa.com  根目录 /bbb  文件夹\n\n        if ( $host ~* \"(?:(\\w+\\.){0,})(\\b(?!www\\b)\\w+)\\.\\b(?!(com|org|gov|net|cn)\\b)\\w+\\.[a-zA-Z]+\" )\n        {\n            set $subdomain \"/$2\";\n        }\n\n        root /home/wwwroot/aa.cn/web$subdomain;# 访问域名跟目录  \n\n        include rewrite/dedecms.conf; #rewrite end   #载入其他配置文件\n\n\n        location ~ .*.(php|php5)?$\n        {\n        　　fastcgi_pass 127.0.0.1:9000;\n        　　fastcgi_index index.php;\n        　　include fastcgi.conf;\n        }\n        #图片缓存时间设置\n        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n        {\n        　　expires 10d;\n        }\n        #JS和CSS缓存时间设置\n        location ~ .*.(js|css)?$\n        {\n        　　expires 1h;\n        }\n\n    }\n\n    # 日志格式设定\n\n    log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" $http_x_forwarded_for';\n    #定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n    #对 \"/\" 启用反向代理\n    location / {\n\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n\n    }\n\n    # 设定查看Nginx状态的地址\n    location /NginxStatus {\n\n        stub_status on;\n        access_log on;\n        auth_basic \"NginxStatus\";\n        auth_basic_user_file conf/htpasswd;\n        #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n\n    }\n\n    #本地动静分离反向代理配置\n    #所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n\n    }\n    #所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$\n    {\n        expires 15d;\n    }\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n\n}\n```\n\n### 使用记录\n\n#### nginx热更新\n\n在docker中,实现nginx热更新 `docker exec -i [nginx容器名/id] nginx -s reload`\n\n### nginx 日志配置\n\n[日志配置 参考](https://www.cnblogs.com/biglittleant/p/8979856.html)\n\n## 进阶使用\n\n再文章开始, 我们使用docker安装nginx, 我们完全使用了nginx官方的默认配置, 这里我们将使用自定义配置来启动nginx\n\n首先我们得知道 nginx 官方 docker 镜像得conf文件位置在哪\n\n我得nginx版本conf文件在: /etc/nginx/nginx.conf (可能不同版本的配置文件会有所不同, 所以我们在拉取镜像的时候最好固定版本)\n\n## 相关链接\n\n[Nginx配置文件nginx.conf详解](https://www.cnblogs.com/xuey/p/7631690.html)\n\n[nginx的location配置详解](https://www.cnblogs.com/sign-ptk/p/6723048.html)\n\n## 结语\n\n","source":"_posts/nginx.md","raw":"---\ntitle: Nginx学习笔记\ndate: 2019-05-15 16:14:29\ntags: 服务器\n---\n\nNginx是一个**轻量级的高性能**HTTP和反向代理服务器, 由俄罗斯人 **伊戈尔·赛索耶夫**\n\n> 这是一个学习笔记, 我想它应该不需要那么详细\n\n## 安装 Nginx\n\n我们既然学习了Docker, 那就要使用Docker\n\n使用 Docker 安装 Nginx\n\n```bash\n# 从docker hub中查找nginx\ndocker search nginx\n\n# 拉取nginx官方最新稳定版 nginx 镜像\ndocker pull nginx\n\n# 启动 nginx 镜像\ndocker run -d -p 80:80 --name nginx nginx\n```\n\n## Nginx基本概念\n\n### 正则表达式\n\n1. ~  表示执行一个正则匹配，区分大小写\n2. ~* 表示执行一个正则匹配，不区分大小写\n3. ^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。\n4. =  进行普通字符精确匹配。也就是完全匹配。\n5. @  它定义一个命名的 location，使用在内部定向时，例如 error_page, try_files\n\n### 匹配规则优先级\n\n1. 等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。\n2. ^~类型表达式。一旦匹配成功，则不再查找其他匹配项。\n3. 正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。\n4. 常规字符串匹配类型。按前缀匹配。\n\n### 文件及目录匹配\n\n1. -f和!-f用来判断是否存在文件\n2. -d和!-d用来判断是否存在目录\n3. -e和!-e用来判断是否存在文件或目录\n4. -x和!-x用来判断文件是否可执行\n\n### rewrite(重定向)指令的最后一项参数为flag标记，flag标记有\n\n1. last 相当于apache里面的[L]标记，表示rewrite。\n2. break 本条规则匹配完成后，终止匹配，不再匹配后面的规则。\n3. redirect 返回302临时重定向，浏览器地址会显示跳转后的URL地址。\n4. permanent 返回301永久重定向，浏览器地址会显示跳转后的URL地址。\n\n> 使用last和break实现URI重写，浏览器地址栏不变。  \n> 使用alias指令必须用last标记;  \n> 使用proxy_pass指令时，需要使用break标记。  \n> Last标记在本条rewrite规则执行完毕后，会对其所在server{......}标签重新发起请求.  \n> break标记则在本条规则匹配完成后，终止匹配。\n\n## Nginx配置文件\n\n```conf\n# nginx进程数，建议设置为等于CPU总核心数.\nworker_processes 8;\n\n# 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n# 进程文件\npid /var/run/nginx.pid;\n\n# 一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n# 工作模式与连接数上限\nevents\n{\n　　#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n　　use epoll;\n　　#单个进程最大连接数（最大连接数=连接数*进程数）\n　　worker_connections 65535;\n}\n\n# 设定http服务器\nhttp\n{\n\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n    #gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    # 应用 myblog 是容器网络中的昵称\n    upstream blogs {\n        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n        # 单台机器 weight 设置无意义\n        server myblog:3001 weight=3;\n    }\n\n    # 虚拟主机的配置\n    server\n    {\n\n        listen 80;　　　　#监听端口\n\n        server_name aa.cn www.aa.cn ; #server_name end  #域名可以有多个，用空格隔开\n\n        index index.html index.htm index.php;  # 设置访问主页\n\n        set $subdomain '';  # 绑定目录为二级域名 bbb.aa.com  根目录 /bbb  文件夹\n\n        if ( $host ~* \"(?:(\\w+\\.){0,})(\\b(?!www\\b)\\w+)\\.\\b(?!(com|org|gov|net|cn)\\b)\\w+\\.[a-zA-Z]+\" )\n        {\n            set $subdomain \"/$2\";\n        }\n\n        root /home/wwwroot/aa.cn/web$subdomain;# 访问域名跟目录  \n\n        include rewrite/dedecms.conf; #rewrite end   #载入其他配置文件\n\n\n        location ~ .*.(php|php5)?$\n        {\n        　　fastcgi_pass 127.0.0.1:9000;\n        　　fastcgi_index index.php;\n        　　include fastcgi.conf;\n        }\n        #图片缓存时间设置\n        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n        {\n        　　expires 10d;\n        }\n        #JS和CSS缓存时间设置\n        location ~ .*.(js|css)?$\n        {\n        　　expires 1h;\n        }\n\n    }\n\n    # 日志格式设定\n\n    log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" $http_x_forwarded_for';\n    #定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n    #对 \"/\" 启用反向代理\n    location / {\n\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        #以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n\n    }\n\n    # 设定查看Nginx状态的地址\n    location /NginxStatus {\n\n        stub_status on;\n        access_log on;\n        auth_basic \"NginxStatus\";\n        auth_basic_user_file conf/htpasswd;\n        #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n\n    }\n\n    #本地动静分离反向代理配置\n    #所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n\n    }\n    #所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$\n    {\n        expires 15d;\n    }\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n\n}\n```\n\n### 使用记录\n\n#### nginx热更新\n\n在docker中,实现nginx热更新 `docker exec -i [nginx容器名/id] nginx -s reload`\n\n### nginx 日志配置\n\n[日志配置 参考](https://www.cnblogs.com/biglittleant/p/8979856.html)\n\n## 进阶使用\n\n再文章开始, 我们使用docker安装nginx, 我们完全使用了nginx官方的默认配置, 这里我们将使用自定义配置来启动nginx\n\n首先我们得知道 nginx 官方 docker 镜像得conf文件位置在哪\n\n我得nginx版本conf文件在: /etc/nginx/nginx.conf (可能不同版本的配置文件会有所不同, 所以我们在拉取镜像的时候最好固定版本)\n\n## 相关链接\n\n[Nginx配置文件nginx.conf详解](https://www.cnblogs.com/xuey/p/7631690.html)\n\n[nginx的location配置详解](https://www.cnblogs.com/sign-ptk/p/6723048.html)\n\n## 结语\n\n","slug":"nginx","published":1,"updated":"2021-11-04T15:54:07.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ihz0011ahte6p9i031x","content":"<p>Nginx是一个<strong>轻量级的高性能</strong>HTTP和反向代理服务器, 由俄罗斯人 <strong>伊戈尔·赛索耶夫</strong></p>\n<blockquote>\n<p>这是一个学习笔记, 我想它应该不需要那么详细</p>\n</blockquote>\n<h2 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h2><p>我们既然学习了Docker, 那就要使用Docker</p>\n<p>使用 Docker 安装 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从docker hub中查找nginx</span></span><br><span class=\"line\">docker search nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取nginx官方最新稳定版 nginx 镜像</span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 nginx 镜像</span></span><br><span class=\"line\">docker run -d -p 80:80 --name nginx nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx基本概念\"><a href=\"#Nginx基本概念\" class=\"headerlink\" title=\"Nginx基本概念\"></a>Nginx基本概念</h2><h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><ol>\n<li>~  表示执行一个正则匹配，区分大小写</li>\n<li>~* 表示执行一个正则匹配，不区分大小写</li>\n<li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li>\n<li>=  进行普通字符精确匹配。也就是完全匹配。</li>\n<li>@  它定义一个命名的 location，使用在内部定向时，例如 error_page, try_files</li>\n</ol>\n<h3 id=\"匹配规则优先级\"><a href=\"#匹配规则优先级\" class=\"headerlink\" title=\"匹配规则优先级\"></a>匹配规则优先级</h3><ol>\n<li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li>\n<li>常规字符串匹配类型。按前缀匹配。</li>\n</ol>\n<h3 id=\"文件及目录匹配\"><a href=\"#文件及目录匹配\" class=\"headerlink\" title=\"文件及目录匹配\"></a>文件及目录匹配</h3><ol>\n<li>-f和!-f用来判断是否存在文件</li>\n<li>-d和!-d用来判断是否存在目录</li>\n<li>-e和!-e用来判断是否存在文件或目录</li>\n<li>-x和!-x用来判断文件是否可执行</li>\n</ol>\n<h3 id=\"rewrite-重定向-指令的最后一项参数为flag标记，flag标记有\"><a href=\"#rewrite-重定向-指令的最后一项参数为flag标记，flag标记有\" class=\"headerlink\" title=\"rewrite(重定向)指令的最后一项参数为flag标记，flag标记有\"></a>rewrite(重定向)指令的最后一项参数为flag标记，flag标记有</h3><ol>\n<li>last 相当于apache里面的[L]标记，表示rewrite。</li>\n<li>break 本条规则匹配完成后，终止匹配，不再匹配后面的规则。</li>\n<li>redirect 返回302临时重定向，浏览器地址会显示跳转后的URL地址。</li>\n<li>permanent 返回301永久重定向，浏览器地址会显示跳转后的URL地址。</li>\n</ol>\n<blockquote>\n<p>使用last和break实现URI重写，浏览器地址栏不变。<br>使用alias指令必须用last标记;<br>使用proxy_pass指令时，需要使用break标记。<br>Last标记在本条rewrite规则执行完毕后，会对其所在server{……}标签重新发起请求.<br>break标记则在本条规则匹配完成后，终止匹配。</p>\n</blockquote>\n<h2 id=\"Nginx配置文件\"><a href=\"#Nginx配置文件\" class=\"headerlink\" title=\"Nginx配置文件\"></a>Nginx配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nginx进程数，建议设置为等于CPU总核心数.</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"></span><br><span class=\"line\"># 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程文件</span><br><span class=\"line\">pid &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># 一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"># 工作模式与连接数上限</span><br><span class=\"line\">events</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">　　#参考事件模型，use [ kqueue | rtsig | epoll | &#x2F;dev&#x2F;poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I&#x2F;O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class=\"line\">　　use epoll;</span><br><span class=\"line\">　　#单个进程最大连接数（最大连接数&#x3D;连接数*进程数）</span><br><span class=\"line\">　　worker_connections 65535;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 设定http服务器</span><br><span class=\"line\">http</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    include mime.types; #文件扩展名与文件类型映射表</span><br><span class=\"line\">    default_type application&#x2F;octet-stream; #默认文件类型</span><br><span class=\"line\">    #charset utf-8; #默认编码</span><br><span class=\"line\">    server_names_hash_bucket_size 128; #服务器名字的hash表大小</span><br><span class=\"line\">    client_header_buffer_size 32k; #上传文件大小限制</span><br><span class=\"line\">    large_client_header_buffers 4 64k; #设定请求缓</span><br><span class=\"line\">    client_max_body_size 8m; #设定请求缓</span><br><span class=\"line\">    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I&#x2F;O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\">    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">    tcp_nopush on; #防止网络阻塞</span><br><span class=\"line\">    tcp_nodelay on; #防止网络阻塞</span><br><span class=\"line\">    keepalive_timeout 120; #长连接超时时间，单位是秒</span><br><span class=\"line\"></span><br><span class=\"line\">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class=\"line\">    fastcgi_connect_timeout 300;</span><br><span class=\"line\">    fastcgi_send_timeout 300;</span><br><span class=\"line\">    fastcgi_read_timeout 300;</span><br><span class=\"line\">    fastcgi_buffer_size 64k;</span><br><span class=\"line\">    fastcgi_buffers 4 64k;</span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k; #最小压缩文件大小</span><br><span class=\"line\">    gzip_buffers 4 16k; #压缩缓冲区</span><br><span class=\"line\">    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class=\"line\">    gzip_comp_level 2; #压缩等级</span><br><span class=\"line\">    gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml;</span><br><span class=\"line\">    #压缩类型，默认就已经包含text&#x2F;html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class=\"line\"></span><br><span class=\"line\">    # 应用 myblog 是容器网络中的昵称</span><br><span class=\"line\">    upstream blogs &#123;</span><br><span class=\"line\">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class=\"line\">        # 单台机器 weight 设置无意义</span><br><span class=\"line\">        server myblog:3001 weight&#x3D;3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 虚拟主机的配置</span><br><span class=\"line\">    server</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        listen 80;　　　　#监听端口</span><br><span class=\"line\"></span><br><span class=\"line\">        server_name aa.cn www.aa.cn ; #server_name end  #域名可以有多个，用空格隔开</span><br><span class=\"line\"></span><br><span class=\"line\">        index index.html index.htm index.php;  # 设置访问主页</span><br><span class=\"line\"></span><br><span class=\"line\">        set $subdomain &#39;&#39;;  # 绑定目录为二级域名 bbb.aa.com  根目录 &#x2F;bbb  文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">        if ( $host ~* &quot;(?:(\\w+\\.)&#123;0,&#125;)(\\b(?!www\\b)\\w+)\\.\\b(?!(com|org|gov|net|cn)\\b)\\w+\\.[a-zA-Z]+&quot; )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            set $subdomain &quot;&#x2F;$2&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        root &#x2F;home&#x2F;wwwroot&#x2F;aa.cn&#x2F;web$subdomain;# 访问域名跟目录  </span><br><span class=\"line\"></span><br><span class=\"line\">        include rewrite&#x2F;dedecms.conf; #rewrite end   #载入其他配置文件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*.(php|php5)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        　　fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        　　fastcgi_index index.php;</span><br><span class=\"line\">        　　include fastcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #图片缓存时间设置</span><br><span class=\"line\">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        　　expires 10d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #JS和CSS缓存时间设置</span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        　　expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 日志格式设定</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class=\"line\">    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class=\"line\">    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;</span><br><span class=\"line\">    #定义本虚拟主机的访问日志</span><br><span class=\"line\">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;ha97access.log access;</span><br><span class=\"line\"></span><br><span class=\"line\">    #对 &quot;&#x2F;&quot; 启用反向代理</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:88;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        #以下是一些反向代理的配置，可选。</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">        proxy_temp_file_write_size 64k;</span><br><span class=\"line\">        #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 设定查看Nginx状态的地址</span><br><span class=\"line\">    location &#x2F;NginxStatus &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        stub_status on;</span><br><span class=\"line\">        access_log on;</span><br><span class=\"line\">        auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">        auth_basic_user_file conf&#x2F;htpasswd;</span><br><span class=\"line\">        #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #本地动静分离反向代理配置</span><br><span class=\"line\">    #所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">    location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        expires 15d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ .*.(js|css)?$</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用记录\"><a href=\"#使用记录\" class=\"headerlink\" title=\"使用记录\"></a>使用记录</h3><h4 id=\"nginx热更新\"><a href=\"#nginx热更新\" class=\"headerlink\" title=\"nginx热更新\"></a>nginx热更新</h4><p>在docker中,实现nginx热更新 <code>docker exec -i [nginx容器名/id] nginx -s reload</code></p>\n<h3 id=\"nginx-日志配置\"><a href=\"#nginx-日志配置\" class=\"headerlink\" title=\"nginx 日志配置\"></a>nginx 日志配置</h3><p><a href=\"https://www.cnblogs.com/biglittleant/p/8979856.html\">日志配置 参考</a></p>\n<h2 id=\"进阶使用\"><a href=\"#进阶使用\" class=\"headerlink\" title=\"进阶使用\"></a>进阶使用</h2><p>再文章开始, 我们使用docker安装nginx, 我们完全使用了nginx官方的默认配置, 这里我们将使用自定义配置来启动nginx</p>\n<p>首先我们得知道 nginx 官方 docker 镜像得conf文件位置在哪</p>\n<p>我得nginx版本conf文件在: /etc/nginx/nginx.conf (可能不同版本的配置文件会有所不同, 所以我们在拉取镜像的时候最好固定版本)</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p><a href=\"https://www.cnblogs.com/xuey/p/7631690.html\">Nginx配置文件nginx.conf详解</a></p>\n<p><a href=\"https://www.cnblogs.com/sign-ptk/p/6723048.html\">nginx的location配置详解</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2>","site":{"data":{}},"excerpt":"","more":"<p>Nginx是一个<strong>轻量级的高性能</strong>HTTP和反向代理服务器, 由俄罗斯人 <strong>伊戈尔·赛索耶夫</strong></p>\n<blockquote>\n<p>这是一个学习笔记, 我想它应该不需要那么详细</p>\n</blockquote>\n<h2 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h2><p>我们既然学习了Docker, 那就要使用Docker</p>\n<p>使用 Docker 安装 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从docker hub中查找nginx</span></span><br><span class=\"line\">docker search nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取nginx官方最新稳定版 nginx 镜像</span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 nginx 镜像</span></span><br><span class=\"line\">docker run -d -p 80:80 --name nginx nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx基本概念\"><a href=\"#Nginx基本概念\" class=\"headerlink\" title=\"Nginx基本概念\"></a>Nginx基本概念</h2><h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><ol>\n<li>~  表示执行一个正则匹配，区分大小写</li>\n<li>~* 表示执行一个正则匹配，不区分大小写</li>\n<li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li>\n<li>=  进行普通字符精确匹配。也就是完全匹配。</li>\n<li>@  它定义一个命名的 location，使用在内部定向时，例如 error_page, try_files</li>\n</ol>\n<h3 id=\"匹配规则优先级\"><a href=\"#匹配规则优先级\" class=\"headerlink\" title=\"匹配规则优先级\"></a>匹配规则优先级</h3><ol>\n<li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li>\n<li>常规字符串匹配类型。按前缀匹配。</li>\n</ol>\n<h3 id=\"文件及目录匹配\"><a href=\"#文件及目录匹配\" class=\"headerlink\" title=\"文件及目录匹配\"></a>文件及目录匹配</h3><ol>\n<li>-f和!-f用来判断是否存在文件</li>\n<li>-d和!-d用来判断是否存在目录</li>\n<li>-e和!-e用来判断是否存在文件或目录</li>\n<li>-x和!-x用来判断文件是否可执行</li>\n</ol>\n<h3 id=\"rewrite-重定向-指令的最后一项参数为flag标记，flag标记有\"><a href=\"#rewrite-重定向-指令的最后一项参数为flag标记，flag标记有\" class=\"headerlink\" title=\"rewrite(重定向)指令的最后一项参数为flag标记，flag标记有\"></a>rewrite(重定向)指令的最后一项参数为flag标记，flag标记有</h3><ol>\n<li>last 相当于apache里面的[L]标记，表示rewrite。</li>\n<li>break 本条规则匹配完成后，终止匹配，不再匹配后面的规则。</li>\n<li>redirect 返回302临时重定向，浏览器地址会显示跳转后的URL地址。</li>\n<li>permanent 返回301永久重定向，浏览器地址会显示跳转后的URL地址。</li>\n</ol>\n<blockquote>\n<p>使用last和break实现URI重写，浏览器地址栏不变。<br>使用alias指令必须用last标记;<br>使用proxy_pass指令时，需要使用break标记。<br>Last标记在本条rewrite规则执行完毕后，会对其所在server{……}标签重新发起请求.<br>break标记则在本条规则匹配完成后，终止匹配。</p>\n</blockquote>\n<h2 id=\"Nginx配置文件\"><a href=\"#Nginx配置文件\" class=\"headerlink\" title=\"Nginx配置文件\"></a>Nginx配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nginx进程数，建议设置为等于CPU总核心数.</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"></span><br><span class=\"line\"># 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程文件</span><br><span class=\"line\">pid &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># 一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"># 工作模式与连接数上限</span><br><span class=\"line\">events</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">　　#参考事件模型，use [ kqueue | rtsig | epoll | &#x2F;dev&#x2F;poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I&#x2F;O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class=\"line\">　　use epoll;</span><br><span class=\"line\">　　#单个进程最大连接数（最大连接数&#x3D;连接数*进程数）</span><br><span class=\"line\">　　worker_connections 65535;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 设定http服务器</span><br><span class=\"line\">http</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    include mime.types; #文件扩展名与文件类型映射表</span><br><span class=\"line\">    default_type application&#x2F;octet-stream; #默认文件类型</span><br><span class=\"line\">    #charset utf-8; #默认编码</span><br><span class=\"line\">    server_names_hash_bucket_size 128; #服务器名字的hash表大小</span><br><span class=\"line\">    client_header_buffer_size 32k; #上传文件大小限制</span><br><span class=\"line\">    large_client_header_buffers 4 64k; #设定请求缓</span><br><span class=\"line\">    client_max_body_size 8m; #设定请求缓</span><br><span class=\"line\">    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I&#x2F;O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\">    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">    tcp_nopush on; #防止网络阻塞</span><br><span class=\"line\">    tcp_nodelay on; #防止网络阻塞</span><br><span class=\"line\">    keepalive_timeout 120; #长连接超时时间，单位是秒</span><br><span class=\"line\"></span><br><span class=\"line\">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class=\"line\">    fastcgi_connect_timeout 300;</span><br><span class=\"line\">    fastcgi_send_timeout 300;</span><br><span class=\"line\">    fastcgi_read_timeout 300;</span><br><span class=\"line\">    fastcgi_buffer_size 64k;</span><br><span class=\"line\">    fastcgi_buffers 4 64k;</span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k; #最小压缩文件大小</span><br><span class=\"line\">    gzip_buffers 4 16k; #压缩缓冲区</span><br><span class=\"line\">    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class=\"line\">    gzip_comp_level 2; #压缩等级</span><br><span class=\"line\">    gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml;</span><br><span class=\"line\">    #压缩类型，默认就已经包含text&#x2F;html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class=\"line\"></span><br><span class=\"line\">    # 应用 myblog 是容器网络中的昵称</span><br><span class=\"line\">    upstream blogs &#123;</span><br><span class=\"line\">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class=\"line\">        # 单台机器 weight 设置无意义</span><br><span class=\"line\">        server myblog:3001 weight&#x3D;3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 虚拟主机的配置</span><br><span class=\"line\">    server</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        listen 80;　　　　#监听端口</span><br><span class=\"line\"></span><br><span class=\"line\">        server_name aa.cn www.aa.cn ; #server_name end  #域名可以有多个，用空格隔开</span><br><span class=\"line\"></span><br><span class=\"line\">        index index.html index.htm index.php;  # 设置访问主页</span><br><span class=\"line\"></span><br><span class=\"line\">        set $subdomain &#39;&#39;;  # 绑定目录为二级域名 bbb.aa.com  根目录 &#x2F;bbb  文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">        if ( $host ~* &quot;(?:(\\w+\\.)&#123;0,&#125;)(\\b(?!www\\b)\\w+)\\.\\b(?!(com|org|gov|net|cn)\\b)\\w+\\.[a-zA-Z]+&quot; )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            set $subdomain &quot;&#x2F;$2&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        root &#x2F;home&#x2F;wwwroot&#x2F;aa.cn&#x2F;web$subdomain;# 访问域名跟目录  </span><br><span class=\"line\"></span><br><span class=\"line\">        include rewrite&#x2F;dedecms.conf; #rewrite end   #载入其他配置文件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*.(php|php5)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        　　fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        　　fastcgi_index index.php;</span><br><span class=\"line\">        　　include fastcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #图片缓存时间设置</span><br><span class=\"line\">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        　　expires 10d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #JS和CSS缓存时间设置</span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        　　expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 日志格式设定</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class=\"line\">    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class=\"line\">    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;</span><br><span class=\"line\">    #定义本虚拟主机的访问日志</span><br><span class=\"line\">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;ha97access.log access;</span><br><span class=\"line\"></span><br><span class=\"line\">    #对 &quot;&#x2F;&quot; 启用反向代理</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:88;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        #以下是一些反向代理的配置，可选。</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">        proxy_temp_file_write_size 64k;</span><br><span class=\"line\">        #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 设定查看Nginx状态的地址</span><br><span class=\"line\">    location &#x2F;NginxStatus &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        stub_status on;</span><br><span class=\"line\">        access_log on;</span><br><span class=\"line\">        auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">        auth_basic_user_file conf&#x2F;htpasswd;</span><br><span class=\"line\">        #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #本地动静分离反向代理配置</span><br><span class=\"line\">    #所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">    location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        expires 15d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ .*.(js|css)?$</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用记录\"><a href=\"#使用记录\" class=\"headerlink\" title=\"使用记录\"></a>使用记录</h3><h4 id=\"nginx热更新\"><a href=\"#nginx热更新\" class=\"headerlink\" title=\"nginx热更新\"></a>nginx热更新</h4><p>在docker中,实现nginx热更新 <code>docker exec -i [nginx容器名/id] nginx -s reload</code></p>\n<h3 id=\"nginx-日志配置\"><a href=\"#nginx-日志配置\" class=\"headerlink\" title=\"nginx 日志配置\"></a>nginx 日志配置</h3><p><a href=\"https://www.cnblogs.com/biglittleant/p/8979856.html\">日志配置 参考</a></p>\n<h2 id=\"进阶使用\"><a href=\"#进阶使用\" class=\"headerlink\" title=\"进阶使用\"></a>进阶使用</h2><p>再文章开始, 我们使用docker安装nginx, 我们完全使用了nginx官方的默认配置, 这里我们将使用自定义配置来启动nginx</p>\n<p>首先我们得知道 nginx 官方 docker 镜像得conf文件位置在哪</p>\n<p>我得nginx版本conf文件在: /etc/nginx/nginx.conf (可能不同版本的配置文件会有所不同, 所以我们在拉取镜像的时候最好固定版本)</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p><a href=\"https://www.cnblogs.com/xuey/p/7631690.html\">Nginx配置文件nginx.conf详解</a></p>\n<p><a href=\"https://www.cnblogs.com/sign-ptk/p/6723048.html\">nginx的location配置详解</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2>"},{"title":"Python3 学习","date":"2019-07-04T07:16:11.000Z","_content":"\n本篇博客学习总结于[Python - 100天从新手到大师](https://github.com/jackfrued/Python-100-Days)\n\n## Python是一个“优雅”、“明确”、“简单”的编程语言\n\n给初学者的建议:\n\n1. Make English as your working language.\n2. Practice makes perfect.\n3. All experience comes from mistakes.\n4. Don't be one of the leeches.\n5. Either stand out or kicked out.\n\n## Python基础数据类型\n\n1. 整数\n2. 字符串\n3. 浮点数\n4. True/False\n5. None\n\n## Python数据结构\n\n1. List（列表）: 数组\n2. Tuple（元组）: 不可修改列表\n3. Set（集合）: 同数学中的集合, 不可重复, 可以技术 交集、并集、差集等运算\n4. Dictionary（字典）: 每一个元素都是由 “键值对” 组成\n\n## 字符串格式化代码\n\n参数|说明\n:----:|:----------------------------:\n%%|百分号标记\n%c|字符及其ASCII码\n%s|字符串\n%d|有符号整数(十进制)\n%u|无符号整数(十进制)\n%o|无符号整数(八进制)\n%x|无符号整数(十六进制)\n%X|无符号整数(十六进制大写字符)\n%e|浮点数字(科学计数法)\n%E|浮点数字(科学计数法，用E代替e)\n%f|浮点数字(用小数点符号)\n%g|浮点数字(根据值的大小采用%e或%f)\n%G|浮点数字(类似于%g)\n%p|指针(用十六进制打印值的内存地址)\n%n|存储输出字符的数量放进参数列表的下一个变量中\n\n## 算术运算符\n\n运算符|描述|实例\n:------:|:--------------------:|:----------:\n+|加 - 两个对象相加|a + b 输出结果 31\n-|减 - 得到负数或是一个数减去另一个数|a - b 输出结果 -11\n*|乘 - 两个数相乘或是返回一个被重复若干次的字符串|a * b 输出结果 210\n/|除 - x 除以 y|b / a 输出结果 2.1\n%|取模 - 返回除法的余数|b % a 输出结果 1\n**|幂 - 返回x的y次幂|a**b 为10的21次方\n//|取整除 - 向下取接近除数的整数|9//2 = 4; -9//2 = -5\n\n## 特殊运算符\n\n运算符|描述\n:-----:|:--------------------:\n&|在set求交集的时候,同set1.intersection(set2)\n\\||在set求并集的时候,同set1.union(set2)\n-|在set求差集的时候,同set1.difference(set2)\n^|在set求对称差的时候,同set1.symmetric_difference(set2)\n\n## 文件操作符\n\n### python内置的 `open` 函数\n\n操作模式|具体含义\n:----:|:--------------------:\n'r'|读取 （默认）\n'w'|写入（会先截断之前的内容）\n'x'|写入，如果文件已经存在会产生异常\n'a'|追加，将内容写入到已有文件的末尾\n'b'|二进制模式\n't'|文本模式（默认）\n'+'|更新（既可以读又可以写）\n\n### python的`JSON`模块\n\n常用的四个函数\n\n+ dump - 将Python对象按照JSON格式序列化到文件中\n+ dumps - 将Python对象处理成JSON格式的字符串\n+ load - 将文件中的JSON数据反序列化成对象\n+ loads - 将字符串的内容反序列化成Python对象\n\n这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书维基百科上对这两个概念是这样解释的：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。\n\n### 实际操作\n\n```python\n#!/usr/local/bin/python3\n\"\"\"\n文件操作和异常处理及JSON数据\n\"\"\"\n\nimport json\n\n\ndef read():\n    \"\"\"读取文件\"\"\"\n    try:\n        fs = open('a.txt', 'r', encoding='utf-8')\n        print(fs.read())\n    except FileNotFoundError:\n        print('文件不存在')\n    finally:\n        if fs:\n            fs.close()\n\n\ndef writh(cmd='w'):\n    \"\"\"写文件\"\"\"\n    try:\n        txt = (x for x in range(600, 1000))\n        fs = open('b.txt', cmd, encoding='utf-8')\n        for t in txt:\n            fs.write(str(t) + '\\n')\n    except IOError:\n        print('IO异常')\n    finally:\n        if fs:\n            fs.close()\n\n\ndef with_def():\n    \"\"\"\n    使用with关键字,指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源\n    \"\"\"\n    try:\n        \"\"\"一次读取所有文件\"\"\"\n        with open('a.txt', 'r', encoding='utf-8') as f1:\n            print(f1.read())\n\n        \"\"\"使用for-in逐行读取\"\"\"\n        with open('a.txt', encoding='utf-8', mode='r') as f2:\n            for line in f2:\n                print(line, end='')\n    except Exception:\n        print('错误', Exception)\n\n\ndef buffer_file_def():\n    \"\"\"读取二进制文件(拷贝图片)\"\"\"\n    try:\n        \"\"\"复制文件\"\"\"\n        with open('/Users/aolei/Pictures/my images/32916897.jpg', mode='rb') as f:\n            data = f.read()\n            print(data)\n\n        \"\"\"粘贴到当前目录下\"\"\"\n        with open('head.jpg', mode='wb') as f:\n            f.write(data)\n            print('Copy Success')\n    except FileNotFoundError :\n        print('文件不存在')\n    except UnicodeEncodeError:\n        print('编码异常')\n\n\ndef json_data_def():\n    \"\"\"python对json数据的处理\"\"\"\n    myuser = {\n        'name':'李黑',\n        'sex': '男',\n        'age': 0,\n        'qq': 957658,\n        'friends': ['王大锤', '白元芳'],\n        'cars': [\n            {'brand': 'BYD', 'max_speed': 180},\n            {'brand': 'Audi', 'max_speed': 280},\n            {'brand': 'Benz', 'max_speed': 320}\n        ]\n    }\n\n    try:\n        \"\"\"将python字典对象序列化为json文件\"\"\"\n        with open('users.json', 'w', encoding='utf-8') as f:\n            json.dump(myuser, f)\n\n        \"\"\"将json文件反序列化为python字典对象\"\"\"\n        with open('users.json', 'r', encoding = 'utf-8') as f:\n            curr_user = json.load(f)\n            print(curr_user)\n    except IOError:\n        print('文件写入失败')\n\n\nif __name__ == \"__main__\":\n    # read()\n    # writh('a')\n    # with_def()\n    # buffer_file_def()\n    json_data_def()\n```\n\n## 参考\n\n[《总结：Python中的异常处理》](https://segmentfault.com/a/1190000007736783 \"思否 - 总结：Python中的异常处理\")\n\n[HTTP协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html \"阮一峰HTTP协议入门\")\n\n[聚合数据](https://www.juhe.cn/ \"聚合数据\")\n\n[阿凡达数据](https://www.avatardata.cn/ \"阿凡达数据\")\n\n## 结语\n\n> Don't be one of the leeches.\n\n![ ](./1.png)\n","source":"_posts/python3.md","raw":"---\ntitle: Python3 学习\ndate: 2019-07-04 15:16:11\ntags: Python\n---\n\n本篇博客学习总结于[Python - 100天从新手到大师](https://github.com/jackfrued/Python-100-Days)\n\n## Python是一个“优雅”、“明确”、“简单”的编程语言\n\n给初学者的建议:\n\n1. Make English as your working language.\n2. Practice makes perfect.\n3. All experience comes from mistakes.\n4. Don't be one of the leeches.\n5. Either stand out or kicked out.\n\n## Python基础数据类型\n\n1. 整数\n2. 字符串\n3. 浮点数\n4. True/False\n5. None\n\n## Python数据结构\n\n1. List（列表）: 数组\n2. Tuple（元组）: 不可修改列表\n3. Set（集合）: 同数学中的集合, 不可重复, 可以技术 交集、并集、差集等运算\n4. Dictionary（字典）: 每一个元素都是由 “键值对” 组成\n\n## 字符串格式化代码\n\n参数|说明\n:----:|:----------------------------:\n%%|百分号标记\n%c|字符及其ASCII码\n%s|字符串\n%d|有符号整数(十进制)\n%u|无符号整数(十进制)\n%o|无符号整数(八进制)\n%x|无符号整数(十六进制)\n%X|无符号整数(十六进制大写字符)\n%e|浮点数字(科学计数法)\n%E|浮点数字(科学计数法，用E代替e)\n%f|浮点数字(用小数点符号)\n%g|浮点数字(根据值的大小采用%e或%f)\n%G|浮点数字(类似于%g)\n%p|指针(用十六进制打印值的内存地址)\n%n|存储输出字符的数量放进参数列表的下一个变量中\n\n## 算术运算符\n\n运算符|描述|实例\n:------:|:--------------------:|:----------:\n+|加 - 两个对象相加|a + b 输出结果 31\n-|减 - 得到负数或是一个数减去另一个数|a - b 输出结果 -11\n*|乘 - 两个数相乘或是返回一个被重复若干次的字符串|a * b 输出结果 210\n/|除 - x 除以 y|b / a 输出结果 2.1\n%|取模 - 返回除法的余数|b % a 输出结果 1\n**|幂 - 返回x的y次幂|a**b 为10的21次方\n//|取整除 - 向下取接近除数的整数|9//2 = 4; -9//2 = -5\n\n## 特殊运算符\n\n运算符|描述\n:-----:|:--------------------:\n&|在set求交集的时候,同set1.intersection(set2)\n\\||在set求并集的时候,同set1.union(set2)\n-|在set求差集的时候,同set1.difference(set2)\n^|在set求对称差的时候,同set1.symmetric_difference(set2)\n\n## 文件操作符\n\n### python内置的 `open` 函数\n\n操作模式|具体含义\n:----:|:--------------------:\n'r'|读取 （默认）\n'w'|写入（会先截断之前的内容）\n'x'|写入，如果文件已经存在会产生异常\n'a'|追加，将内容写入到已有文件的末尾\n'b'|二进制模式\n't'|文本模式（默认）\n'+'|更新（既可以读又可以写）\n\n### python的`JSON`模块\n\n常用的四个函数\n\n+ dump - 将Python对象按照JSON格式序列化到文件中\n+ dumps - 将Python对象处理成JSON格式的字符串\n+ load - 将文件中的JSON数据反序列化成对象\n+ loads - 将字符串的内容反序列化成Python对象\n\n这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书维基百科上对这两个概念是这样解释的：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。\n\n### 实际操作\n\n```python\n#!/usr/local/bin/python3\n\"\"\"\n文件操作和异常处理及JSON数据\n\"\"\"\n\nimport json\n\n\ndef read():\n    \"\"\"读取文件\"\"\"\n    try:\n        fs = open('a.txt', 'r', encoding='utf-8')\n        print(fs.read())\n    except FileNotFoundError:\n        print('文件不存在')\n    finally:\n        if fs:\n            fs.close()\n\n\ndef writh(cmd='w'):\n    \"\"\"写文件\"\"\"\n    try:\n        txt = (x for x in range(600, 1000))\n        fs = open('b.txt', cmd, encoding='utf-8')\n        for t in txt:\n            fs.write(str(t) + '\\n')\n    except IOError:\n        print('IO异常')\n    finally:\n        if fs:\n            fs.close()\n\n\ndef with_def():\n    \"\"\"\n    使用with关键字,指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源\n    \"\"\"\n    try:\n        \"\"\"一次读取所有文件\"\"\"\n        with open('a.txt', 'r', encoding='utf-8') as f1:\n            print(f1.read())\n\n        \"\"\"使用for-in逐行读取\"\"\"\n        with open('a.txt', encoding='utf-8', mode='r') as f2:\n            for line in f2:\n                print(line, end='')\n    except Exception:\n        print('错误', Exception)\n\n\ndef buffer_file_def():\n    \"\"\"读取二进制文件(拷贝图片)\"\"\"\n    try:\n        \"\"\"复制文件\"\"\"\n        with open('/Users/aolei/Pictures/my images/32916897.jpg', mode='rb') as f:\n            data = f.read()\n            print(data)\n\n        \"\"\"粘贴到当前目录下\"\"\"\n        with open('head.jpg', mode='wb') as f:\n            f.write(data)\n            print('Copy Success')\n    except FileNotFoundError :\n        print('文件不存在')\n    except UnicodeEncodeError:\n        print('编码异常')\n\n\ndef json_data_def():\n    \"\"\"python对json数据的处理\"\"\"\n    myuser = {\n        'name':'李黑',\n        'sex': '男',\n        'age': 0,\n        'qq': 957658,\n        'friends': ['王大锤', '白元芳'],\n        'cars': [\n            {'brand': 'BYD', 'max_speed': 180},\n            {'brand': 'Audi', 'max_speed': 280},\n            {'brand': 'Benz', 'max_speed': 320}\n        ]\n    }\n\n    try:\n        \"\"\"将python字典对象序列化为json文件\"\"\"\n        with open('users.json', 'w', encoding='utf-8') as f:\n            json.dump(myuser, f)\n\n        \"\"\"将json文件反序列化为python字典对象\"\"\"\n        with open('users.json', 'r', encoding = 'utf-8') as f:\n            curr_user = json.load(f)\n            print(curr_user)\n    except IOError:\n        print('文件写入失败')\n\n\nif __name__ == \"__main__\":\n    # read()\n    # writh('a')\n    # with_def()\n    # buffer_file_def()\n    json_data_def()\n```\n\n## 参考\n\n[《总结：Python中的异常处理》](https://segmentfault.com/a/1190000007736783 \"思否 - 总结：Python中的异常处理\")\n\n[HTTP协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html \"阮一峰HTTP协议入门\")\n\n[聚合数据](https://www.juhe.cn/ \"聚合数据\")\n\n[阿凡达数据](https://www.avatardata.cn/ \"阿凡达数据\")\n\n## 结语\n\n> Don't be one of the leeches.\n\n![ ](./1.png)\n","slug":"python3","published":1,"updated":"2021-11-04T15:54:07.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ii10013ahte6u3x7eua","content":"<p>本篇博客学习总结于<a href=\"https://github.com/jackfrued/Python-100-Days\">Python - 100天从新手到大师</a></p>\n<h2 id=\"Python是一个“优雅”、“明确”、“简单”的编程语言\"><a href=\"#Python是一个“优雅”、“明确”、“简单”的编程语言\" class=\"headerlink\" title=\"Python是一个“优雅”、“明确”、“简单”的编程语言\"></a>Python是一个“优雅”、“明确”、“简单”的编程语言</h2><p>给初学者的建议:</p>\n<ol>\n<li>Make English as your working language.</li>\n<li>Practice makes perfect.</li>\n<li>All experience comes from mistakes.</li>\n<li>Don’t be one of the leeches.</li>\n<li>Either stand out or kicked out.</li>\n</ol>\n<h2 id=\"Python基础数据类型\"><a href=\"#Python基础数据类型\" class=\"headerlink\" title=\"Python基础数据类型\"></a>Python基础数据类型</h2><ol>\n<li>整数</li>\n<li>字符串</li>\n<li>浮点数</li>\n<li>True/False</li>\n<li>None</li>\n</ol>\n<h2 id=\"Python数据结构\"><a href=\"#Python数据结构\" class=\"headerlink\" title=\"Python数据结构\"></a>Python数据结构</h2><ol>\n<li>List（列表）: 数组</li>\n<li>Tuple（元组）: 不可修改列表</li>\n<li>Set（集合）: 同数学中的集合, 不可重复, 可以技术 交集、并集、差集等运算</li>\n<li>Dictionary（字典）: 每一个元素都是由 “键值对” 组成</li>\n</ol>\n<h2 id=\"字符串格式化代码\"><a href=\"#字符串格式化代码\" class=\"headerlink\" title=\"字符串格式化代码\"></a>字符串格式化代码</h2><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">%%</td>\n<td align=\"center\">百分号标记</td>\n</tr>\n<tr>\n<td align=\"center\">%c</td>\n<td align=\"center\">字符及其ASCII码</td>\n</tr>\n<tr>\n<td align=\"center\">%s</td>\n<td align=\"center\">字符串</td>\n</tr>\n<tr>\n<td align=\"center\">%d</td>\n<td align=\"center\">有符号整数(十进制)</td>\n</tr>\n<tr>\n<td align=\"center\">%u</td>\n<td align=\"center\">无符号整数(十进制)</td>\n</tr>\n<tr>\n<td align=\"center\">%o</td>\n<td align=\"center\">无符号整数(八进制)</td>\n</tr>\n<tr>\n<td align=\"center\">%x</td>\n<td align=\"center\">无符号整数(十六进制)</td>\n</tr>\n<tr>\n<td align=\"center\">%X</td>\n<td align=\"center\">无符号整数(十六进制大写字符)</td>\n</tr>\n<tr>\n<td align=\"center\">%e</td>\n<td align=\"center\">浮点数字(科学计数法)</td>\n</tr>\n<tr>\n<td align=\"center\">%E</td>\n<td align=\"center\">浮点数字(科学计数法，用E代替e)</td>\n</tr>\n<tr>\n<td align=\"center\">%f</td>\n<td align=\"center\">浮点数字(用小数点符号)</td>\n</tr>\n<tr>\n<td align=\"center\">%g</td>\n<td align=\"center\">浮点数字(根据值的大小采用%e或%f)</td>\n</tr>\n<tr>\n<td align=\"center\">%G</td>\n<td align=\"center\">浮点数字(类似于%g)</td>\n</tr>\n<tr>\n<td align=\"center\">%p</td>\n<td align=\"center\">指针(用十六进制打印值的内存地址)</td>\n</tr>\n<tr>\n<td align=\"center\">%n</td>\n<td align=\"center\">存储输出字符的数量放进参数列表的下一个变量中</td>\n</tr>\n</tbody></table>\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+</td>\n<td align=\"center\">加 - 两个对象相加</td>\n<td align=\"center\">a + b 输出结果 31</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">减 - 得到负数或是一个数减去另一个数</td>\n<td align=\"center\">a - b 输出结果 -11</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td align=\"center\">a * b 输出结果 210</td>\n</tr>\n<tr>\n<td align=\"center\">/</td>\n<td align=\"center\">除 - x 除以 y</td>\n<td align=\"center\">b / a 输出结果 2.1</td>\n</tr>\n<tr>\n<td align=\"center\">%</td>\n<td align=\"center\">取模 - 返回除法的余数</td>\n<td align=\"center\">b % a 输出结果 1</td>\n</tr>\n<tr>\n<td align=\"center\">**</td>\n<td align=\"center\">幂 - 返回x的y次幂</td>\n<td align=\"center\">a**b 为10的21次方</td>\n</tr>\n<tr>\n<td align=\"center\">//</td>\n<td align=\"center\">取整除 - 向下取接近除数的整数</td>\n<td align=\"center\">9//2 = 4; -9//2 = -5</td>\n</tr>\n</tbody></table>\n<h2 id=\"特殊运算符\"><a href=\"#特殊运算符\" class=\"headerlink\" title=\"特殊运算符\"></a>特殊运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">在set求交集的时候,同set1.intersection(set2)</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">在set求并集的时候,同set1.union(set2)</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">在set求差集的时候,同set1.difference(set2)</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">在set求对称差的时候,同set1.symmetric_difference(set2)</td>\n</tr>\n</tbody></table>\n<h2 id=\"文件操作符\"><a href=\"#文件操作符\" class=\"headerlink\" title=\"文件操作符\"></a>文件操作符</h2><h3 id=\"python内置的-open-函数\"><a href=\"#python内置的-open-函数\" class=\"headerlink\" title=\"python内置的 open 函数\"></a>python内置的 <code>open</code> 函数</h3><table>\n<thead>\n<tr>\n<th align=\"center\">操作模式</th>\n<th align=\"center\">具体含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">‘r’</td>\n<td align=\"center\">读取 （默认）</td>\n</tr>\n<tr>\n<td align=\"center\">‘w’</td>\n<td align=\"center\">写入（会先截断之前的内容）</td>\n</tr>\n<tr>\n<td align=\"center\">‘x’</td>\n<td align=\"center\">写入，如果文件已经存在会产生异常</td>\n</tr>\n<tr>\n<td align=\"center\">‘a’</td>\n<td align=\"center\">追加，将内容写入到已有文件的末尾</td>\n</tr>\n<tr>\n<td align=\"center\">‘b’</td>\n<td align=\"center\">二进制模式</td>\n</tr>\n<tr>\n<td align=\"center\">‘t’</td>\n<td align=\"center\">文本模式（默认）</td>\n</tr>\n<tr>\n<td align=\"center\">‘+’</td>\n<td align=\"center\">更新（既可以读又可以写）</td>\n</tr>\n</tbody></table>\n<h3 id=\"python的JSON模块\"><a href=\"#python的JSON模块\" class=\"headerlink\" title=\"python的JSON模块\"></a>python的<code>JSON</code>模块</h3><p>常用的四个函数</p>\n<ul>\n<li>dump - 将Python对象按照JSON格式序列化到文件中</li>\n<li>dumps - 将Python对象处理成JSON格式的字符串</li>\n<li>load - 将文件中的JSON数据反序列化成对象</li>\n<li>loads - 将字符串的内容反序列化成Python对象</li>\n</ul>\n<p>这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书维基百科上对这两个概念是这样解释的：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。</p>\n<h3 id=\"实际操作\"><a href=\"#实际操作\" class=\"headerlink\" title=\"实际操作\"></a>实际操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/local/bin/python3</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">文件操作和异常处理及JSON数据</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;读取文件&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        fs = open(<span class=\"string\">&#x27;a.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        print(fs.read())</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;文件不存在&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fs:</span><br><span class=\"line\">            fs.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writh</span>(<span class=\"params\">cmd=<span class=\"string\">&#x27;w&#x27;</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;写文件&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        txt = (x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">600</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">        fs = open(<span class=\"string\">&#x27;b.txt&#x27;</span>, cmd, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> txt:</span><br><span class=\"line\">            fs.write(str(t) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;IO异常&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fs:</span><br><span class=\"line\">            fs.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_def</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    使用with关键字,指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;一次读取所有文件&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;a.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f1:</span><br><span class=\"line\">            print(f1.read())</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;使用for-in逐行读取&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;a.txt&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f2:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f2:</span><br><span class=\"line\">                print(line, end=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;错误&#x27;</span>, Exception)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buffer_file_def</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;读取二进制文件(拷贝图片)&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;复制文件&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;/Users/aolei/Pictures/my images/32916897.jpg&#x27;</span>, mode=<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = f.read()</span><br><span class=\"line\">            print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;粘贴到当前目录下&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;head.jpg&#x27;</span>, mode=<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(data)</span><br><span class=\"line\">            print(<span class=\"string\">&#x27;Copy Success&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError :</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;文件不存在&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> UnicodeEncodeError:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;编码异常&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">json_data_def</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;python对json数据的处理&quot;&quot;&quot;</span></span><br><span class=\"line\">    myuser = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;李黑&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;sex&#x27;</span>: <span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;qq&#x27;</span>: <span class=\"number\">957658</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;friends&#x27;</span>: [<span class=\"string\">&#x27;王大锤&#x27;</span>, <span class=\"string\">&#x27;白元芳&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;cars&#x27;</span>: [</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;brand&#x27;</span>: <span class=\"string\">&#x27;BYD&#x27;</span>, <span class=\"string\">&#x27;max_speed&#x27;</span>: <span class=\"number\">180</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;brand&#x27;</span>: <span class=\"string\">&#x27;Audi&#x27;</span>, <span class=\"string\">&#x27;max_speed&#x27;</span>: <span class=\"number\">280</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;brand&#x27;</span>: <span class=\"string\">&#x27;Benz&#x27;</span>, <span class=\"string\">&#x27;max_speed&#x27;</span>: <span class=\"number\">320</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;将python字典对象序列化为json文件&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;users.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            json.dump(myuser, f)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;将json文件反序列化为python字典对象&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;users.json&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding = <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            curr_user = json.load(f)</span><br><span class=\"line\">            print(curr_user)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;文件写入失败&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># read()</span></span><br><span class=\"line\">    <span class=\"comment\"># writh(&#x27;a&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\"># with_def()</span></span><br><span class=\"line\">    <span class=\"comment\"># buffer_file_def()</span></span><br><span class=\"line\">    json_data_def()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://segmentfault.com/a/1190000007736783\" title=\"思否 - 总结：Python中的异常处理\">《总结：Python中的异常处理》</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\" title=\"阮一峰HTTP协议入门\">HTTP协议入门</a></p>\n<p><a href=\"https://www.juhe.cn/\" title=\"聚合数据\">聚合数据</a></p>\n<p><a href=\"https://www.avatardata.cn/\" title=\"阿凡达数据\">阿凡达数据</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><blockquote>\n<p>Don’t be one of the leeches.</p>\n</blockquote>\n<p><img src=\"./1.png\" alt=\" \"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇博客学习总结于<a href=\"https://github.com/jackfrued/Python-100-Days\">Python - 100天从新手到大师</a></p>\n<h2 id=\"Python是一个“优雅”、“明确”、“简单”的编程语言\"><a href=\"#Python是一个“优雅”、“明确”、“简单”的编程语言\" class=\"headerlink\" title=\"Python是一个“优雅”、“明确”、“简单”的编程语言\"></a>Python是一个“优雅”、“明确”、“简单”的编程语言</h2><p>给初学者的建议:</p>\n<ol>\n<li>Make English as your working language.</li>\n<li>Practice makes perfect.</li>\n<li>All experience comes from mistakes.</li>\n<li>Don’t be one of the leeches.</li>\n<li>Either stand out or kicked out.</li>\n</ol>\n<h2 id=\"Python基础数据类型\"><a href=\"#Python基础数据类型\" class=\"headerlink\" title=\"Python基础数据类型\"></a>Python基础数据类型</h2><ol>\n<li>整数</li>\n<li>字符串</li>\n<li>浮点数</li>\n<li>True/False</li>\n<li>None</li>\n</ol>\n<h2 id=\"Python数据结构\"><a href=\"#Python数据结构\" class=\"headerlink\" title=\"Python数据结构\"></a>Python数据结构</h2><ol>\n<li>List（列表）: 数组</li>\n<li>Tuple（元组）: 不可修改列表</li>\n<li>Set（集合）: 同数学中的集合, 不可重复, 可以技术 交集、并集、差集等运算</li>\n<li>Dictionary（字典）: 每一个元素都是由 “键值对” 组成</li>\n</ol>\n<h2 id=\"字符串格式化代码\"><a href=\"#字符串格式化代码\" class=\"headerlink\" title=\"字符串格式化代码\"></a>字符串格式化代码</h2><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">%%</td>\n<td align=\"center\">百分号标记</td>\n</tr>\n<tr>\n<td align=\"center\">%c</td>\n<td align=\"center\">字符及其ASCII码</td>\n</tr>\n<tr>\n<td align=\"center\">%s</td>\n<td align=\"center\">字符串</td>\n</tr>\n<tr>\n<td align=\"center\">%d</td>\n<td align=\"center\">有符号整数(十进制)</td>\n</tr>\n<tr>\n<td align=\"center\">%u</td>\n<td align=\"center\">无符号整数(十进制)</td>\n</tr>\n<tr>\n<td align=\"center\">%o</td>\n<td align=\"center\">无符号整数(八进制)</td>\n</tr>\n<tr>\n<td align=\"center\">%x</td>\n<td align=\"center\">无符号整数(十六进制)</td>\n</tr>\n<tr>\n<td align=\"center\">%X</td>\n<td align=\"center\">无符号整数(十六进制大写字符)</td>\n</tr>\n<tr>\n<td align=\"center\">%e</td>\n<td align=\"center\">浮点数字(科学计数法)</td>\n</tr>\n<tr>\n<td align=\"center\">%E</td>\n<td align=\"center\">浮点数字(科学计数法，用E代替e)</td>\n</tr>\n<tr>\n<td align=\"center\">%f</td>\n<td align=\"center\">浮点数字(用小数点符号)</td>\n</tr>\n<tr>\n<td align=\"center\">%g</td>\n<td align=\"center\">浮点数字(根据值的大小采用%e或%f)</td>\n</tr>\n<tr>\n<td align=\"center\">%G</td>\n<td align=\"center\">浮点数字(类似于%g)</td>\n</tr>\n<tr>\n<td align=\"center\">%p</td>\n<td align=\"center\">指针(用十六进制打印值的内存地址)</td>\n</tr>\n<tr>\n<td align=\"center\">%n</td>\n<td align=\"center\">存储输出字符的数量放进参数列表的下一个变量中</td>\n</tr>\n</tbody></table>\n<h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+</td>\n<td align=\"center\">加 - 两个对象相加</td>\n<td align=\"center\">a + b 输出结果 31</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">减 - 得到负数或是一个数减去另一个数</td>\n<td align=\"center\">a - b 输出结果 -11</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td align=\"center\">a * b 输出结果 210</td>\n</tr>\n<tr>\n<td align=\"center\">/</td>\n<td align=\"center\">除 - x 除以 y</td>\n<td align=\"center\">b / a 输出结果 2.1</td>\n</tr>\n<tr>\n<td align=\"center\">%</td>\n<td align=\"center\">取模 - 返回除法的余数</td>\n<td align=\"center\">b % a 输出结果 1</td>\n</tr>\n<tr>\n<td align=\"center\">**</td>\n<td align=\"center\">幂 - 返回x的y次幂</td>\n<td align=\"center\">a**b 为10的21次方</td>\n</tr>\n<tr>\n<td align=\"center\">//</td>\n<td align=\"center\">取整除 - 向下取接近除数的整数</td>\n<td align=\"center\">9//2 = 4; -9//2 = -5</td>\n</tr>\n</tbody></table>\n<h2 id=\"特殊运算符\"><a href=\"#特殊运算符\" class=\"headerlink\" title=\"特殊运算符\"></a>特殊运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">在set求交集的时候,同set1.intersection(set2)</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">在set求并集的时候,同set1.union(set2)</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">在set求差集的时候,同set1.difference(set2)</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">在set求对称差的时候,同set1.symmetric_difference(set2)</td>\n</tr>\n</tbody></table>\n<h2 id=\"文件操作符\"><a href=\"#文件操作符\" class=\"headerlink\" title=\"文件操作符\"></a>文件操作符</h2><h3 id=\"python内置的-open-函数\"><a href=\"#python内置的-open-函数\" class=\"headerlink\" title=\"python内置的 open 函数\"></a>python内置的 <code>open</code> 函数</h3><table>\n<thead>\n<tr>\n<th align=\"center\">操作模式</th>\n<th align=\"center\">具体含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">‘r’</td>\n<td align=\"center\">读取 （默认）</td>\n</tr>\n<tr>\n<td align=\"center\">‘w’</td>\n<td align=\"center\">写入（会先截断之前的内容）</td>\n</tr>\n<tr>\n<td align=\"center\">‘x’</td>\n<td align=\"center\">写入，如果文件已经存在会产生异常</td>\n</tr>\n<tr>\n<td align=\"center\">‘a’</td>\n<td align=\"center\">追加，将内容写入到已有文件的末尾</td>\n</tr>\n<tr>\n<td align=\"center\">‘b’</td>\n<td align=\"center\">二进制模式</td>\n</tr>\n<tr>\n<td align=\"center\">‘t’</td>\n<td align=\"center\">文本模式（默认）</td>\n</tr>\n<tr>\n<td align=\"center\">‘+’</td>\n<td align=\"center\">更新（既可以读又可以写）</td>\n</tr>\n</tbody></table>\n<h3 id=\"python的JSON模块\"><a href=\"#python的JSON模块\" class=\"headerlink\" title=\"python的JSON模块\"></a>python的<code>JSON</code>模块</h3><p>常用的四个函数</p>\n<ul>\n<li>dump - 将Python对象按照JSON格式序列化到文件中</li>\n<li>dumps - 将Python对象处理成JSON格式的字符串</li>\n<li>load - 将文件中的JSON数据反序列化成对象</li>\n<li>loads - 将字符串的内容反序列化成Python对象</li>\n</ul>\n<p>这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书维基百科上对这两个概念是这样解释的：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。</p>\n<h3 id=\"实际操作\"><a href=\"#实际操作\" class=\"headerlink\" title=\"实际操作\"></a>实际操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/local/bin/python3</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">文件操作和异常处理及JSON数据</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;读取文件&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        fs = open(<span class=\"string\">&#x27;a.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        print(fs.read())</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;文件不存在&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fs:</span><br><span class=\"line\">            fs.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writh</span>(<span class=\"params\">cmd=<span class=\"string\">&#x27;w&#x27;</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;写文件&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        txt = (x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">600</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">        fs = open(<span class=\"string\">&#x27;b.txt&#x27;</span>, cmd, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> txt:</span><br><span class=\"line\">            fs.write(str(t) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;IO异常&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fs:</span><br><span class=\"line\">            fs.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_def</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    使用with关键字,指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;一次读取所有文件&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;a.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f1:</span><br><span class=\"line\">            print(f1.read())</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;使用for-in逐行读取&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;a.txt&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f2:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f2:</span><br><span class=\"line\">                print(line, end=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;错误&#x27;</span>, Exception)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buffer_file_def</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;读取二进制文件(拷贝图片)&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;复制文件&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;/Users/aolei/Pictures/my images/32916897.jpg&#x27;</span>, mode=<span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = f.read()</span><br><span class=\"line\">            print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;粘贴到当前目录下&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;head.jpg&#x27;</span>, mode=<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(data)</span><br><span class=\"line\">            print(<span class=\"string\">&#x27;Copy Success&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError :</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;文件不存在&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> UnicodeEncodeError:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;编码异常&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">json_data_def</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;python对json数据的处理&quot;&quot;&quot;</span></span><br><span class=\"line\">    myuser = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;name&#x27;</span>:<span class=\"string\">&#x27;李黑&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;sex&#x27;</span>: <span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;qq&#x27;</span>: <span class=\"number\">957658</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;friends&#x27;</span>: [<span class=\"string\">&#x27;王大锤&#x27;</span>, <span class=\"string\">&#x27;白元芳&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;cars&#x27;</span>: [</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;brand&#x27;</span>: <span class=\"string\">&#x27;BYD&#x27;</span>, <span class=\"string\">&#x27;max_speed&#x27;</span>: <span class=\"number\">180</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;brand&#x27;</span>: <span class=\"string\">&#x27;Audi&#x27;</span>, <span class=\"string\">&#x27;max_speed&#x27;</span>: <span class=\"number\">280</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;brand&#x27;</span>: <span class=\"string\">&#x27;Benz&#x27;</span>, <span class=\"string\">&#x27;max_speed&#x27;</span>: <span class=\"number\">320</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;将python字典对象序列化为json文件&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;users.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            json.dump(myuser, f)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;将json文件反序列化为python字典对象&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;users.json&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding = <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            curr_user = json.load(f)</span><br><span class=\"line\">            print(curr_user)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;文件写入失败&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># read()</span></span><br><span class=\"line\">    <span class=\"comment\"># writh(&#x27;a&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\"># with_def()</span></span><br><span class=\"line\">    <span class=\"comment\"># buffer_file_def()</span></span><br><span class=\"line\">    json_data_def()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://segmentfault.com/a/1190000007736783\" title=\"思否 - 总结：Python中的异常处理\">《总结：Python中的异常处理》</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\" title=\"阮一峰HTTP协议入门\">HTTP协议入门</a></p>\n<p><a href=\"https://www.juhe.cn/\" title=\"聚合数据\">聚合数据</a></p>\n<p><a href=\"https://www.avatardata.cn/\" title=\"阿凡达数据\">阿凡达数据</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><blockquote>\n<p>Don’t be one of the leeches.</p>\n</blockquote>\n<p><img src=\"./1.png\" alt=\" \"></p>\n"},{"title":"正则表达式","date":"2019-07-17T03:19:25.000Z","_content":"\n学习正则表达式\n\n[正则表达式30分钟入门教程](https://deerchao.net/tutorials/regex/regex.htm)\n\n[Python - 100天从新手到大师](https://github.com/jackfrued/Python-100-Days)\n\n## 基本\n\n符号|解释|示例|说明\n:----:|:---------------------:|:----------------------------:|:----------------------------:\n.|匹配任意字符|b.t|可以匹配bat / but / b#t / b1t等\n\\w|匹配字母/数字/下划线|b\\wt|可以匹配bat / b1t / b_t等但不能匹配b#t\n\\s|匹配空白字符（包括\\r、\\n、\\t等）|love\\syou|可以匹配love you\n\\d|匹配数字|\\d\\d|可以匹配01 / 23 / 99等\n\\b|匹配单词的边界|\\bThe\\b|\n^|匹配字符串的开始|^The|可以匹配The开头的字符串\n$|匹配字符串的结束|.exe$|可以匹配.exe结尾的字符串\n\\W|匹配非字母/数字/下划线|b\\Wt|可以匹配b#t / b@t等但不能匹配but / b1t / b_t等\n\\S|匹配非空白字符|love\\Syou|可以匹配love#you等但不能匹配love you\n\\D|匹配非数字|\\d\\D|可以匹配9a / 3# / 0F等\n\\B|匹配非单词边界|\\Bio\\B|\n[]|匹配来自字符集的任意单一字符|[aeiou]|可以匹配任一元音字母字符\n[^]|匹配不在字符集中的任意单一字符|[^aeiou]|可以匹配任一非元音字母字符\n*|匹配0次或多次|\\w*|\n+|匹配1次或多次|\\w+|\n?|匹配0次或1次|\\w?|\n{N}|匹配N次|\\w{3}|\n{M,}|匹配至少M次|\\w{3,}|\n{M,N}|匹配至少M次至多N次|\\w{3,6}|\n\\||分支|foo|bar|可以匹配foo或者bar\n(?#)|注释||\n(exp)|匹配exp并捕获到自动命名的组中||\n(?<name>exp)|匹配exp并捕获到名为name的组中||\n(?:exp)|匹配exp但是不捕获匹配的文本||\n(?=exp)|匹配exp前面的位置|\\b\\w+(?=ing)|可以匹配I'm dancing中的danc\n(?<=exp)|匹配exp后面的位置|(?<=\\bdanc)\\w+\\b|可以匹配I love dancing and reading中的第一个ing\n(?!exp)|匹配后面不是exp的位置||\n(?<!exp)|匹配前面不是exp的位置||\n*?|重复任意次，但尽可能少重复|a.*b\na.*?b|将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串\n+?|重复1次或多次，但尽可能少重复||\n??|重复0次或1次，但尽可能少重复||\n{M,N}?|重复M到N次，但尽可能少重复||\n{M,}?|重复M次以上，但尽可能少重复||\n","source":"_posts/regular.md","raw":"---\ntitle: 正则表达式\ndate: 2019-07-17 11:19:25\ntags:\n---\n\n学习正则表达式\n\n[正则表达式30分钟入门教程](https://deerchao.net/tutorials/regex/regex.htm)\n\n[Python - 100天从新手到大师](https://github.com/jackfrued/Python-100-Days)\n\n## 基本\n\n符号|解释|示例|说明\n:----:|:---------------------:|:----------------------------:|:----------------------------:\n.|匹配任意字符|b.t|可以匹配bat / but / b#t / b1t等\n\\w|匹配字母/数字/下划线|b\\wt|可以匹配bat / b1t / b_t等但不能匹配b#t\n\\s|匹配空白字符（包括\\r、\\n、\\t等）|love\\syou|可以匹配love you\n\\d|匹配数字|\\d\\d|可以匹配01 / 23 / 99等\n\\b|匹配单词的边界|\\bThe\\b|\n^|匹配字符串的开始|^The|可以匹配The开头的字符串\n$|匹配字符串的结束|.exe$|可以匹配.exe结尾的字符串\n\\W|匹配非字母/数字/下划线|b\\Wt|可以匹配b#t / b@t等但不能匹配but / b1t / b_t等\n\\S|匹配非空白字符|love\\Syou|可以匹配love#you等但不能匹配love you\n\\D|匹配非数字|\\d\\D|可以匹配9a / 3# / 0F等\n\\B|匹配非单词边界|\\Bio\\B|\n[]|匹配来自字符集的任意单一字符|[aeiou]|可以匹配任一元音字母字符\n[^]|匹配不在字符集中的任意单一字符|[^aeiou]|可以匹配任一非元音字母字符\n*|匹配0次或多次|\\w*|\n+|匹配1次或多次|\\w+|\n?|匹配0次或1次|\\w?|\n{N}|匹配N次|\\w{3}|\n{M,}|匹配至少M次|\\w{3,}|\n{M,N}|匹配至少M次至多N次|\\w{3,6}|\n\\||分支|foo|bar|可以匹配foo或者bar\n(?#)|注释||\n(exp)|匹配exp并捕获到自动命名的组中||\n(?<name>exp)|匹配exp并捕获到名为name的组中||\n(?:exp)|匹配exp但是不捕获匹配的文本||\n(?=exp)|匹配exp前面的位置|\\b\\w+(?=ing)|可以匹配I'm dancing中的danc\n(?<=exp)|匹配exp后面的位置|(?<=\\bdanc)\\w+\\b|可以匹配I love dancing and reading中的第一个ing\n(?!exp)|匹配后面不是exp的位置||\n(?<!exp)|匹配前面不是exp的位置||\n*?|重复任意次，但尽可能少重复|a.*b\na.*?b|将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串\n+?|重复1次或多次，但尽可能少重复||\n??|重复0次或1次，但尽可能少重复||\n{M,N}?|重复M到N次，但尽可能少重复||\n{M,}?|重复M次以上，但尽可能少重复||\n","slug":"regular","published":1,"updated":"2021-11-04T15:54:07.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ii20016ahte1uef5rrn","content":"<p>学习正则表达式</p>\n<p><a href=\"https://deerchao.net/tutorials/regex/regex.htm\">正则表达式30分钟入门教程</a></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">Python - 100天从新手到大师</a></p>\n<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><table>\n<thead>\n<tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">解释</th>\n<th align=\"center\">示例</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">.</td>\n<td align=\"center\">匹配任意字符</td>\n<td align=\"center\">b.t</td>\n<td align=\"center\">可以匹配bat / but / b#t / b1t等</td>\n</tr>\n<tr>\n<td align=\"center\">\\w</td>\n<td align=\"center\">匹配字母/数字/下划线</td>\n<td align=\"center\">b\\wt</td>\n<td align=\"center\">可以匹配bat / b1t / b_t等但不能匹配b#t</td>\n</tr>\n<tr>\n<td align=\"center\">\\s</td>\n<td align=\"center\">匹配空白字符（包括\\r、\\n、\\t等）</td>\n<td align=\"center\">love\\syou</td>\n<td align=\"center\">可以匹配love you</td>\n</tr>\n<tr>\n<td align=\"center\">\\d</td>\n<td align=\"center\">匹配数字</td>\n<td align=\"center\">\\d\\d</td>\n<td align=\"center\">可以匹配01 / 23 / 99等</td>\n</tr>\n<tr>\n<td align=\"center\">\\b</td>\n<td align=\"center\">匹配单词的边界</td>\n<td align=\"center\">\\bThe\\b</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">匹配字符串的开始</td>\n<td align=\"center\">^The</td>\n<td align=\"center\">可以匹配The开头的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\">匹配字符串的结束</td>\n<td align=\"center\">.exe$</td>\n<td align=\"center\">可以匹配.exe结尾的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">\\W</td>\n<td align=\"center\">匹配非字母/数字/下划线</td>\n<td align=\"center\">b\\Wt</td>\n<td align=\"center\">可以匹配b#t / b@t等但不能匹配but / b1t / b_t等</td>\n</tr>\n<tr>\n<td align=\"center\">\\S</td>\n<td align=\"center\">匹配非空白字符</td>\n<td align=\"center\">love\\Syou</td>\n<td align=\"center\">可以匹配love#you等但不能匹配love you</td>\n</tr>\n<tr>\n<td align=\"center\">\\D</td>\n<td align=\"center\">匹配非数字</td>\n<td align=\"center\">\\d\\D</td>\n<td align=\"center\">可以匹配9a / 3# / 0F等</td>\n</tr>\n<tr>\n<td align=\"center\">\\B</td>\n<td align=\"center\">匹配非单词边界</td>\n<td align=\"center\">\\Bio\\B</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">[]</td>\n<td align=\"center\">匹配来自字符集的任意单一字符</td>\n<td align=\"center\">[aeiou]</td>\n<td align=\"center\">可以匹配任一元音字母字符</td>\n</tr>\n<tr>\n<td align=\"center\">[^]</td>\n<td align=\"center\">匹配不在字符集中的任意单一字符</td>\n<td align=\"center\">[^aeiou]</td>\n<td align=\"center\">可以匹配任一非元音字母字符</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">匹配0次或多次</td>\n<td align=\"center\">\\w*</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td align=\"center\">匹配1次或多次</td>\n<td align=\"center\">\\w+</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">?</td>\n<td align=\"center\">匹配0次或1次</td>\n<td align=\"center\">\\w?</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">{N}</td>\n<td align=\"center\">匹配N次</td>\n<td align=\"center\">\\w{3}</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">{M,}</td>\n<td align=\"center\">匹配至少M次</td>\n<td align=\"center\">\\w{3,}</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">{M,N}</td>\n<td align=\"center\">匹配至少M次至多N次</td>\n<td align=\"center\">\\w{3,6}</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">分支</td>\n<td align=\"center\">foo</td>\n<td align=\"center\">bar</td>\n</tr>\n<tr>\n<td align=\"center\">(?#)</td>\n<td align=\"center\">注释</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">(exp)</td>\n<td align=\"center\">匹配exp并捕获到自动命名的组中</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">(?<name>exp)</td>\n<td align=\"center\">匹配exp并捕获到名为name的组中</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">(?:exp)</td>\n<td align=\"center\">匹配exp但是不捕获匹配的文本</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">(?=exp)</td>\n<td align=\"center\">匹配exp前面的位置</td>\n<td align=\"center\">\\b\\w+(?=ing)</td>\n<td align=\"center\">可以匹配I’m dancing中的danc</td>\n</tr>\n<tr>\n<td align=\"center\">(?&lt;=exp)</td>\n<td align=\"center\">匹配exp后面的位置</td>\n<td align=\"center\">(?&lt;=\\bdanc)\\w+\\b</td>\n<td align=\"center\">可以匹配I love dancing and reading中的第一个ing</td>\n</tr>\n<tr>\n<td align=\"center\">(?!exp)</td>\n<td align=\"center\">匹配后面不是exp的位置</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">(?&lt;!exp)</td>\n<td align=\"center\">匹配前面不是exp的位置</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">*?</td>\n<td align=\"center\">重复任意次，但尽可能少重复</td>\n<td align=\"center\">a.*b</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">a.*?b</td>\n<td align=\"center\">将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">+?</td>\n<td align=\"center\">重复1次或多次，但尽可能少重复</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">??</td>\n<td align=\"center\">重复0次或1次，但尽可能少重复</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">{M,N}?</td>\n<td align=\"center\">重复M到N次，但尽可能少重复</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">{M,}?</td>\n<td align=\"center\">重复M次以上，但尽可能少重复</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p>学习正则表达式</p>\n<p><a href=\"https://deerchao.net/tutorials/regex/regex.htm\">正则表达式30分钟入门教程</a></p>\n<p><a href=\"https://github.com/jackfrued/Python-100-Days\">Python - 100天从新手到大师</a></p>\n<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><table>\n<thead>\n<tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">解释</th>\n<th align=\"center\">示例</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">.</td>\n<td align=\"center\">匹配任意字符</td>\n<td align=\"center\">b.t</td>\n<td align=\"center\">可以匹配bat / but / b#t / b1t等</td>\n</tr>\n<tr>\n<td align=\"center\">\\w</td>\n<td align=\"center\">匹配字母/数字/下划线</td>\n<td align=\"center\">b\\wt</td>\n<td align=\"center\">可以匹配bat / b1t / b_t等但不能匹配b#t</td>\n</tr>\n<tr>\n<td align=\"center\">\\s</td>\n<td align=\"center\">匹配空白字符（包括\\r、\\n、\\t等）</td>\n<td align=\"center\">love\\syou</td>\n<td align=\"center\">可以匹配love you</td>\n</tr>\n<tr>\n<td align=\"center\">\\d</td>\n<td align=\"center\">匹配数字</td>\n<td align=\"center\">\\d\\d</td>\n<td align=\"center\">可以匹配01 / 23 / 99等</td>\n</tr>\n<tr>\n<td align=\"center\">\\b</td>\n<td align=\"center\">匹配单词的边界</td>\n<td align=\"center\">\\bThe\\b</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">匹配字符串的开始</td>\n<td align=\"center\">^The</td>\n<td align=\"center\">可以匹配The开头的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\">匹配字符串的结束</td>\n<td align=\"center\">.exe$</td>\n<td align=\"center\">可以匹配.exe结尾的字符串</td>\n</tr>\n<tr>\n<td align=\"center\">\\W</td>\n<td align=\"center\">匹配非字母/数字/下划线</td>\n<td align=\"center\">b\\Wt</td>\n<td align=\"center\">可以匹配b#t / b@t等但不能匹配but / b1t / b_t等</td>\n</tr>\n<tr>\n<td align=\"center\">\\S</td>\n<td align=\"center\">匹配非空白字符</td>\n<td align=\"center\">love\\Syou</td>\n<td align=\"center\">可以匹配love#you等但不能匹配love you</td>\n</tr>\n<tr>\n<td align=\"center\">\\D</td>\n<td align=\"center\">匹配非数字</td>\n<td align=\"center\">\\d\\D</td>\n<td align=\"center\">可以匹配9a / 3# / 0F等</td>\n</tr>\n<tr>\n<td align=\"center\">\\B</td>\n<td align=\"center\">匹配非单词边界</td>\n<td align=\"center\">\\Bio\\B</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">[]</td>\n<td align=\"center\">匹配来自字符集的任意单一字符</td>\n<td align=\"center\">[aeiou]</td>\n<td align=\"center\">可以匹配任一元音字母字符</td>\n</tr>\n<tr>\n<td align=\"center\">[^]</td>\n<td align=\"center\">匹配不在字符集中的任意单一字符</td>\n<td align=\"center\">[^aeiou]</td>\n<td align=\"center\">可以匹配任一非元音字母字符</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">匹配0次或多次</td>\n<td align=\"center\">\\w*</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td align=\"center\">匹配1次或多次</td>\n<td align=\"center\">\\w+</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">?</td>\n<td align=\"center\">匹配0次或1次</td>\n<td align=\"center\">\\w?</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">{N}</td>\n<td align=\"center\">匹配N次</td>\n<td align=\"center\">\\w{3}</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">{M,}</td>\n<td align=\"center\">匹配至少M次</td>\n<td align=\"center\">\\w{3,}</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">{M,N}</td>\n<td align=\"center\">匹配至少M次至多N次</td>\n<td align=\"center\">\\w{3,6}</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">分支</td>\n<td align=\"center\">foo</td>\n<td align=\"center\">bar</td>\n</tr>\n<tr>\n<td align=\"center\">(?#)</td>\n<td align=\"center\">注释</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">(exp)</td>\n<td align=\"center\">匹配exp并捕获到自动命名的组中</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">(?<name>exp)</td>\n<td align=\"center\">匹配exp并捕获到名为name的组中</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">(?:exp)</td>\n<td align=\"center\">匹配exp但是不捕获匹配的文本</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">(?=exp)</td>\n<td align=\"center\">匹配exp前面的位置</td>\n<td align=\"center\">\\b\\w+(?=ing)</td>\n<td align=\"center\">可以匹配I’m dancing中的danc</td>\n</tr>\n<tr>\n<td align=\"center\">(?&lt;=exp)</td>\n<td align=\"center\">匹配exp后面的位置</td>\n<td align=\"center\">(?&lt;=\\bdanc)\\w+\\b</td>\n<td align=\"center\">可以匹配I love dancing and reading中的第一个ing</td>\n</tr>\n<tr>\n<td align=\"center\">(?!exp)</td>\n<td align=\"center\">匹配后面不是exp的位置</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">(?&lt;!exp)</td>\n<td align=\"center\">匹配前面不是exp的位置</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">*?</td>\n<td align=\"center\">重复任意次，但尽可能少重复</td>\n<td align=\"center\">a.*b</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">a.*?b</td>\n<td align=\"center\">将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">+?</td>\n<td align=\"center\">重复1次或多次，但尽可能少重复</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">??</td>\n<td align=\"center\">重复0次或1次，但尽可能少重复</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">{M,N}?</td>\n<td align=\"center\">重复M到N次，但尽可能少重复</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">{M,}?</td>\n<td align=\"center\">重复M次以上，但尽可能少重复</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n"},{"title":"云函数（serverless）","date":"2020-10-15T06:35:36.000Z","_content":"\nServerless，它是云计算发展过程中出现的一种计算资源的抽象，依赖第三方服务，开发者可以更加专注的开发自己的业务代码，而无需关心底层资源的分配、扩容和部署。\n\n特征\n\n1. 开发者只需要专注于业务，无需关心底层资源的分配、扩容和部署\n2. 按需使用和收费\n3. 自动扩缩容\n\n[前端福音：Serverless 和 SSR 的天作之合 - 以腾讯云SCF为例](https://serverlesscloud.cn/best-practice/2020-06-10-ssr-yuga)\n\n[BaaS、FaaS、Serverless都是什么馅儿？](https://www.sohu.com/a/198253530_115128)\n\n[Midway Serverless 使用文档 - 阿里开源](https://www.yuque.com/midwayjs/faas)\n\n[精读《Serverless 给前端带来了什么》](https://zhuanlan.zhihu.com/p/58877583)\n\n# 问题\n\n使用mac系统时出现的一个问题\n\n![ ](./WX20201015-145716@2x.png)\n\n按照其提供的[方法](https://github.com/meteor/meteor/issues/8057#issuecomment-261011063)成功解决\n\n```sh\n$ echo kern.maxfiles=65536 | sudo tee -a /etc/sysctl.conf\n$ echo kern.maxfilesperproc=65536 | sudo tee -a /etc/sysctl.conf\n$ sudo sysctl -w kern.maxfiles=65536\n$ sudo sysctl -w kern.maxfilesperproc=65536\n$ ulimit -n 65536\n```\n\n> 仅适用于 `Mac` 系统\n","source":"_posts/serverless.md","raw":"---\ntitle: 云函数（serverless）\ndate: 2020-10-15 14:35:36\ntags: serverless\n---\n\nServerless，它是云计算发展过程中出现的一种计算资源的抽象，依赖第三方服务，开发者可以更加专注的开发自己的业务代码，而无需关心底层资源的分配、扩容和部署。\n\n特征\n\n1. 开发者只需要专注于业务，无需关心底层资源的分配、扩容和部署\n2. 按需使用和收费\n3. 自动扩缩容\n\n[前端福音：Serverless 和 SSR 的天作之合 - 以腾讯云SCF为例](https://serverlesscloud.cn/best-practice/2020-06-10-ssr-yuga)\n\n[BaaS、FaaS、Serverless都是什么馅儿？](https://www.sohu.com/a/198253530_115128)\n\n[Midway Serverless 使用文档 - 阿里开源](https://www.yuque.com/midwayjs/faas)\n\n[精读《Serverless 给前端带来了什么》](https://zhuanlan.zhihu.com/p/58877583)\n\n# 问题\n\n使用mac系统时出现的一个问题\n\n![ ](./WX20201015-145716@2x.png)\n\n按照其提供的[方法](https://github.com/meteor/meteor/issues/8057#issuecomment-261011063)成功解决\n\n```sh\n$ echo kern.maxfiles=65536 | sudo tee -a /etc/sysctl.conf\n$ echo kern.maxfilesperproc=65536 | sudo tee -a /etc/sysctl.conf\n$ sudo sysctl -w kern.maxfiles=65536\n$ sudo sysctl -w kern.maxfilesperproc=65536\n$ ulimit -n 65536\n```\n\n> 仅适用于 `Mac` 系统\n","slug":"serverless","published":1,"updated":"2021-11-04T15:54:07.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ii20018ahtegpyc2dm6","content":"<p>Serverless，它是云计算发展过程中出现的一种计算资源的抽象，依赖第三方服务，开发者可以更加专注的开发自己的业务代码，而无需关心底层资源的分配、扩容和部署。</p>\n<p>特征</p>\n<ol>\n<li>开发者只需要专注于业务，无需关心底层资源的分配、扩容和部署</li>\n<li>按需使用和收费</li>\n<li>自动扩缩容</li>\n</ol>\n<p><a href=\"https://serverlesscloud.cn/best-practice/2020-06-10-ssr-yuga\">前端福音：Serverless 和 SSR 的天作之合 - 以腾讯云SCF为例</a></p>\n<p><a href=\"https://www.sohu.com/a/198253530_115128\">BaaS、FaaS、Serverless都是什么馅儿？</a></p>\n<p><a href=\"https://www.yuque.com/midwayjs/faas\">Midway Serverless 使用文档 - 阿里开源</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/58877583\">精读《Serverless 给前端带来了什么》</a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>使用mac系统时出现的一个问题</p>\n<p><img src=\"./WX20201015-145716@2x.png\" alt=\" \"></p>\n<p>按照其提供的<a href=\"https://github.com/meteor/meteor/issues/8057#issuecomment-261011063\">方法</a>成功解决</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> kern.maxfiles=65536 | sudo tee -a /etc/sysctl.conf</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> kern.maxfilesperproc=65536 | sudo tee -a /etc/sysctl.conf</span><br><span class=\"line\">$ sudo sysctl -w kern.maxfiles=65536</span><br><span class=\"line\">$ sudo sysctl -w kern.maxfilesperproc=65536</span><br><span class=\"line\">$ <span class=\"built_in\">ulimit</span> -n 65536</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>仅适用于 <code>Mac</code> 系统</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Serverless，它是云计算发展过程中出现的一种计算资源的抽象，依赖第三方服务，开发者可以更加专注的开发自己的业务代码，而无需关心底层资源的分配、扩容和部署。</p>\n<p>特征</p>\n<ol>\n<li>开发者只需要专注于业务，无需关心底层资源的分配、扩容和部署</li>\n<li>按需使用和收费</li>\n<li>自动扩缩容</li>\n</ol>\n<p><a href=\"https://serverlesscloud.cn/best-practice/2020-06-10-ssr-yuga\">前端福音：Serverless 和 SSR 的天作之合 - 以腾讯云SCF为例</a></p>\n<p><a href=\"https://www.sohu.com/a/198253530_115128\">BaaS、FaaS、Serverless都是什么馅儿？</a></p>\n<p><a href=\"https://www.yuque.com/midwayjs/faas\">Midway Serverless 使用文档 - 阿里开源</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/58877583\">精读《Serverless 给前端带来了什么》</a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>使用mac系统时出现的一个问题</p>\n<p><img src=\"./WX20201015-145716@2x.png\" alt=\" \"></p>\n<p>按照其提供的<a href=\"https://github.com/meteor/meteor/issues/8057#issuecomment-261011063\">方法</a>成功解决</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> kern.maxfiles=65536 | sudo tee -a /etc/sysctl.conf</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> kern.maxfilesperproc=65536 | sudo tee -a /etc/sysctl.conf</span><br><span class=\"line\">$ sudo sysctl -w kern.maxfiles=65536</span><br><span class=\"line\">$ sudo sysctl -w kern.maxfilesperproc=65536</span><br><span class=\"line\">$ <span class=\"built_in\">ulimit</span> -n 65536</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>仅适用于 <code>Mac</code> 系统</p>\n</blockquote>\n"},{"title":"Shell学习笔记","date":"2019-06-18T02:55:39.000Z","_content":"\nShell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁\n\nShell 编程跟 java、php 编程一样，只要有一个能编写代码¸的文本编辑器和一个能解释执行的脚本解释器就可以了。\n\n## 开始\n\n### 创建脚本文件\n\n新建一个扩展名为`.sh`的文件`test.sh`, sh代表*shell*\n\ntest.sh文件内容如下:\n\n```sh\n#!/bin/bash\necho \"Hello Shell\"\n```\n\n> `#!` 是一个约定俗成的标记, 用于告诉系统使用哪个解释器来执行这个脚本.  \n> `echo` 命令是用于向终端输出文本信息,也可用于向文件中写入数据\n\n### 运行shell脚本\n\n运行shell脚本的方式两种\n\n+ 通过可执行文件运行\n\n需要给脚本文件添加可执行权限\n\n```sh\n# 在 test.sh 文件所在的文件夹下, 执行以下命令\nchmod +x ./test.sh\n```\n\n> 这里需要注意的是, 一定要写成`./test.sh`而不是`test.sh`, 否责系统可能会找不到脚本文件, `./`的意思是 指定在当前文件路径下查找文件\n\n+ 作为解释器参数\n\n```sh\n/bin/sh test.sh\n/bin/php test.php\n```\n\n> 这种方式下,在文件第一行添加*标记*也没有效果(因为你已经指定了解释器来运行脚本)\n\n## 变量\n\n规则:\n\n1. 定义变量时，变量名不加美元符号\n2. 变量名和等号之间不能有空格\n3. 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。\n4. 中间不能有空格，可以使用下划线（_）。\n5. 不能使用标点符号。\n6. 不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n示例:\n\n有效命名:\n\n```sh\nRUNOOB\nLD_LIBRARY_PATH\n_var\nvar2\n```\n\n无效命名:\n\n```sh\n?var=123\nuser*name=runoob\n```\n\n显示赋值\n\n`your_name=\"runoob.com\"`\n\n通过语句赋值\n\n```sh\nfor file in `ls /etc`\n# 或\nfor file in $(ls /etc)\n```\n\n> 以上语句, 列出`/etc`路径下的所有文件名,赋值给`file`\n\n### 使用变量\n\n使用变量,只需要在变量前面加一个`$`符号\n\n```sh\nname=\"shell\"\necho $name\necho ${name}\n```\n\n`$name`和`${name}`都是可以的, `{}`是可选的, 它的作用是帮助解释器来识别变量边界的, 比如:\n\n```sh\nfor skill in Ada Coffe Action Java; do\n    echo \"I am good at ${skill}Script\"\ndone\n```\n\n如果不加 `{}` 则解释器认为`$skillScript`是一个变量(内容为空),\n\n>> 推荐给所有的变量加上`{}`,养成好的编程习惯\n\n### 只读变量\n\n已经定义的变量可以被重新赋值, **只读变量**除外\n\n定义方式为: 在变量前面加上 `readonly`\n\n```sh\nreadonly name=\"Shell\"\nname=\"jason\" # 这里会报错  error: NAME: This variable is read only.\n```\n\n### 删除变量\n\n```sh\nunset name\n```\n\n> unset 命令不能删除只读变量。 删除之后不能使用\n\n## 参考\n\n[菜鸟教程](https://www.runoob.com/linux/linux-shell.html \"Linux Shell教程\")\n\n## 结语\n\n学习一门技术, 开始的时候不要纠结各种看不懂的语法、不钻牛角尖, 先培养兴趣, 再循序渐进.\n","source":"_posts/shell.md","raw":"---\ntitle: Shell学习笔记\ndate: 2019-06-18 10:55:39\ntags: 脚本语言\n---\n\nShell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁\n\nShell 编程跟 java、php 编程一样，只要有一个能编写代码¸的文本编辑器和一个能解释执行的脚本解释器就可以了。\n\n## 开始\n\n### 创建脚本文件\n\n新建一个扩展名为`.sh`的文件`test.sh`, sh代表*shell*\n\ntest.sh文件内容如下:\n\n```sh\n#!/bin/bash\necho \"Hello Shell\"\n```\n\n> `#!` 是一个约定俗成的标记, 用于告诉系统使用哪个解释器来执行这个脚本.  \n> `echo` 命令是用于向终端输出文本信息,也可用于向文件中写入数据\n\n### 运行shell脚本\n\n运行shell脚本的方式两种\n\n+ 通过可执行文件运行\n\n需要给脚本文件添加可执行权限\n\n```sh\n# 在 test.sh 文件所在的文件夹下, 执行以下命令\nchmod +x ./test.sh\n```\n\n> 这里需要注意的是, 一定要写成`./test.sh`而不是`test.sh`, 否责系统可能会找不到脚本文件, `./`的意思是 指定在当前文件路径下查找文件\n\n+ 作为解释器参数\n\n```sh\n/bin/sh test.sh\n/bin/php test.php\n```\n\n> 这种方式下,在文件第一行添加*标记*也没有效果(因为你已经指定了解释器来运行脚本)\n\n## 变量\n\n规则:\n\n1. 定义变量时，变量名不加美元符号\n2. 变量名和等号之间不能有空格\n3. 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。\n4. 中间不能有空格，可以使用下划线（_）。\n5. 不能使用标点符号。\n6. 不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n示例:\n\n有效命名:\n\n```sh\nRUNOOB\nLD_LIBRARY_PATH\n_var\nvar2\n```\n\n无效命名:\n\n```sh\n?var=123\nuser*name=runoob\n```\n\n显示赋值\n\n`your_name=\"runoob.com\"`\n\n通过语句赋值\n\n```sh\nfor file in `ls /etc`\n# 或\nfor file in $(ls /etc)\n```\n\n> 以上语句, 列出`/etc`路径下的所有文件名,赋值给`file`\n\n### 使用变量\n\n使用变量,只需要在变量前面加一个`$`符号\n\n```sh\nname=\"shell\"\necho $name\necho ${name}\n```\n\n`$name`和`${name}`都是可以的, `{}`是可选的, 它的作用是帮助解释器来识别变量边界的, 比如:\n\n```sh\nfor skill in Ada Coffe Action Java; do\n    echo \"I am good at ${skill}Script\"\ndone\n```\n\n如果不加 `{}` 则解释器认为`$skillScript`是一个变量(内容为空),\n\n>> 推荐给所有的变量加上`{}`,养成好的编程习惯\n\n### 只读变量\n\n已经定义的变量可以被重新赋值, **只读变量**除外\n\n定义方式为: 在变量前面加上 `readonly`\n\n```sh\nreadonly name=\"Shell\"\nname=\"jason\" # 这里会报错  error: NAME: This variable is read only.\n```\n\n### 删除变量\n\n```sh\nunset name\n```\n\n> unset 命令不能删除只读变量。 删除之后不能使用\n\n## 参考\n\n[菜鸟教程](https://www.runoob.com/linux/linux-shell.html \"Linux Shell教程\")\n\n## 结语\n\n学习一门技术, 开始的时候不要纠结各种看不懂的语法、不钻牛角尖, 先培养兴趣, 再循序渐进.\n","slug":"shell","published":1,"updated":"2021-11-04T15:54:07.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ii3001aahte4hgbd1zk","content":"<p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁</p>\n<p>Shell 编程跟 java、php 编程一样，只要有一个能编写代码¸的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h3 id=\"创建脚本文件\"><a href=\"#创建脚本文件\" class=\"headerlink\" title=\"创建脚本文件\"></a>创建脚本文件</h3><p>新建一个扩展名为<code>.sh</code>的文件<code>test.sh</code>, sh代表<em>shell</em></p>\n<p>test.sh文件内容如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Hello Shell&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>#!</code> 是一个约定俗成的标记, 用于告诉系统使用哪个解释器来执行这个脚本.<br><code>echo</code> 命令是用于向终端输出文本信息,也可用于向文件中写入数据</p>\n</blockquote>\n<h3 id=\"运行shell脚本\"><a href=\"#运行shell脚本\" class=\"headerlink\" title=\"运行shell脚本\"></a>运行shell脚本</h3><p>运行shell脚本的方式两种</p>\n<ul>\n<li>通过可执行文件运行</li>\n</ul>\n<p>需要给脚本文件添加可执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 test.sh 文件所在的文件夹下, 执行以下命令</span></span><br><span class=\"line\">chmod +x ./test.sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里需要注意的是, 一定要写成<code>./test.sh</code>而不是<code>test.sh</code>, 否责系统可能会找不到脚本文件, <code>./</code>的意思是 指定在当前文件路径下查找文件</p>\n</blockquote>\n<ul>\n<li>作为解释器参数</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/sh test.sh</span><br><span class=\"line\">/bin/php test.php</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这种方式下,在文件第一行添加<em>标记</em>也没有效果(因为你已经指定了解释器来运行脚本)</p>\n</blockquote>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>规则:</p>\n<ol>\n<li>定义变量时，变量名不加美元符号</li>\n<li>变量名和等号之间不能有空格</li>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>\n</ol>\n<p>示例:</p>\n<p>有效命名:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUNOOB</span><br><span class=\"line\">LD_LIBRARY_PATH</span><br><span class=\"line\">_var</span><br><span class=\"line\">var2</span><br></pre></td></tr></table></figure>\n\n<p>无效命名:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?var=123</span><br><span class=\"line\">user*name=runoob</span><br></pre></td></tr></table></figure>\n\n<p>显示赋值</p>\n<p><code>your_name=&quot;runoob.com&quot;</code></p>\n<p>通过语句赋值</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> `ls /etc`</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> $(ls /etc)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上语句, 列出<code>/etc</code>路径下的所有文件名,赋值给<code>file</code></p>\n</blockquote>\n<h3 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h3><p>使用变量,只需要在变量前面加一个<code>$</code>符号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">&quot;shell&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$name</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;name&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>$name</code>和<code>$&#123;name&#125;</code>都是可以的, <code>&#123;&#125;</code>是可选的, 它的作用是帮助解释器来识别变量边界的, 比如:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> skill <span class=\"keyword\">in</span> Ada Coffe Action Java; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;I am good at <span class=\"variable\">$&#123;skill&#125;</span>Script&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不加 <code>&#123;&#125;</code> 则解释器认为<code>$skillScript</code>是一个变量(内容为空),</p>\n<blockquote>\n<blockquote>\n<p>推荐给所有的变量加上<code>&#123;&#125;</code>,养成好的编程习惯</p>\n</blockquote>\n</blockquote>\n<h3 id=\"只读变量\"><a href=\"#只读变量\" class=\"headerlink\" title=\"只读变量\"></a>只读变量</h3><p>已经定义的变量可以被重新赋值, <strong>只读变量</strong>除外</p>\n<p>定义方式为: 在变量前面加上 <code>readonly</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">readonly</span> name=<span class=\"string\">&quot;Shell&quot;</span></span><br><span class=\"line\">name=<span class=\"string\">&quot;jason&quot;</span> <span class=\"comment\"># 这里会报错  error: NAME: This variable is read only.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除变量\"><a href=\"#删除变量\" class=\"headerlink\" title=\"删除变量\"></a>删除变量</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unset</span> name</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>unset 命令不能删除只读变量。 删除之后不能使用</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.runoob.com/linux/linux-shell.html\" title=\"Linux Shell教程\">菜鸟教程</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>学习一门技术, 开始的时候不要纠结各种看不懂的语法、不钻牛角尖, 先培养兴趣, 再循序渐进.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁</p>\n<p>Shell 编程跟 java、php 编程一样，只要有一个能编写代码¸的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h3 id=\"创建脚本文件\"><a href=\"#创建脚本文件\" class=\"headerlink\" title=\"创建脚本文件\"></a>创建脚本文件</h3><p>新建一个扩展名为<code>.sh</code>的文件<code>test.sh</code>, sh代表<em>shell</em></p>\n<p>test.sh文件内容如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Hello Shell&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>#!</code> 是一个约定俗成的标记, 用于告诉系统使用哪个解释器来执行这个脚本.<br><code>echo</code> 命令是用于向终端输出文本信息,也可用于向文件中写入数据</p>\n</blockquote>\n<h3 id=\"运行shell脚本\"><a href=\"#运行shell脚本\" class=\"headerlink\" title=\"运行shell脚本\"></a>运行shell脚本</h3><p>运行shell脚本的方式两种</p>\n<ul>\n<li>通过可执行文件运行</li>\n</ul>\n<p>需要给脚本文件添加可执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 test.sh 文件所在的文件夹下, 执行以下命令</span></span><br><span class=\"line\">chmod +x ./test.sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里需要注意的是, 一定要写成<code>./test.sh</code>而不是<code>test.sh</code>, 否责系统可能会找不到脚本文件, <code>./</code>的意思是 指定在当前文件路径下查找文件</p>\n</blockquote>\n<ul>\n<li>作为解释器参数</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/sh test.sh</span><br><span class=\"line\">/bin/php test.php</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这种方式下,在文件第一行添加<em>标记</em>也没有效果(因为你已经指定了解释器来运行脚本)</p>\n</blockquote>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>规则:</p>\n<ol>\n<li>定义变量时，变量名不加美元符号</li>\n<li>变量名和等号之间不能有空格</li>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>\n</ol>\n<p>示例:</p>\n<p>有效命名:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUNOOB</span><br><span class=\"line\">LD_LIBRARY_PATH</span><br><span class=\"line\">_var</span><br><span class=\"line\">var2</span><br></pre></td></tr></table></figure>\n\n<p>无效命名:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?var=123</span><br><span class=\"line\">user*name=runoob</span><br></pre></td></tr></table></figure>\n\n<p>显示赋值</p>\n<p><code>your_name=&quot;runoob.com&quot;</code></p>\n<p>通过语句赋值</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> `ls /etc`</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> $(ls /etc)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上语句, 列出<code>/etc</code>路径下的所有文件名,赋值给<code>file</code></p>\n</blockquote>\n<h3 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h3><p>使用变量,只需要在变量前面加一个<code>$</code>符号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">&quot;shell&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$name</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;name&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>$name</code>和<code>$&#123;name&#125;</code>都是可以的, <code>&#123;&#125;</code>是可选的, 它的作用是帮助解释器来识别变量边界的, 比如:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> skill <span class=\"keyword\">in</span> Ada Coffe Action Java; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;I am good at <span class=\"variable\">$&#123;skill&#125;</span>Script&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不加 <code>&#123;&#125;</code> 则解释器认为<code>$skillScript</code>是一个变量(内容为空),</p>\n<blockquote>\n<blockquote>\n<p>推荐给所有的变量加上<code>&#123;&#125;</code>,养成好的编程习惯</p>\n</blockquote>\n</blockquote>\n<h3 id=\"只读变量\"><a href=\"#只读变量\" class=\"headerlink\" title=\"只读变量\"></a>只读变量</h3><p>已经定义的变量可以被重新赋值, <strong>只读变量</strong>除外</p>\n<p>定义方式为: 在变量前面加上 <code>readonly</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">readonly</span> name=<span class=\"string\">&quot;Shell&quot;</span></span><br><span class=\"line\">name=<span class=\"string\">&quot;jason&quot;</span> <span class=\"comment\"># 这里会报错  error: NAME: This variable is read only.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除变量\"><a href=\"#删除变量\" class=\"headerlink\" title=\"删除变量\"></a>删除变量</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unset</span> name</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>unset 命令不能删除只读变量。 删除之后不能使用</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.runoob.com/linux/linux-shell.html\" title=\"Linux Shell教程\">菜鸟教程</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>学习一门技术, 开始的时候不要纠结各种看不懂的语法、不钻牛角尖, 先培养兴趣, 再循序渐进.</p>\n"},{"title":"StreamSets","date":"2020-02-03T03:08:34.000Z","_content":"\nStreamSets 是我在迁移mysql数据到clickhouse中发现的, 现在来总结一下\n\nStreamsets是一款大数据实时采集和ETL工具，可以实现不写一行代码完成数据的采集和流转。通过拖拽式的可视化界面，实现数据管道(Pipelines)的设计和定时任务调度。最大的特点有：\n\n- 可视化界面操作，不写代码完成数据的采集和流转\n- 内置监控，可是实时查看数据流传输的基本信息和数据的质量\n- 强大的整合力，对现有常用组件全力支持，包括50种数据源、44种数据操作、46种目的地。\n\n对于Streamsets来说，最重要的概念就是数据源(Origins)、操作(Processors)、目的地(Destinations)。创建一个Pipelines管道配置也基本是这三个方面。\n\n常见的Origins有Kafka、HTTP、UDP、JDBC、HDFS等；Processors可以实现对每个字段的过滤、更改、编码、聚合等操作；Destinations跟Origins差不多，可以写入Kafka、Flume、JDBC、HDFS、Redis等。\n\n## 使用docker创建 StreamSets 实例\n\n```sh\ndocker run --rm -v /Users/aolei/app/streamsets/sdc-data:/data:rw -v /Users/aolei/app/streamsets/sdc-libs/jdbc:/opt/streamsets-datacollector-3.13.0/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/:rw -p 18630:18630 -d streamsets/datacollector dc\n```\n\n## 使用官方核心包运行\n\n[官网](https://streamsets.com/)\n\n[官网下载地址直达](https://streamsets.com/products/dataops-platform/open-source/)\n\n> 下载之前需要填写一些简单的信息\n\n### 配置很简单\n\n保存streamsets的配置 `-v /Users/aolei/app/streamsets/sdc-data:/data:rw`\n\n使用本地的 libs `-v /Users/aolei/app/streamsets/sdc-libs/lib:/opt/ streamsets-datacollector-3.13.0/streamsets-libs/:rw`\n\n## StreamSets 迁移 mysql - clickhouse 使用\n\n### 准备所需的jdbc jar包\n\n如果本地有 maven 环境的, 可以创建一个 `pom.xml` 文件\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.anjia</groupId>\n  <artifactId>demo</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>demo</name>\n  <url>http://maven.apache.org</url>\n  <dependencies>\n    <dependency>\n        <groupId>ru.yandex.clickhouse</groupId>\n        <artifactId>clickhouse-jdbc</artifactId>\n        <version>0.1.54</version>\n    </dependency>\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.47</version>\n  </dependency>\n  </dependencies>\n</project>\n```\n\n执行 `mvn dependency:copy-dependencies -DoutputDirectory=lib -DincludeScope=compile` 会在当前目录下生成**lib**文件夹,复制其中的jar包到`/Users/aolei/app/streamsets/sdc-libs/lib`(*你本地映射的streamsets lib目录*)\n\n## 腾讯云容器部署的小bug\n\n使用腾讯云容器部署的时候,外挂硬盘,容器启动后没有读写权限; 我的解决方案是先用正常启动的容器启动成功,远程登陆`chmod -R 775 /data/`,再切换回streamsets容器即可\n\n## 总结\n\n[本文借鉴-简书 北邮郭大宝](https://www.jianshu.com/p/870e1bb52da4)\n","source":"_posts/streamsets.md","raw":"---\ntitle: StreamSets\ndate: 2020-02-03 11:08:34\ntags: 大数据\n---\n\nStreamSets 是我在迁移mysql数据到clickhouse中发现的, 现在来总结一下\n\nStreamsets是一款大数据实时采集和ETL工具，可以实现不写一行代码完成数据的采集和流转。通过拖拽式的可视化界面，实现数据管道(Pipelines)的设计和定时任务调度。最大的特点有：\n\n- 可视化界面操作，不写代码完成数据的采集和流转\n- 内置监控，可是实时查看数据流传输的基本信息和数据的质量\n- 强大的整合力，对现有常用组件全力支持，包括50种数据源、44种数据操作、46种目的地。\n\n对于Streamsets来说，最重要的概念就是数据源(Origins)、操作(Processors)、目的地(Destinations)。创建一个Pipelines管道配置也基本是这三个方面。\n\n常见的Origins有Kafka、HTTP、UDP、JDBC、HDFS等；Processors可以实现对每个字段的过滤、更改、编码、聚合等操作；Destinations跟Origins差不多，可以写入Kafka、Flume、JDBC、HDFS、Redis等。\n\n## 使用docker创建 StreamSets 实例\n\n```sh\ndocker run --rm -v /Users/aolei/app/streamsets/sdc-data:/data:rw -v /Users/aolei/app/streamsets/sdc-libs/jdbc:/opt/streamsets-datacollector-3.13.0/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/:rw -p 18630:18630 -d streamsets/datacollector dc\n```\n\n## 使用官方核心包运行\n\n[官网](https://streamsets.com/)\n\n[官网下载地址直达](https://streamsets.com/products/dataops-platform/open-source/)\n\n> 下载之前需要填写一些简单的信息\n\n### 配置很简单\n\n保存streamsets的配置 `-v /Users/aolei/app/streamsets/sdc-data:/data:rw`\n\n使用本地的 libs `-v /Users/aolei/app/streamsets/sdc-libs/lib:/opt/ streamsets-datacollector-3.13.0/streamsets-libs/:rw`\n\n## StreamSets 迁移 mysql - clickhouse 使用\n\n### 准备所需的jdbc jar包\n\n如果本地有 maven 环境的, 可以创建一个 `pom.xml` 文件\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.anjia</groupId>\n  <artifactId>demo</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>demo</name>\n  <url>http://maven.apache.org</url>\n  <dependencies>\n    <dependency>\n        <groupId>ru.yandex.clickhouse</groupId>\n        <artifactId>clickhouse-jdbc</artifactId>\n        <version>0.1.54</version>\n    </dependency>\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.47</version>\n  </dependency>\n  </dependencies>\n</project>\n```\n\n执行 `mvn dependency:copy-dependencies -DoutputDirectory=lib -DincludeScope=compile` 会在当前目录下生成**lib**文件夹,复制其中的jar包到`/Users/aolei/app/streamsets/sdc-libs/lib`(*你本地映射的streamsets lib目录*)\n\n## 腾讯云容器部署的小bug\n\n使用腾讯云容器部署的时候,外挂硬盘,容器启动后没有读写权限; 我的解决方案是先用正常启动的容器启动成功,远程登陆`chmod -R 775 /data/`,再切换回streamsets容器即可\n\n## 总结\n\n[本文借鉴-简书 北邮郭大宝](https://www.jianshu.com/p/870e1bb52da4)\n","slug":"streamsets","published":1,"updated":"2021-11-04T15:54:07.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ii3001cahteh4kr0w3i","content":"<p>StreamSets 是我在迁移mysql数据到clickhouse中发现的, 现在来总结一下</p>\n<p>Streamsets是一款大数据实时采集和ETL工具，可以实现不写一行代码完成数据的采集和流转。通过拖拽式的可视化界面，实现数据管道(Pipelines)的设计和定时任务调度。最大的特点有：</p>\n<ul>\n<li>可视化界面操作，不写代码完成数据的采集和流转</li>\n<li>内置监控，可是实时查看数据流传输的基本信息和数据的质量</li>\n<li>强大的整合力，对现有常用组件全力支持，包括50种数据源、44种数据操作、46种目的地。</li>\n</ul>\n<p>对于Streamsets来说，最重要的概念就是数据源(Origins)、操作(Processors)、目的地(Destinations)。创建一个Pipelines管道配置也基本是这三个方面。</p>\n<p>常见的Origins有Kafka、HTTP、UDP、JDBC、HDFS等；Processors可以实现对每个字段的过滤、更改、编码、聚合等操作；Destinations跟Origins差不多，可以写入Kafka、Flume、JDBC、HDFS、Redis等。</p>\n<h2 id=\"使用docker创建-StreamSets-实例\"><a href=\"#使用docker创建-StreamSets-实例\" class=\"headerlink\" title=\"使用docker创建 StreamSets 实例\"></a>使用docker创建 StreamSets 实例</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -v /Users/aolei/app/streamsets/sdc-data:/data:rw -v /Users/aolei/app/streamsets/sdc-libs/jdbc:/opt/streamsets-datacollector-3.13.0/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/:rw -p 18630:18630 -d streamsets/datacollector dc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用官方核心包运行\"><a href=\"#使用官方核心包运行\" class=\"headerlink\" title=\"使用官方核心包运行\"></a>使用官方核心包运行</h2><p><a href=\"https://streamsets.com/\">官网</a></p>\n<p><a href=\"https://streamsets.com/products/dataops-platform/open-source/\">官网下载地址直达</a></p>\n<blockquote>\n<p>下载之前需要填写一些简单的信息</p>\n</blockquote>\n<h3 id=\"配置很简单\"><a href=\"#配置很简单\" class=\"headerlink\" title=\"配置很简单\"></a>配置很简单</h3><p>保存streamsets的配置 <code>-v /Users/aolei/app/streamsets/sdc-data:/data:rw</code></p>\n<p>使用本地的 libs <code>-v /Users/aolei/app/streamsets/sdc-libs/lib:/opt/ streamsets-datacollector-3.13.0/streamsets-libs/:rw</code></p>\n<h2 id=\"StreamSets-迁移-mysql-clickhouse-使用\"><a href=\"#StreamSets-迁移-mysql-clickhouse-使用\" class=\"headerlink\" title=\"StreamSets 迁移 mysql - clickhouse 使用\"></a>StreamSets 迁移 mysql - clickhouse 使用</h2><h3 id=\"准备所需的jdbc-jar包\"><a href=\"#准备所需的jdbc-jar包\" class=\"headerlink\" title=\"准备所需的jdbc jar包\"></a>准备所需的jdbc jar包</h3><p>如果本地有 maven 环境的, 可以创建一个 <code>pom.xml</code> 文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.anjia<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ru.yandex.clickhouse<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>clickhouse-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1.54<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>mvn dependency:copy-dependencies -DoutputDirectory=lib -DincludeScope=compile</code> 会在当前目录下生成<strong>lib</strong>文件夹,复制其中的jar包到<code>/Users/aolei/app/streamsets/sdc-libs/lib</code>(<em>你本地映射的streamsets lib目录</em>)</p>\n<h2 id=\"腾讯云容器部署的小bug\"><a href=\"#腾讯云容器部署的小bug\" class=\"headerlink\" title=\"腾讯云容器部署的小bug\"></a>腾讯云容器部署的小bug</h2><p>使用腾讯云容器部署的时候,外挂硬盘,容器启动后没有读写权限; 我的解决方案是先用正常启动的容器启动成功,远程登陆<code>chmod -R 775 /data/</code>,再切换回streamsets容器即可</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><a href=\"https://www.jianshu.com/p/870e1bb52da4\">本文借鉴-简书 北邮郭大宝</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>StreamSets 是我在迁移mysql数据到clickhouse中发现的, 现在来总结一下</p>\n<p>Streamsets是一款大数据实时采集和ETL工具，可以实现不写一行代码完成数据的采集和流转。通过拖拽式的可视化界面，实现数据管道(Pipelines)的设计和定时任务调度。最大的特点有：</p>\n<ul>\n<li>可视化界面操作，不写代码完成数据的采集和流转</li>\n<li>内置监控，可是实时查看数据流传输的基本信息和数据的质量</li>\n<li>强大的整合力，对现有常用组件全力支持，包括50种数据源、44种数据操作、46种目的地。</li>\n</ul>\n<p>对于Streamsets来说，最重要的概念就是数据源(Origins)、操作(Processors)、目的地(Destinations)。创建一个Pipelines管道配置也基本是这三个方面。</p>\n<p>常见的Origins有Kafka、HTTP、UDP、JDBC、HDFS等；Processors可以实现对每个字段的过滤、更改、编码、聚合等操作；Destinations跟Origins差不多，可以写入Kafka、Flume、JDBC、HDFS、Redis等。</p>\n<h2 id=\"使用docker创建-StreamSets-实例\"><a href=\"#使用docker创建-StreamSets-实例\" class=\"headerlink\" title=\"使用docker创建 StreamSets 实例\"></a>使用docker创建 StreamSets 实例</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -v /Users/aolei/app/streamsets/sdc-data:/data:rw -v /Users/aolei/app/streamsets/sdc-libs/jdbc:/opt/streamsets-datacollector-3.13.0/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/:rw -p 18630:18630 -d streamsets/datacollector dc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用官方核心包运行\"><a href=\"#使用官方核心包运行\" class=\"headerlink\" title=\"使用官方核心包运行\"></a>使用官方核心包运行</h2><p><a href=\"https://streamsets.com/\">官网</a></p>\n<p><a href=\"https://streamsets.com/products/dataops-platform/open-source/\">官网下载地址直达</a></p>\n<blockquote>\n<p>下载之前需要填写一些简单的信息</p>\n</blockquote>\n<h3 id=\"配置很简单\"><a href=\"#配置很简单\" class=\"headerlink\" title=\"配置很简单\"></a>配置很简单</h3><p>保存streamsets的配置 <code>-v /Users/aolei/app/streamsets/sdc-data:/data:rw</code></p>\n<p>使用本地的 libs <code>-v /Users/aolei/app/streamsets/sdc-libs/lib:/opt/ streamsets-datacollector-3.13.0/streamsets-libs/:rw</code></p>\n<h2 id=\"StreamSets-迁移-mysql-clickhouse-使用\"><a href=\"#StreamSets-迁移-mysql-clickhouse-使用\" class=\"headerlink\" title=\"StreamSets 迁移 mysql - clickhouse 使用\"></a>StreamSets 迁移 mysql - clickhouse 使用</h2><h3 id=\"准备所需的jdbc-jar包\"><a href=\"#准备所需的jdbc-jar包\" class=\"headerlink\" title=\"准备所需的jdbc jar包\"></a>准备所需的jdbc jar包</h3><p>如果本地有 maven 环境的, 可以创建一个 <code>pom.xml</code> 文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.anjia<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ru.yandex.clickhouse<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>clickhouse-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1.54<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>mvn dependency:copy-dependencies -DoutputDirectory=lib -DincludeScope=compile</code> 会在当前目录下生成<strong>lib</strong>文件夹,复制其中的jar包到<code>/Users/aolei/app/streamsets/sdc-libs/lib</code>(<em>你本地映射的streamsets lib目录</em>)</p>\n<h2 id=\"腾讯云容器部署的小bug\"><a href=\"#腾讯云容器部署的小bug\" class=\"headerlink\" title=\"腾讯云容器部署的小bug\"></a>腾讯云容器部署的小bug</h2><p>使用腾讯云容器部署的时候,外挂硬盘,容器启动后没有读写权限; 我的解决方案是先用正常启动的容器启动成功,远程登陆<code>chmod -R 775 /data/</code>,再切换回streamsets容器即可</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><a href=\"https://www.jianshu.com/p/870e1bb52da4\">本文借鉴-简书 北邮郭大宝</a></p>\n"},{"title":"小钢炮安装zerotier实现内网穿透","date":"2020-01-02T09:54:31.000Z","_content":"\n小钢炮安装zerotier实现内网穿透\n\n## 安装zerotier\n\n### 一、安装 entware\n\n为了安装最新版本的zerotier,我们需要先安装 *entware*\n\n执行\n\n```sh\nrm -rf /opt\n\nmkdir /opt\n\ncd /opt\n\nwget -O - http://bin.entware.net/aarch64-k3.10/installer/alternative.sh | sh\n```\n\n将自带opkg改名为opkg_bak暂时停用 灯大固件更新可以改回来免重装系统更新软件\n\nmv /usr/bin/opkg /usr/bin/opkg_bak\n\n### 二、配置entware环境变量\n\n`vim /etc/profile`\n\n直接在前面/usr/sbin:这行下直接添加下面两行并保存退出（ESC+:wq+Enter）\n\n`/opt/bin:/opt/sbin:`\n\n使配置生效\n\n`source /etc/profile`\n\n### 三、检查entware环境安装情况看是否报错\n\n```sh\nopkg update\n\nopkg list\n```\n\n### 四、安装zerotier\n\n`opkg install zerotier`\n\n启动zerotier\n\n`zerotier-one -d`\n\n查看服务状态\n\n`zerotier-one info`\n\n## 加入已有zerotier网络\n\n1. 登陆并打开你的zerotier网络管理页面\n2. 拷贝你的网络ID\n\n![ ](./CD65E8E75C1CBF3BF60AFBF278909ACD.jpg)\n\n加入网络 `zerotier-cli join <netowkr-id>`\n\n查看网络状态 `zerotier-cli listnetworks`\n\n## 设置开机自启\n\n创建 /etc/init.d/S60zerotier-one.sh 文件\n\n编辑为以下内容\n\n```sh\n\n#! /bin/sh\n\ncase \"$1\" in\n  start)\n    if ( pidof zerotier-one )\n    then echo \"ZeroTier-One is already running.\"\n    else\n        echo \"Starting ZeroTier-One\" ;\n        /opt/bin/zerotier-one -d ;\n        echo \"$(date) Started ZeroTier-One\" >> /opt/var/log/zerotier-one.log ;\n    fi\n    ;;\n  stop)\n    if ( pidof zerotier-one )\n    then\n        echo \"Stopping ZeroTier-One\";\n        killall zerotier-one\n        echo \"$(date) Stopped ZeroTier-One\" >> /opt/var/log/zerotier-one.log\n    else\n        echo \"ZeroTier-One was not running\" ;\n    fi\n    ;;\n  status)\n    if ( pidof zerotier-one )\n    then echo \"ZeroTier-One is running.\"\n    else echo \"ZeroTier-One is NOT running\"\n    fi\n    ;;\n  *)\n    echo \"Usage: /etc/init.d/zerotier-one {start|stop|status}\"\n    exit 1\n    ;;\nesac\n\nexit 0\n\n```\n\n**授予权限**\n\n`chmod 777 /etc/init.d/S60zerotier-one.sh`\n\n## 结束\n\n完成以上操作即可在小钢炮中安装zerotier并实现开机自启\n","source":"_posts/xgp-zerotier.md","raw":"---\ntitle: 小钢炮安装zerotier实现内网穿透\ndate: 2020-01-02 17:54:31\ntags: 小钢炮\n---\n\n小钢炮安装zerotier实现内网穿透\n\n## 安装zerotier\n\n### 一、安装 entware\n\n为了安装最新版本的zerotier,我们需要先安装 *entware*\n\n执行\n\n```sh\nrm -rf /opt\n\nmkdir /opt\n\ncd /opt\n\nwget -O - http://bin.entware.net/aarch64-k3.10/installer/alternative.sh | sh\n```\n\n将自带opkg改名为opkg_bak暂时停用 灯大固件更新可以改回来免重装系统更新软件\n\nmv /usr/bin/opkg /usr/bin/opkg_bak\n\n### 二、配置entware环境变量\n\n`vim /etc/profile`\n\n直接在前面/usr/sbin:这行下直接添加下面两行并保存退出（ESC+:wq+Enter）\n\n`/opt/bin:/opt/sbin:`\n\n使配置生效\n\n`source /etc/profile`\n\n### 三、检查entware环境安装情况看是否报错\n\n```sh\nopkg update\n\nopkg list\n```\n\n### 四、安装zerotier\n\n`opkg install zerotier`\n\n启动zerotier\n\n`zerotier-one -d`\n\n查看服务状态\n\n`zerotier-one info`\n\n## 加入已有zerotier网络\n\n1. 登陆并打开你的zerotier网络管理页面\n2. 拷贝你的网络ID\n\n![ ](./CD65E8E75C1CBF3BF60AFBF278909ACD.jpg)\n\n加入网络 `zerotier-cli join <netowkr-id>`\n\n查看网络状态 `zerotier-cli listnetworks`\n\n## 设置开机自启\n\n创建 /etc/init.d/S60zerotier-one.sh 文件\n\n编辑为以下内容\n\n```sh\n\n#! /bin/sh\n\ncase \"$1\" in\n  start)\n    if ( pidof zerotier-one )\n    then echo \"ZeroTier-One is already running.\"\n    else\n        echo \"Starting ZeroTier-One\" ;\n        /opt/bin/zerotier-one -d ;\n        echo \"$(date) Started ZeroTier-One\" >> /opt/var/log/zerotier-one.log ;\n    fi\n    ;;\n  stop)\n    if ( pidof zerotier-one )\n    then\n        echo \"Stopping ZeroTier-One\";\n        killall zerotier-one\n        echo \"$(date) Stopped ZeroTier-One\" >> /opt/var/log/zerotier-one.log\n    else\n        echo \"ZeroTier-One was not running\" ;\n    fi\n    ;;\n  status)\n    if ( pidof zerotier-one )\n    then echo \"ZeroTier-One is running.\"\n    else echo \"ZeroTier-One is NOT running\"\n    fi\n    ;;\n  *)\n    echo \"Usage: /etc/init.d/zerotier-one {start|stop|status}\"\n    exit 1\n    ;;\nesac\n\nexit 0\n\n```\n\n**授予权限**\n\n`chmod 777 /etc/init.d/S60zerotier-one.sh`\n\n## 结束\n\n完成以上操作即可在小钢炮中安装zerotier并实现开机自启\n","slug":"xgp-zerotier","published":1,"updated":"2021-11-04T15:54:07.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ii4001dahte1nf5gedp","content":"<p>小钢炮安装zerotier实现内网穿透</p>\n<h2 id=\"安装zerotier\"><a href=\"#安装zerotier\" class=\"headerlink\" title=\"安装zerotier\"></a>安装zerotier</h2><h3 id=\"一、安装-entware\"><a href=\"#一、安装-entware\" class=\"headerlink\" title=\"一、安装 entware\"></a>一、安装 entware</h3><p>为了安装最新版本的zerotier,我们需要先安装 <em>entware</em></p>\n<p>执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /opt</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /opt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt</span><br><span class=\"line\"></span><br><span class=\"line\">wget -O - http://bin.entware.net/aarch64-k3.10/installer/alternative.sh | sh</span><br></pre></td></tr></table></figure>\n\n<p>将自带opkg改名为opkg_bak暂时停用 灯大固件更新可以改回来免重装系统更新软件</p>\n<p>mv /usr/bin/opkg /usr/bin/opkg_bak</p>\n<h3 id=\"二、配置entware环境变量\"><a href=\"#二、配置entware环境变量\" class=\"headerlink\" title=\"二、配置entware环境变量\"></a>二、配置entware环境变量</h3><p><code>vim /etc/profile</code></p>\n<p>直接在前面/usr/sbin:这行下直接添加下面两行并保存退出（ESC+:wq+Enter）</p>\n<p><code>/opt/bin:/opt/sbin:</code></p>\n<p>使配置生效</p>\n<p><code>source /etc/profile</code></p>\n<h3 id=\"三、检查entware环境安装情况看是否报错\"><a href=\"#三、检查entware环境安装情况看是否报错\" class=\"headerlink\" title=\"三、检查entware环境安装情况看是否报错\"></a>三、检查entware环境安装情况看是否报错</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\"></span><br><span class=\"line\">opkg list</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、安装zerotier\"><a href=\"#四、安装zerotier\" class=\"headerlink\" title=\"四、安装zerotier\"></a>四、安装zerotier</h3><p><code>opkg install zerotier</code></p>\n<p>启动zerotier</p>\n<p><code>zerotier-one -d</code></p>\n<p>查看服务状态</p>\n<p><code>zerotier-one info</code></p>\n<h2 id=\"加入已有zerotier网络\"><a href=\"#加入已有zerotier网络\" class=\"headerlink\" title=\"加入已有zerotier网络\"></a>加入已有zerotier网络</h2><ol>\n<li>登陆并打开你的zerotier网络管理页面</li>\n<li>拷贝你的网络ID</li>\n</ol>\n<p><img src=\"./CD65E8E75C1CBF3BF60AFBF278909ACD.jpg\" alt=\" \"></p>\n<p>加入网络 <code>zerotier-cli join &lt;netowkr-id&gt;</code></p>\n<p>查看网络状态 <code>zerotier-cli listnetworks</code></p>\n<h2 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h2><p>创建 /etc/init.d/S60zerotier-one.sh 文件</p>\n<p>编辑为以下内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#! /bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  start)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( pidof zerotier-one )</span><br><span class=\"line\">    <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ZeroTier-One is already running.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting ZeroTier-One&quot;</span> ;</span><br><span class=\"line\">        /opt/bin/zerotier-one -d ;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(date)</span> Started ZeroTier-One&quot;</span> &gt;&gt; /opt/var/<span class=\"built_in\">log</span>/zerotier-one.log ;</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  stop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( pidof zerotier-one )</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Stopping ZeroTier-One&quot;</span>;</span><br><span class=\"line\">        killall zerotier-one</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(date)</span> Stopped ZeroTier-One&quot;</span> &gt;&gt; /opt/var/<span class=\"built_in\">log</span>/zerotier-one.log</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ZeroTier-One was not running&quot;</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  status)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( pidof zerotier-one )</span><br><span class=\"line\">    <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ZeroTier-One is running.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ZeroTier-One is NOT running&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: /etc/init.d/zerotier-one &#123;start|stop|status&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>授予权限</strong></p>\n<p><code>chmod 777 /etc/init.d/S60zerotier-one.sh</code></p>\n<h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>完成以上操作即可在小钢炮中安装zerotier并实现开机自启</p>\n","site":{"data":{}},"excerpt":"","more":"<p>小钢炮安装zerotier实现内网穿透</p>\n<h2 id=\"安装zerotier\"><a href=\"#安装zerotier\" class=\"headerlink\" title=\"安装zerotier\"></a>安装zerotier</h2><h3 id=\"一、安装-entware\"><a href=\"#一、安装-entware\" class=\"headerlink\" title=\"一、安装 entware\"></a>一、安装 entware</h3><p>为了安装最新版本的zerotier,我们需要先安装 <em>entware</em></p>\n<p>执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /opt</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /opt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt</span><br><span class=\"line\"></span><br><span class=\"line\">wget -O - http://bin.entware.net/aarch64-k3.10/installer/alternative.sh | sh</span><br></pre></td></tr></table></figure>\n\n<p>将自带opkg改名为opkg_bak暂时停用 灯大固件更新可以改回来免重装系统更新软件</p>\n<p>mv /usr/bin/opkg /usr/bin/opkg_bak</p>\n<h3 id=\"二、配置entware环境变量\"><a href=\"#二、配置entware环境变量\" class=\"headerlink\" title=\"二、配置entware环境变量\"></a>二、配置entware环境变量</h3><p><code>vim /etc/profile</code></p>\n<p>直接在前面/usr/sbin:这行下直接添加下面两行并保存退出（ESC+:wq+Enter）</p>\n<p><code>/opt/bin:/opt/sbin:</code></p>\n<p>使配置生效</p>\n<p><code>source /etc/profile</code></p>\n<h3 id=\"三、检查entware环境安装情况看是否报错\"><a href=\"#三、检查entware环境安装情况看是否报错\" class=\"headerlink\" title=\"三、检查entware环境安装情况看是否报错\"></a>三、检查entware环境安装情况看是否报错</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br><span class=\"line\"></span><br><span class=\"line\">opkg list</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、安装zerotier\"><a href=\"#四、安装zerotier\" class=\"headerlink\" title=\"四、安装zerotier\"></a>四、安装zerotier</h3><p><code>opkg install zerotier</code></p>\n<p>启动zerotier</p>\n<p><code>zerotier-one -d</code></p>\n<p>查看服务状态</p>\n<p><code>zerotier-one info</code></p>\n<h2 id=\"加入已有zerotier网络\"><a href=\"#加入已有zerotier网络\" class=\"headerlink\" title=\"加入已有zerotier网络\"></a>加入已有zerotier网络</h2><ol>\n<li>登陆并打开你的zerotier网络管理页面</li>\n<li>拷贝你的网络ID</li>\n</ol>\n<p><img src=\"./CD65E8E75C1CBF3BF60AFBF278909ACD.jpg\" alt=\" \"></p>\n<p>加入网络 <code>zerotier-cli join &lt;netowkr-id&gt;</code></p>\n<p>查看网络状态 <code>zerotier-cli listnetworks</code></p>\n<h2 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h2><p>创建 /etc/init.d/S60zerotier-one.sh 文件</p>\n<p>编辑为以下内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#! /bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  start)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( pidof zerotier-one )</span><br><span class=\"line\">    <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ZeroTier-One is already running.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Starting ZeroTier-One&quot;</span> ;</span><br><span class=\"line\">        /opt/bin/zerotier-one -d ;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(date)</span> Started ZeroTier-One&quot;</span> &gt;&gt; /opt/var/<span class=\"built_in\">log</span>/zerotier-one.log ;</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  stop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( pidof zerotier-one )</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Stopping ZeroTier-One&quot;</span>;</span><br><span class=\"line\">        killall zerotier-one</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(date)</span> Stopped ZeroTier-One&quot;</span> &gt;&gt; /opt/var/<span class=\"built_in\">log</span>/zerotier-one.log</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ZeroTier-One was not running&quot;</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  status)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( pidof zerotier-one )</span><br><span class=\"line\">    <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ZeroTier-One is running.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ZeroTier-One is NOT running&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: /etc/init.d/zerotier-one &#123;start|stop|status&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>授予权限</strong></p>\n<p><code>chmod 777 /etc/init.d/S60zerotier-one.sh</code></p>\n<h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>完成以上操作即可在小钢炮中安装zerotier并实现开机自启</p>\n"},{"title":"我的个人博客","date":"2018-11-04T08:53:40.000Z","_content":"\n## 这是我的第一个博客\n\n这个博客模版好坑,如果内容过短,在拉到最下面的时候就会自动弹到上面反复的弹\n\n## 这个项目怎么跑\n\n`docker run -d -p 4000:4000 --rm -v ~/myWorkspace/myproject/myblog/source:/app/source --network=app-bridge --name=webblog myblog:1.4`\n\n### 命令说明\n\n* **-d**   docker在后台运行\n* **-p**   指定容器运行的端口映射到机器端口, [内部]:[外部]\n* **--rm** 停止容器即删除\n* **-v**   docker数据卷操作, 将**机器路径**~/myWorkspace/myproject/myblog/source 挂载到**容器路径**/app/source  参考[管理容器中的数据](https://docs.docker-cn.com/engine/tutorials/dockervolumes/)\n* **--network**  docker网络操作, 将容器运行在 app-bridge 桥网络中, 参考[docker容器网络](https://docs.docker-cn.com/engine/userguide/networking/)\n* **--name** 容器的名称\n* **myblog:1.4**  这个是容器的镜像 ***:** 前面是镜像名称,后面是 镜像版本\n\n## 开启搜索功能\n\n```sh\n# npm i hexo-generator-search --save\n```\n\n_config.yml 配置\n\n```yml\nsearch:\n  path: search.json\n  field: post\n```\n\n## 考虑加入admin功能\n\n需要在Dockerfiler添加一下依赖\n`npm install --save hexo-admin-ehc --save --registry=https://registry.npm.taobao.org`\n\n修改_config.xml文件, 当然这是可选的,设置后台密码\n\n```bash\nadmin:\n  username: jason\n  password_hash: $2a$05$XdoQHWQBCutMxgX3iBG0XOfov2LTNelkMDbtMCkaQRgqhoMdV4tAe\n  secret: jason\n```\n\n设置admin基本属性\n\n```bash\nmetadata:\n  author_id: defaultAuthorId\n  language: zh\n```\n\n### 以下为占位符\n\n> 需要注意的是 最后面 myblog:1.0  这个 1.0 代表镜像版本,一情况而定\n","source":"_posts/我的个人博客.md","raw":"---\ntitle: 我的个人博客\ntags: 随便写写\ndate: 2018-11-04 16:53:40\n---\n\n## 这是我的第一个博客\n\n这个博客模版好坑,如果内容过短,在拉到最下面的时候就会自动弹到上面反复的弹\n\n## 这个项目怎么跑\n\n`docker run -d -p 4000:4000 --rm -v ~/myWorkspace/myproject/myblog/source:/app/source --network=app-bridge --name=webblog myblog:1.4`\n\n### 命令说明\n\n* **-d**   docker在后台运行\n* **-p**   指定容器运行的端口映射到机器端口, [内部]:[外部]\n* **--rm** 停止容器即删除\n* **-v**   docker数据卷操作, 将**机器路径**~/myWorkspace/myproject/myblog/source 挂载到**容器路径**/app/source  参考[管理容器中的数据](https://docs.docker-cn.com/engine/tutorials/dockervolumes/)\n* **--network**  docker网络操作, 将容器运行在 app-bridge 桥网络中, 参考[docker容器网络](https://docs.docker-cn.com/engine/userguide/networking/)\n* **--name** 容器的名称\n* **myblog:1.4**  这个是容器的镜像 ***:** 前面是镜像名称,后面是 镜像版本\n\n## 开启搜索功能\n\n```sh\n# npm i hexo-generator-search --save\n```\n\n_config.yml 配置\n\n```yml\nsearch:\n  path: search.json\n  field: post\n```\n\n## 考虑加入admin功能\n\n需要在Dockerfiler添加一下依赖\n`npm install --save hexo-admin-ehc --save --registry=https://registry.npm.taobao.org`\n\n修改_config.xml文件, 当然这是可选的,设置后台密码\n\n```bash\nadmin:\n  username: jason\n  password_hash: $2a$05$XdoQHWQBCutMxgX3iBG0XOfov2LTNelkMDbtMCkaQRgqhoMdV4tAe\n  secret: jason\n```\n\n设置admin基本属性\n\n```bash\nmetadata:\n  author_id: defaultAuthorId\n  language: zh\n```\n\n### 以下为占位符\n\n> 需要注意的是 最后面 myblog:1.0  这个 1.0 代表镜像版本,一情况而定\n","slug":"我的个人博客","published":1,"updated":"2021-11-04T15:54:07.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvo22ii4001gahtead282d7c","content":"<h2 id=\"这是我的第一个博客\"><a href=\"#这是我的第一个博客\" class=\"headerlink\" title=\"这是我的第一个博客\"></a>这是我的第一个博客</h2><p>这个博客模版好坑,如果内容过短,在拉到最下面的时候就会自动弹到上面反复的弹</p>\n<h2 id=\"这个项目怎么跑\"><a href=\"#这个项目怎么跑\" class=\"headerlink\" title=\"这个项目怎么跑\"></a>这个项目怎么跑</h2><p><code>docker run -d -p 4000:4000 --rm -v ~/myWorkspace/myproject/myblog/source:/app/source --network=app-bridge --name=webblog myblog:1.4</code></p>\n<h3 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h3><ul>\n<li><strong>-d</strong>   docker在后台运行</li>\n<li><strong>-p</strong>   指定容器运行的端口映射到机器端口, [内部]:[外部]</li>\n<li><strong>–rm</strong> 停止容器即删除</li>\n<li><strong>-v</strong>   docker数据卷操作, 将<strong>机器路径</strong>~/myWorkspace/myproject/myblog/source 挂载到<strong>容器路径</strong>/app/source  参考<a href=\"https://docs.docker-cn.com/engine/tutorials/dockervolumes/\">管理容器中的数据</a></li>\n<li><strong>–network</strong>  docker网络操作, 将容器运行在 app-bridge 桥网络中, 参考<a href=\"https://docs.docker-cn.com/engine/userguide/networking/\">docker容器网络</a></li>\n<li><strong>–name</strong> 容器的名称</li>\n<li><strong>myblog:1.4</strong>  这个是容器的镜像 *<strong>:</strong> 前面是镜像名称,后面是 镜像版本</li>\n</ul>\n<h2 id=\"开启搜索功能\"><a href=\"#开启搜索功能\" class=\"headerlink\" title=\"开启搜索功能\"></a>开启搜索功能</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># npm i hexo-generator-search --save</span></span><br></pre></td></tr></table></figure>\n\n<p>_config.yml 配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"考虑加入admin功能\"><a href=\"#考虑加入admin功能\" class=\"headerlink\" title=\"考虑加入admin功能\"></a>考虑加入admin功能</h2><p>需要在Dockerfiler添加一下依赖<br><code>npm install --save hexo-admin-ehc --save --registry=https://registry.npm.taobao.org</code></p>\n<p>修改_config.xml文件, 当然这是可选的,设置后台密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin:</span><br><span class=\"line\">  username: jason</span><br><span class=\"line\">  password_hash: <span class=\"variable\">$2a</span><span class=\"variable\">$05</span><span class=\"variable\">$XdoQHWQBCutMxgX3iBG0XOfov2LTNelkMDbtMCkaQRgqhoMdV4tAe</span></span><br><span class=\"line\">  secret: jason</span><br></pre></td></tr></table></figure>\n\n<p>设置admin基本属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  author_id: defaultAuthorId</span><br><span class=\"line\">  language: zh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以下为占位符\"><a href=\"#以下为占位符\" class=\"headerlink\" title=\"以下为占位符\"></a>以下为占位符</h3><blockquote>\n<p>需要注意的是 最后面 myblog:1.0  这个 1.0 代表镜像版本,一情况而定</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"这是我的第一个博客\"><a href=\"#这是我的第一个博客\" class=\"headerlink\" title=\"这是我的第一个博客\"></a>这是我的第一个博客</h2><p>这个博客模版好坑,如果内容过短,在拉到最下面的时候就会自动弹到上面反复的弹</p>\n<h2 id=\"这个项目怎么跑\"><a href=\"#这个项目怎么跑\" class=\"headerlink\" title=\"这个项目怎么跑\"></a>这个项目怎么跑</h2><p><code>docker run -d -p 4000:4000 --rm -v ~/myWorkspace/myproject/myblog/source:/app/source --network=app-bridge --name=webblog myblog:1.4</code></p>\n<h3 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h3><ul>\n<li><strong>-d</strong>   docker在后台运行</li>\n<li><strong>-p</strong>   指定容器运行的端口映射到机器端口, [内部]:[外部]</li>\n<li><strong>–rm</strong> 停止容器即删除</li>\n<li><strong>-v</strong>   docker数据卷操作, 将<strong>机器路径</strong>~/myWorkspace/myproject/myblog/source 挂载到<strong>容器路径</strong>/app/source  参考<a href=\"https://docs.docker-cn.com/engine/tutorials/dockervolumes/\">管理容器中的数据</a></li>\n<li><strong>–network</strong>  docker网络操作, 将容器运行在 app-bridge 桥网络中, 参考<a href=\"https://docs.docker-cn.com/engine/userguide/networking/\">docker容器网络</a></li>\n<li><strong>–name</strong> 容器的名称</li>\n<li><strong>myblog:1.4</strong>  这个是容器的镜像 *<strong>:</strong> 前面是镜像名称,后面是 镜像版本</li>\n</ul>\n<h2 id=\"开启搜索功能\"><a href=\"#开启搜索功能\" class=\"headerlink\" title=\"开启搜索功能\"></a>开启搜索功能</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># npm i hexo-generator-search --save</span></span><br></pre></td></tr></table></figure>\n\n<p>_config.yml 配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"考虑加入admin功能\"><a href=\"#考虑加入admin功能\" class=\"headerlink\" title=\"考虑加入admin功能\"></a>考虑加入admin功能</h2><p>需要在Dockerfiler添加一下依赖<br><code>npm install --save hexo-admin-ehc --save --registry=https://registry.npm.taobao.org</code></p>\n<p>修改_config.xml文件, 当然这是可选的,设置后台密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin:</span><br><span class=\"line\">  username: jason</span><br><span class=\"line\">  password_hash: <span class=\"variable\">$2a</span><span class=\"variable\">$05</span><span class=\"variable\">$XdoQHWQBCutMxgX3iBG0XOfov2LTNelkMDbtMCkaQRgqhoMdV4tAe</span></span><br><span class=\"line\">  secret: jason</span><br></pre></td></tr></table></figure>\n\n<p>设置admin基本属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  author_id: defaultAuthorId</span><br><span class=\"line\">  language: zh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以下为占位符\"><a href=\"#以下为占位符\" class=\"headerlink\" title=\"以下为占位符\"></a>以下为占位符</h3><blockquote>\n<p>需要注意的是 最后面 myblog:1.0  这个 1.0 代表镜像版本,一情况而定</p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/coreelec/0.png","post":"ckvo22ihn0003ahtehglob9fh","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/docker/01.png","post":"ckvo22ihq0008ahte4l2k9jel","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/flutter/1-1.png","post":"ckvo22ihs000eahte2cz5gcot","slug":"1-1.png","modified":1,"renderable":1},{"_id":"source/_posts/hackintosh/1.png","post":"ckvo22ihu000jahte5pene9pw","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript-event-queue/1.png","post":"ckvo22ihw000pahte8bw7b7l0","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript-event-queue/2.png","post":"ckvo22ihw000pahte8bw7b7l0","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript-event-queue/3.jpg","post":"ckvo22ihw000pahte8bw7b7l0","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/iis/iis_01.png","post":"ckvo22ihv000nahtecmo9fead","slug":"iis_01.png","modified":1,"renderable":1},{"_id":"source/_posts/iis/iis_02.png","post":"ckvo22ihv000nahtecmo9fead","slug":"iis_02.png","modified":1,"renderable":1},{"_id":"source/_posts/iis/iis_03.png","post":"ckvo22ihv000nahtecmo9fead","slug":"iis_03.png","modified":1,"renderable":1},{"_id":"source/_posts/iis/iis_04.png","post":"ckvo22ihv000nahtecmo9fead","slug":"iis_04.png","modified":1,"renderable":1},{"_id":"source/_posts/iis/iis_05.png","post":"ckvo22ihv000nahtecmo9fead","slug":"iis_05.png","modified":1,"renderable":1},{"_id":"source/_posts/iis/iis_06.png","post":"ckvo22ihv000nahtecmo9fead","slug":"iis_06.png","modified":1,"renderable":1},{"_id":"source/_posts/iis/iis_07.png","post":"ckvo22ihv000nahtecmo9fead","slug":"iis_07.png","modified":1,"renderable":1},{"_id":"source/_posts/iis/iis_08.png","post":"ckvo22ihv000nahtecmo9fead","slug":"iis_08.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/20180912154639866.png","post":"ckvo22ihy000uahte489sheql","slug":"20180912154639866.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/A84A183D1145E8245B6A7C8A84FB985F.jpg","post":"ckvo22ihy000uahte489sheql","slug":"A84A183D1145E8245B6A7C8A84FB985F.jpg","modified":1,"renderable":1},{"_id":"source/_posts/msl/WX20200108-154615@2x.png","post":"ckvo22ihy000uahte489sheql","slug":"WX20200108-154615@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/WX20200108-154856@2x.png","post":"ckvo22ihy000uahte489sheql","slug":"WX20200108-154856@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/WX20200108-155336@2x.png","post":"ckvo22ihy000uahte489sheql","slug":"WX20200108-155336@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/WX20200108-155928@2x.png","post":"ckvo22ihy000uahte489sheql","slug":"WX20200108-155928@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/WX20200108-160028@2x.png","post":"ckvo22ihy000uahte489sheql","slug":"WX20200108-160028@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/WX20200108-163130@2x.png","post":"ckvo22ihy000uahte489sheql","slug":"WX20200108-163130@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/WX20200108-164517@2x.png","post":"ckvo22ihy000uahte489sheql","slug":"WX20200108-164517@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/WX20200108-173249@2x.png","post":"ckvo22ihy000uahte489sheql","slug":"WX20200108-173249@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/WX20200108-173321@2x.png","post":"ckvo22ihy000uahte489sheql","slug":"WX20200108-173321@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/msl/WX20200602-161412@2x.png","post":"ckvo22ihy000uahte489sheql","slug":"WX20200602-161412@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/mysql-explain/2864885534-202c0878c1abf896.png","post":"ckvo22ihy000xahte895f7ov1","slug":"2864885534-202c0878c1abf896.png","modified":1,"renderable":1},{"_id":"source/_posts/python3/1.png","post":"ckvo22ii10013ahte6u3x7eua","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/serverless/WX20201015-145716@2x.png","post":"ckvo22ii20018ahtegpyc2dm6","slug":"WX20201015-145716@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/xgp-zerotier/CD65E8E75C1CBF3BF60AFBF278909ACD.jpg","post":"ckvo22ii4001dahte1nf5gedp","slug":"CD65E8E75C1CBF3BF60AFBF278909ACD.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckvo22ihl0001ahtebqi57agr","tag_id":"ckvo22iho0004ahtehp5s74zy","_id":"ckvo22ihs000cahte74br9r0o"},{"post_id":"ckvo22ihn0003ahtehglob9fh","tag_id":"ckvo22ihr000bahted1qda0t5","_id":"ckvo22ihu000kahte0iq335i5"},{"post_id":"ckvo22ihp0006ahte5odf3y0r","tag_id":"ckvo22ihu000hahtegzkj988f","_id":"ckvo22ihw000oahte41yhgefa"},{"post_id":"ckvo22ihq0008ahte4l2k9jel","tag_id":"ckvo22ihv000mahte78l19lsp","_id":"ckvo22ihx000sahtegp2f50i1"},{"post_id":"ckvo22ihr000aahte2ccn7gnf","tag_id":"ckvo22ihw000qahte071tdkza","_id":"ckvo22ihy000wahtebjrm65iu"},{"post_id":"ckvo22ihy000xahte895f7ov1","tag_id":"ckvo22iho0004ahtehp5s74zy","_id":"ckvo22ihz0010ahte18d4841j"},{"post_id":"ckvo22ihs000eahte2cz5gcot","tag_id":"ckvo22ihy000vahtebwqh07ml","_id":"ckvo22ii10012ahted4146mon"},{"post_id":"ckvo22ihz000yahtec90636kh","tag_id":"ckvo22iho0004ahtehp5s74zy","_id":"ckvo22ii20015ahte9w226540"},{"post_id":"ckvo22iht000gahtefco4e6ey","tag_id":"ckvo22ihz000zahte43467sgu","_id":"ckvo22ii20017ahteda0jee3b"},{"post_id":"ckvo22ihu000jahte5pene9pw","tag_id":"ckvo22ii10014ahte7awo343p","_id":"ckvo22ii3001bahtef23sdwn5"},{"post_id":"ckvo22ihv000lahte3la65qol","tag_id":"ckvo22ii30019ahte31rohvhy","_id":"ckvo22ii4001fahte3fed19bf"},{"post_id":"ckvo22ihv000nahtecmo9fead","tag_id":"ckvo22ii4001eahte1keb0akp","_id":"ckvo22ii5001iahte14hsbyiz"},{"post_id":"ckvo22ihw000pahte8bw7b7l0","tag_id":"ckvo22ii5001hahte8t2m7ixo","_id":"ckvo22ii5001kahte3hog4y33"},{"post_id":"ckvo22ihx000rahte65ycd1ui","tag_id":"ckvo22ii5001jahte9b69f6zz","_id":"ckvo22ii6001mahte5ejmeqev"},{"post_id":"ckvo22ihx000tahteg9gy965z","tag_id":"ckvo22ii5001lahtef25e5d59","_id":"ckvo22ii6001oahtefhwh3dw1"},{"post_id":"ckvo22ihy000uahte489sheql","tag_id":"ckvo22ii6001nahte8i3degn8","_id":"ckvo22ii7001qahtec2uw1yov"},{"post_id":"ckvo22ihz0011ahte6p9i031x","tag_id":"ckvo22ii4001eahte1keb0akp","_id":"ckvo22ii7001sahteb36o2kk0"},{"post_id":"ckvo22ii10013ahte6u3x7eua","tag_id":"ckvo22ii7001rahtefpb66y6t","_id":"ckvo22ii8001uahteag0a9jxo"},{"post_id":"ckvo22ii20018ahtegpyc2dm6","tag_id":"ckvo22ii7001tahte3h7r6d5g","_id":"ckvo22ii8001wahte93584t5i"},{"post_id":"ckvo22ii3001aahte4hgbd1zk","tag_id":"ckvo22ii8001vahtehe74ev8f","_id":"ckvo22ii8001yahte1bz0cep8"},{"post_id":"ckvo22ii3001cahteh4kr0w3i","tag_id":"ckvo22ii8001xahte0fxqbigs","_id":"ckvo22ii80020ahte7t98fob9"},{"post_id":"ckvo22ii4001dahte1nf5gedp","tag_id":"ckvo22ii8001zahtefrdc2aqz","_id":"ckvo22ii90022ahtee86lfnao"},{"post_id":"ckvo22ii4001gahtead282d7c","tag_id":"ckvo22ii80021ahted1e9460q","_id":"ckvo22ii90023ahte8e2ugyvl"}],"Tag":[{"name":"数据库","_id":"ckvo22iho0004ahtehp5s74zy"},{"name":"coreelec N1","_id":"ckvo22ihr000bahted1qda0t5"},{"name":"cron","_id":"ckvo22ihu000hahtegzkj988f"},{"name":"容器","_id":"ckvo22ihv000mahte78l19lsp"},{"name":"electron","_id":"ckvo22ihw000qahte071tdkza"},{"name":"Flutter","_id":"ckvo22ihy000vahtebwqh07ml"},{"name":"API","_id":"ckvo22ihz000zahte43467sgu"},{"name":"黑苹果","_id":"ckvo22ii10014ahte7awo343p"},{"name":"Hello World","_id":"ckvo22ii30019ahte31rohvhy"},{"name":"服务器","_id":"ckvo22ii4001eahte1keb0akp"},{"name":"JavaScript","_id":"ckvo22ii5001hahte8t2m7ixo"},{"name":"基础","_id":"ckvo22ii5001jahte9b69f6zz"},{"name":"路由器","_id":"ckvo22ii5001lahtef25e5d59"},{"name":"Windows","_id":"ckvo22ii6001nahte8i3degn8"},{"name":"Python","_id":"ckvo22ii7001rahtefpb66y6t"},{"name":"serverless","_id":"ckvo22ii7001tahte3h7r6d5g"},{"name":"脚本语言","_id":"ckvo22ii8001vahtehe74ev8f"},{"name":"大数据","_id":"ckvo22ii8001xahte0fxqbigs"},{"name":"小钢炮","_id":"ckvo22ii8001zahtefrdc2aqz"},{"name":"随便写写","_id":"ckvo22ii80021ahted1e9460q"}]}}